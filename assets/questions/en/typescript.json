{
    "1": {
        "question": "What is TypeScript?",
        "answer": "TypeScript is a superset of JavaScript that is explicitly typed and can be passed to a compiler that will produce plain JavaScript.\n\nTypeScript provides a way of working with JavaScript in a purely object-oriented environment. Here, you can use classes and interfaces. Furthermore, it is statically typed like C# or Java. To use, you’ll need a TypeScript compiler to compile and generate your code into a JavaScript file.\n\nA TypeScript file carries a .ts extension and is then compiled into a JavaScript file by the TypeScript compiler. You can write TypeScript with various editors like VS Code, Sublime, etc."
    },
    "2": {
        "question": "What are the differences between TypeScript and JavaScript?",
        "answer": "** TypeScript **\n\n1.Object-Oriented\n2.Is statically typed\n3.Supports modules\n4.Supports optional parameter function\n\n** JavaScript **\n\n1.Scripting\n2.Is not statically typed\n3.Does not support modules\n4.Does not support optional parameter function"
    },
    "3": {
        "question": "Why use TypeScript?",
        "answer": "The reasons why many developers use TypeScript rather than plain JavaScript stem from the key differences we’ve mentioned.\n\nOne of the biggest advantages of using TypeScript is that it allows you to use IDEs to provide code checking as you type the code. For large JavaScript projects, this can result in a much more secure code, especially where there are concerns about the privacy and security of your web hosting platform."
    },
    "4": {
        "question": "What are the components of TypeScript?",
        "answer": "There are three levels to TypeScript. As normally installed, the language comprises:\n\n1.The language itself typically runs through an IDE.\n2.A compiler, which translated TypeScript into plain JavaScript code.\n3.The Language Service, which provides editor operations on existing TypeScript code."
    },
    "5": {
        "question": "What are Types in TypeScript?",
        "answer": "Now we’ll get into some more technical questions. Types in TypeScript are the type of values we use in our programs. It supports many different types of values, such as numbers, strings, and Boolean values, as well as additional types like enum, any, never.\n\nThere are several good reasons to explicitly declare types in TypeScript. Types improve code quality and understandability and can help your compiler to catch errors that stem from incorrect type assignments. In addition, Types act as an extra layer of documentation that can help when you are working in a collaborative environment.\n\nTo explicitly declare a type, you can append the ‘:’ to the variable name, and then specify the Type:\n\nlet decimal: number = 6;\n\nlet color: string = “blue”;"
    },
    "6": {
        "question": "What are Type Assertions in TypeScript?",
        "answer": "TypeScript also has a feature known as “Type Assertion”. This operates like a typecast does in other object-oriented languages: it is used purely by the compiler and has no run-time impact. Using Type Assertions will not check your code for you, however.\n\nThis is the syntax for Type Assertions:\n\nlet strlength: number = (someString).length;"
    },
    "7": {
        "question": "What are the special data types in TypeScript",
        "answer": "* Any\n\n* Void\n\n* Never"
    },
    "8": {
        "question": "What scope do we have in TypeScript?",
        "answer": "There are three scopes as far as variables are concerned, namely:\n\n* Local\n\n* Function\n\n* Global\n\nWe create function and global variables using var, while const and let can be used by both."
    },
    "9": {
        "question": "What are interfaces in TypeScript?",
        "answer": "A TypeScript Interface is a special entity, which helps us to create objects with some properties? Let us proceed and create one. For instance, we can begin by typing the word Interface, which is a reserved word in TypeScript to create a TypeScript Interface."
    },
    "10": {
        "question": "What are Enums or Enumerations in TypeScript?",
        "answer": "This is one of the few TypeScript types that isn’t a JavaScript type-level extension. It allows us to define a set of named constants. TypeScript provides both string-based and numeric enums."
    },
    "11": {
        "question": "What are the different features of TypeScript?",
        "answer": "Features are as follows:\n\n* It is just JavaScript.\n* It supports other JS libraries\n* It is portable"
    },
    "12": {
        "question": "Does TypeScript support method/function overloading?",
        "answer": "Yes, TypeScript provides function overloading. Multiple functions can have the same name and the number of parameters, but the return type and parameter types should be different. TypeScript doesn’t support overloading where functions have the same name, types, and a different number of parameters."
    },
    "13": {
        "question": "What is the TypeScript declare keyword?",
        "answer": "The TypeScript keyword declares informs the compiler that this particular exists in external code, thus it shouldn’t trans-compile it to JavaScript’s output."
    },
    "14": {
        "question": "What’s the difference between an interface and a type statement?",
        "answer": "The Type alias declaration introduces a name for any type like union, tuples, and primitives. However, named object types are always introduced by Interfaces."
    },
    "15": {
        "question": "What is a TypeScript Map file?",
        "answer": "The Map TypeScript file translates the trans-compiled JavaScript that is in human unreadable format back to readable TypeScript format. This comes in handy when there is a need to carry out debugging during production since the source Map will be used."
    },
    "16": {
        "question": "What is “as” syntax in TypeScript?",
        "answer": "The “as” syntax in TypeScript is also a form of Type Assertion, as above. It is useful because the normal syntax for TypeScript, which uses the <type> variable, conflicts with JSX. When working with TypeScript and JSX, therefore, you should only use the syntax."
    },
    "17": {
        "question": "What is compiler context in TypeScript?",
        "answer": "When TypeScript code is compiled, your compiler will look at a group of files, and parse them to work out what is valid code and what isn’t. TypeScript also offers you the capability to adjust compiler options, though, and this is done via a tsconfig.json file."
    },
    "18": {
        "question": "What are the access modifiers in TypeScript?",
        "answer": "TypeScript also uses several access modifiers when working with the members of classes. The supported modifiers are public, private, and protected.\n\nThese work in the following way:\n\n* Public indicates that all members of a class, its child classes, and the instance of a class can access it.\n\n* Private means that only members of a class can access the other members.\n\n* Protected indicates that all members of a class and its child classes can access, but that the instance of a class cannot access.\n\nIf you leave the access modifiers undefined for a particular member of a class, it is assumed to be public. This can cause issues when it comes to compliance processes, so you should explicitly define access wherever feasible.\n\nYou should also note that class modifiers have no effect at all once your TypeScript code has been compiled. The resulting JS that the compiler produces ignores these modifiers."
    },
    "19": {
        "question": "What is contextual typing in TypeScript?",
        "answer": "Contextual typing is an extremely useful feature of TypeScript, in which the language can automatically work out the type of a particular variable from the types of the variables that have produced it in an equation.\n\nFor instance, if you define a function on a variable that is explicitly defined as a number type, and this function writes its result to another variable, TypeScript will assign the same type to this second variable. This saves developers a lot of time because you don’t have to explicitly define types in the outcomes of functions."
    },
    "20": {
        "question": "Explain relative and non-relative imports in TypeScript.",
        "answer": "TypeScript supports two types of imports: relative and non-relative.\n\nRelative imports are resolved relative to the location of the importing file and can be a good way to cut down the amount of code you need to type. On the other hand, relative imports should only be used for modules that you are sure will stay in the same place."
    },
    "21": {
        "question": "What are triple-slash directives in TypeScript?",
        "answer": "Triple-slash directives function are like comments in TypeScript, but they also contain instructions for your compiler. They contain single XML tags.\n\nTriple-slash directives only work if they are at the top of the containing file. You can put comments before them, including other triple-slash directives, but if they follow any other type of statement or declaration, your compiler will treat them as standard comments and ignore them.\n\nThere are several useful functions that triple-slash directives provide:\n\n* One of the most important is the /// <reference path=”some/reference/path” /> directive. Appending this to the beginning of your TypeScript code serves as an indication to your compiler that there are dependencies between files. Your compiler will then include these additional files in the compilation process.\n\n* You can also use triple-slash directives to declare a dependency on a package. This is done using /// <reference types=”…” />.\n\nDuring testing, you can also tell your compiler to ignore triple-slash directives using the –noResolve compiler flag. If this is specified, the compiler will ignore all of your triple-slash directives, and import no other files."
    },
    "22": {
        "question": "Can we use JSX in TypeScript?",
        "answer": "The answer is yes, but you will need to save your TypeScript file with a .tsx extension.\n\nThere are some important points to recognize when working with JSX and TypeScript, though. As an embeddable XML-like syntax, JSX must be compiled into valid JS itself. This adds another compilation step to your code, which can come with a performance cost.\n\nOn the other hand, TypeScript offers some powerful features for working with JSX: it supports embedding, type checking, and can compile JSX directly into JS."
    },
    "23": {
        "question": "Which JSX modes does TypeScript support?",
        "answer": "As standard, TypeScript ships with three JSX modes. Those are preserved, react, and react-native.\n\nThese modes are used to tailor the JSX output of your code. The preserve mode is designed to keep the JSX output in your compiled code so that it can be directly worked on by another compiler.\n\nWhen using this mode, the compiler will generate a file with a .jsx file extension, so it can be further transformed before use. The react-native mode does the same thing but will give the output a .js file extension.\n\nThe react mode works slightly differently. It leaves out the React.createElement modifier, and so does not contain raw JSX code in the output. The output file when using this mode will have a .js file extension."
    },
    "24": {
        "question": "Explain optional static typing in TypeScript",
        "answer": "By default, TypeScript is statically typed. This is one of its advantages because your compiler will automatically check your data types during the compilation process. However, it is also possible to turn off this function and make your compiler ignore the type of a particular variable.\n\nThis is done using any data type. Your compiler will not check any variables that are explicitly declared to be this data type, and so will not generate any errors at runtime."
    },
    "25": {
        "question": "What are modules in TypeScript?",
        "answer": "A module is a way of grouping entities. Modules can consist of any combination of entities like variables, interfaces, classes, etc.\n\nThe useful feature of modules is that the entities contained within them cannot be accessed from outside the module. You can execute each module in its scope only and not from the global scope. This provides a way of locking down access to crucial variables and functions.\n\nA module is created using the export command and can be used within other modules using the import command."
    },
    "26": {
        "question": "What are the differences between internal modules and external modules in TypeScript?",
        "answer": "TypeScript defines two types of modules, internal module, and external module. The nomenclature here is slightly confusing because the terminology for modules changed in the latest version of TypeScript. “External” modules are just called “modules” in this latest version, but previous versions used the same term for internal modules.\n\n** Internal Module **\n1.Internal modules are for logically grouping functions, classes, interfaces, and variables in a single unit. You can export the Internal module to another module\n2.For global as well as external modules internal modules remain the local or external members of them.\n3.ModuleDeclarations are used for declaring the Internal Modules that include their name and body.\n\n** External Module **\n\n1.External modules conceal the internal statements of the module definitions. They display the methods and parameters that are related to the declared variable.\n2.External modules get loaded as a separate body of code. They are referenced by their name.\n3.An external module is defined by writing an independent source file with a minimum of one import or export declaration."
    },
    "27": {
        "question": "What are decorators in TypeScript?",
        "answer": "In these last few questions, we’ll get into some of the more unusual features of TypeScript. You will often be asked about these features in interviews because knowledge of them proves that you’ve used them extensively.\n\nThe first of these features is “Decorators”.  A decorator is a particular type of declaration used to add annotations and metadata to existing code. They function in a declarative way. To use them, you will need to enable the experimentalDecorators compiler function."
    },
    "28": {
        "question": "What are mixins in TypeScript?",
        "answer": "Mixins are a way of building complex classes by combining several simpler partial classes. Though not many courses on the basics of TypeScript cover them they are an important part.\n\nAn example of a Mixin is as follows: Instead of a particular class A extending class B to obtain further functionality, function B invokes class A and then creates a new class with this added functionality. In this example, function B is referred to as a mixin."
    },
    "29": {
        "question": "How do you debug a TypeScript file?",
        "answer": "To debug, you will need to compile it alongside a .js source map file. TypeScript offers the ability to do this in a single command that will generate both your .js file and, alongside it, a .js.map file.\n\n$ tsc -sourcemap file1.ts\n\nYou will see if you open the .js file, that the last line will reference the source map file using a relative reference. These two files should be kept in the same place – relative to each other – or else you can change this reference if you need to separate them."
    },
    "30": {
        "question": "What is the TypeScript Definition Manager?",
        "answer": "The TypeScript Definition Manager (TSD) is a package manager for TypeScript. It is used to find and install TypeScript definition files from the open-source DefinitelyTyped repo.\n\nTSD is extremely useful because it allows you to use type definition files directly in your TypeScript code. For instance, if you would like to include some jQuery code in your .ts file by using:\n\n$(document).ready(function() { //Your jQuery code });\n\nYour compiler will tell you it cannot find the name “$”. That’s because this is a type that belongs to jQuery. You can TSD to find and download the jQuery Type Definition file, and then include this in your .ts file, and then your compiler will have everything it needs."
    },
    "31": {
        "question": "What are the ambients in TypeScript?",
        "answer": "Ambient declarations in your TypeScript code tell your compiler about source code that is stored elsewhere. They are typically used to integrate other js libraries into TypeScript such as jQuery, AngularJS, and nodejs.\n\nAmbient declarations are generally stored in a type declaration file with the d.ts extensions."
    },
    "32": {
        "question": "What are anonymous functions in TypeScript?",
        "answer": "Anonymous functions in Typescript are functions that are declared, but that lack any named identifier. This type of function can receive inputs and return outputs just as a standard function can, but is typically not accessible by a user after it has been created."
    },
    "33": {
        "question": "What is declaration merging in TypeScript?",
        "answer": "Sometimes, the plain JavaScript that TypeScript compiles will contain multiple declarations with the same name. Your TypeScript compiler will combine (or merge) these separate declarations into a single definition to improve the performance of your code. This merged definition will inherit the features of the original definitions it was compiled from."
    },
    "34": {
        "question": "How do you perform method overriding in TypeScript?",
        "answer": "Child classes can inherit the methods of their parent class. This is known as method overriding and can be useful for providing multiple child classes with the same methods quickly.\n\nHowever, there are a few considerations for performing method overriding:\n\n* The method must have an identical name as the parent class\n\n* The method must have the same parameter as in the parent class\n\n* There must be an IS-A relationship between child and parent classes"
    },
    "35": {
        "question": "What is the Lambda-Arrow Function in TypeScript?",
        "answer": "Versions of TypeScript that are compiled to ES6 standards have a shorthand way of defining the anonymous function (see above). These are referred to as lambda functions or arrow functions after the syntax used in them. These are essentially functions without names, and which ignore the function keyword."
    },
    "36": {
        "question": "What is the Rest Parameter in TypeScript?",
        "answer": "TypeScript also contains the Rest Parameter, a special parameter that allows you to pass values to a function. This parameter is invoked by using an ellipsis (…) before the parameter you are working with. This allows functions to operate with a varying number of arguments, which is extremely useful if you have an unknown number of parameters you want to pass to a particular function.\n\nThere are some considerations for working with the Rest Parameter, though:\n\n* Single rest parameter can be used per function\n\n* It has to be explicitly declared as an array type\n\n* It should be the endmost parameter in the parameter list"
    }
}