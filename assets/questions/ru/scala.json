{
    "1": {
        "question": "Что такое Scala?",
        "answer": "Scala - это язык программирования общего назначения, который поддерживает как функциональное, так и объектно-ориентированное программирование. Его исходный код компилируется в байт-код Java, а исполняемый код работает на виртуальной машине Java."
    },
    "2": {
        "question": "Назовите четыре типа идентификаторов в Scala?",
        "answer": "В Scala используются четыре типа идентификаторов:\n\n* Операторные идентификаторы\n* Смешанные идентификаторы\n* Алфавитно-цифровые идентификаторы\n* Литеральные идентификаторы"
    },
    "3": {
        "question": "Назовите различные типы литералов в Scala?",
        "answer": "В Scala используются различные литералы:\n\n* Целочисленные литералы\n* Логические литералы\n* Символьные литералы\n* Символьные литералы\n* Строковые литералы\n* Многострочные строки\n* Литералы с плавающей точкой"
    },
    "4": {
        "question": "Каковы преимущества использования Scala?",
        "answer": "Следующие преимущества Scala:\n\n* Использует легкий синтаксис для определения анонимной задачи\n8 Позволяет использовать вложенные функции\n* Поддерживает операции первого порядка\n* Предоставляет возможности параллельного программирования\n* Высокая масштабируемость и тестируемость\n* Меньше подвержен ошибкам функциональный стиль"
    },
    "5": {
        "question": "Что такое набор Scala? Каковы его различные типы?",
        "answer": "Набор Scala - это группа парных различных элементов одного типа. В этом наборе нет дублирующихся элементов. Существует два типа наборов - изменяемые и неизменяемые. По умолчанию Scala использует неизменяемые наборы."
    },
    "6": {
        "question": "Что такое карты Scala?",
        "answer": "Scala map - это группа уникальных пар значений (ключей). Карты также называются хеш-таблицами и делятся на два типа - изменяемые и неизменяемые. Основное различие между изменяемыми и неизменяемыми состоит в том, что неизменяемый объект не может изменяться сам по себе."
    },
    "7": {
        "question": "Что такое переменные Scala?",
        "answer": "Переменные - это зарезервированное место в памяти, используемое для хранения значений. При создании переменной компилятор выделяет для нее память в зависимости от типа данных переменной."
    },
    "8": {
        "question": "В чем разница между классом и объектом?",
        "answer": "Класс - это пользовательский прототип, который содержит переменные и методы. Объект - это экземпляр класса, с помощью которого можно получить доступ к методам и переменным."
    },
    "9": {
        "question": "Что такое хвост рекурсии в Scala?",
        "answer": "Рекурсия - это функция, которая вызывает саму себя снова и снова. Последняя операция, выполняемая этой функцией, - вызов самой себя. Эта техника используется в функциональном программировании."
    },
    "10": {
        "question": "Что такое Scala trait?",
        "answer": "Trait состоит из определений методов и полей, которые можно повторно использовать, смешивая их в классы. Определение trait выглядит точно так же, как определение класса, единственное отличие заключается в том, что используется слово Trait."
    },
    "11": {
        "question": "Что такое case-классы?",
        "answer": "Case-классы - это обычные классы, которые могут экспортировать параметры своего конструктора и позволяют рекурсивное декомпонирование через сопоставление с образцом. Эти параметры конструктора считаются открытыми и могут быть получены напрямую."
    },
    "12": {
        "question": "Как можно форматировать строку?",
        "answer": "Для форматирования строки можно использовать метод .format(). \n\nVal formatted= “%s %i”.format (mystring.myInt)"
    },
    "13": {
        "question": "Почему Scala предпочитает неизменяемость?",
        "answer": "Scala по умолчанию предпочитает неизменяемость и помогает в работе с параллельными программами и проблемами равенства."
    },
    "14": {
        "question": "Как мы можем добавить элемент в список?",
        "answer": "В Scala мы можем использовать ':+'' для добавления одного значения. Посмотрите приведенный ниже пример, чтобы лучше понять.\n\nvar myList = List.empty[String]\n\nmyList :+= 'a'\n\nmyList :+= 'b'\n\nmyList :+= 'c'\n\nиспользуйте ++ для добавления списка\n\nvar myList = List.empty[String]\n\nmyList ++= List('a', 'b', 'c')"
    },
    "15": {
        "question": "Какова основная разница между var и value?",
        "answer": "В Scala Val определяет константу, фиксированное значение, которое нельзя изменить после объявления и присвоения, тогда как var определяет переменную, которую можно изменить или переопределить."
    },
    "16": {
        "question": "В чем преимущество Scala по сравнению с другими языками программирования?",
        "answer": "Нет идеального языка, но Scala принесла много преимуществ, которые делают его лучше, чем другие языки программирования. Некоторые из этих особенностей:\n\n* Код Scala более лаконичен, читаем и не содержит ошибок.\n* В Scala проще писать, компилировать, отлаживать и запускать программы по сравнению с многими другими языками программирования.\n* Функциональное программирование в Scala позволяет решать одну и ту же проблему с разных сторон.\n* Параллелизм помогает в параллельной обработке задач.\n* Для выполнения конкретных задач используются различные сторонние библиотеки, которые добавляются в виде языковых конструкций."
    },
    "17": {
        "question": "Какова цель кортежей в Scala?",
        "answer": "Кортежи используются для объединения фиксированного количества элементов в группу, чтобы их можно было передать как один элемент. Кортеж является неизменяемым и может содержать различные типы объектов, в отличие от массива или списка."
    },
    "18": {
        "question": "Для чего используется каррирование функций в Scala?",
        "answer": "Каррирование - это простой процесс преобразования функции, которая принимает несколько аргументов, в функцию, которая принимает один аргумент. Эта функция часто используется в различных функциональных языках."
    },
    "19": {
        "question": "Что такое неявные параметры в Scala?",
        "answer": "Когда ни одно значение или параметр не передается в метод или функцию, компилятор ищет неявные параметры и выполняет их дальше. Метод может содержать только одно неявное ключевое слово."
    },
    "20": {
        "question": "Что такое замыкания в Scala?",
        "answer": "Замыкания Scala - это функции, которые используют несколько свободных переменных, и возвращаемое значение функции зависит от этих переменных. Свободные переменные определяются за пределами функции-замыкания и не привязаны к функции с допустимым значением."
    },
    "21": {
        "question": "Что такое 'высокоуровневые функции' Scala?",
        "answer": "'Высокоуровневые функции' Scala - это функции, которые содержат другие функции в качестве параметров и также возвращают функцию в качестве результата. Проще говоря, функция, которая работает с другими функциями, называется функцией высшего порядка."
    },
    "22": {
        "question": "Объясните анонимную функцию в Scala?",
        "answer": "Анонимная функция Scala - это функция, которая не содержит имени и предоставляет легкое определение функции. Она полезна, когда пользователю нужно создать встроенную функцию."
    },
    "23": {
        "question": "Перечислите несколько фреймворков Scala?",
        "answer": "Некоторые из наиболее распространенных фреймворков, поддерживаемых Scala:\n\n* Фреймворк Akka\n* Фреймворк Neo4j\n* Фреймворк Lift\n* Фреймворк Spark\n* Фреймворк Play\n* Фреймворк Scalding\n* Фреймворк Bowler"
    },
    "24": {
        "question": "Укажите типы переменных в Scala?",
        "answer": "В Scala чаще всего используются два типа переменных и они таковы:\n\n* Изменяемые переменные *\n\nИзменяемые переменные объявляются с использованием ключевого слова var.\n* Значения в изменяемых переменных могут изменяться.\n\n * Неизменяемые переменные *\n\nНеизменяемые переменные объявляются с использованием ключевого слова val.\n* Значения в неизменяемых переменных не могут быть изменены."
    },
    "25": {
        "question": "Что такое поток в Scala?",
        "answer": "Поток Scala - это список, который может быть бесконечно длинным, потому что его элементы вычисляются лениво."
    },
    "26": {
        "question": "Объясните операторы в Scala?",
        "answer": "Операторы в Scala:\n\n* Арифметические операторы\n* Отношения операторов\n* Логические операторы\n* Побитовые операторы\n* Операторы присваивания"
    },
    "27": {
        "question": "Зачем нужен App в Scala?",
        "answer": "Scala предлагает вспомогательный класс под названием 'App', который содержит метод main и его члены. Вместо того чтобы писать собственный метод main, вы можете расширить класс App и создавать исполняемые приложения на Scala."
    },
    "28": {
        "question": "Объясните область видимости переменных в Scala?",
        "answer": "В Scala есть три типа областей видимости для переменных:\n\n* Поля: Поля - это переменные, объявленные внутри объекта, которые можно получить из любого места в программе в зависимости от модификаторов доступа. Поля объявляются с использованием var, а также val.\n\n* Параметры метода: Параметры метода строго неизменны. Они в основном используются для передачи значений методам. Они доступны внутри метода, но можно получить к ним снаружи метода с использованием ссылки.\n\n* Локальные переменные: Локальные переменные объявляются внутри метода и доступны только внутри этого метода. Их можно получить, если вернуть их из метода."
    },
    "29": {
        "question": "Как Scala может быть одновременно объектно-ориентированным и функциональным языком программирования?",
        "answer": "Scala рассматривает каждое значение как объект, включая функции. Таким образом, Scala является смесью как функциональных, так и объектно-ориентированных возможностей."
    },
    "30": {
        "question": "Какие модификаторы доступа доступны в Scala?",
        "answer": "В Scala есть главным образом три модификатора доступа, и они таковы:\n\nPrivate: закрытый член доступен только в классе или объекте, в котором он объявлен.\n\nProtected: защищенный член может быть доступен из подклассов класса, в котором он объявлен.\n\nPublic: общедоступные члены могут быть доступны отовсюду."
    },
    "31": {
        "question": "Какова функциональность оператора Yield?",
        "answer": "Yield используется в цикле и генерирует значение для каждой итерации."
    },
    "32": {
        "question": "Что такое монада в Scala?",
        "answer": "Монада - это объект, который упаковывает в себе другой объект. Она позволяет объединять операции в цепочку."
    },
    "33": {
        "question": "Зачем используется Option в Scala?",
        "answer": "Option в Scala используется для обертывания отсутствующего значения."
    },
    "34": {
        "question": "Как компилируется код на Scala?",
        "answer": "Сначала код пишется в Scala REPL или среде разработки Scala, затем он преобразуется в байт-код и отправляется на компиляцию в JVM."
    },
    "35": {
        "question": "В чем разница между Null, Nil, None и Nothing?",
        "answer": "* Null представляет отсутствие значения\n* Nil обозначает конец списка\n* None - это значение опции без значения\n* Nothing - самый низший тип в системе типов"
    },
    "36": {
        "question": "Что такое вспомогательный конструктор?",
        "answer": "Вспомогательный конструктор используется для перегрузки конструктора. Он вызывает либо ранее определенный вспомогательный конструктор, либо основные конструкторы, присутствующие в теле. В Scala класс может содержать ноль или более вспомогательных конструкторов."
    },
    "37": {
        "question": "Что такое извлекатель в Scala?",
        "answer": "Извлекатель - это объект, который содержит метод 'unapply' как один из своих членов. Метод unapply используется для сопоставления значений и разбора их."
    },
    "38": {
        "question": "Каков будет результат x+y*z и почему?",
        "answer": "Scala вычисляет сначала y*z, а затем добавляет (y*z) к x.\n\nКак и в других языках программирования, Scala также следует правилам таблицы приоритетов и ассоциативности."
    }
}