{
    "1": {
        "question": "Что такое CDN?",
        "answer": "Сеть доставки контента (CDN) - это система доставки контента пользователям на основе географического расположения. CDN может доставлять веб-сайты, программные приложения и другие типы цифрового контента."
    },
    "2": {
        "question": "Что такое AJAX?",
        "answer": "AJAX - это техника веб-разработки для создания асинхронных веб-приложений. AJAX позволяет создавать динамичные, отзывчивые веб-приложения, которые можно обновлять без перезагрузки страницы."
    },
    "3": {
        "question": "Каковы различия между HTML и XHTML?",
        "answer": "HTML - это стандартный язык разметки для создания веб-страниц. XHTML - это более строгая и четко определенная версия HTML. Его часто используют для форматирования более сложных документов в указанной таксономии."
    },
    "4": {
        "question": "Что такое адаптивный дизайн?",
        "answer": "Адаптивный дизайн - это техника веб-разработки, которая создает веб-сайты, совместимые с несколькими устройствами с разными размерами экрана. Адаптивные веб-сайты разработаны так, чтобы хорошо выглядеть как на настольных, так и на мобильных устройствах."
    },
    "5": {
        "question": "Какие существуют типы селекторов CSS?",
        "answer": "Селекторы CSS используются для выбора элементов в HTML-документе. Существует несколько типов селекторов CSS, включая селекторы классов, селекторы идентификаторов и селекторы атрибутов."
    },
    "6": {
        "question": "Что такое псевдокласс?",
        "answer": "Псевдокласс - это селектор, который стилизует элемент на основе его состояния. Например, псевдокласс :hover стилизует элемент, когда пользователь наводит на него курсор мыши, но ничего не делает, когда он этого не делает."
    },
    "7": {
        "question": "Что такое сброс CSS?",
        "answer": "Сброс CSS - это набор правил, применяемых ко всем браузерам для нормализации стандартного оформления элементов HTML. Это особенно полезно при удалении форматирования элементов HTML."
    },
    "8": {
        "question": "Что такое система сеток CSS?",
        "answer": "Система сеток CSS - это набор правил, которые можно использовать для создания адаптивного макета. Существует множество различных систем сеток, но самая популярная - Bootstrap. Bootstrap упрощает создание макетов, которые реагируют предсказуемо, не требуя повторного изобретения колеса."
    },
    "9": {
        "question": "Что такое предобработчик CSS?",
        "answer": "Предобработчик CSS - это инструмент, который позволяет писать CSS более кратко и структурированно. Самые популярные предобработчики CSS - Less и Sass. Они не очень полезны для небольших проектов, но становятся экспоненциально более мощными по мере роста проекта."
    },
    "10": {
        "question": "Какие преимущества использования предобработчика CSS?",
        "answer": "Существует несколько преимуществ использования предобработчика CSS, таких как написание кода более структурированным и кратким образом, уменьшение объема кода, который необходимо написать, и упрощение поддержки и обновления кода. Более важно то, что он упрощает управление проектом среди большого числа разработчиков."
    },
    "11": {
        "question": "Что такое Bootstrap?",
        "answer": "Bootstrap - популярный CSS-фреймворк, предоставляющий набор правил для создания адаптивных макетов."
    },
    "12": {
        "question": "Каковы преимущества использования Bootstrap?",
        "answer": "Некоторые преимущества использования Bootstrap включают уменьшение объема написанного кода, наличие единообразного фреймворка для нескольких проектов и более простое создание адаптивных макетов."
    },
    "13": {
        "question": "Что такое task runner?",
        "answer": "Task runner - это инструменты, которые помогают автоматизировать общие задачи в процессе разработки, такие как минификация, компиляция, линтинг и т. д. Некоторые из самых популярных task runner'ов - это Gulp и Grunt."
    },
    "14": {
        "question": "Task runner - это инструменты, которые помогают автоматизировать общие задачи в процессе разработки, такие как минификация, компиляция, линтинг и т. д. Некоторые из самых популярных task runner'ов - это Gulp и Grunt.",
        "answer": "Преимущества использования task runner включают уменьшение времени, затрачиваемого на повторяющиеся задачи, автоматизацию утомительных и подверженных ошибкам задач, а также упрощение управления процессом разработки."
    },
    "15": {
        "question": "В каком виде фронтенд-разработки вы специализируетесь?",
        "answer": "Многие фронтенд-разработчики являются универсалами. Но ваш собеседник хочет знать, где лежит большинство вашего опыта. У вас больше опыта с Angular, чем с React? Предпочитаете ли вы чистый JavaScript перед использованием фреймворка?"
    },
    "16": {
        "question": "Какой ваш любимый CSS-фреймворк?",
        "answer": "Нравится ли вам сетка Bootstrap? Простота Foundation? Большинство собеседников будут в некоторой степени знакомы с самыми популярными системами, но если вы сможете удивить их (и обосновать свой ответ), вы можете заработать баллы."
    },
    "17": {
        "question": "Как бы вы оптимизировали производительность веб-сайта?",
        "answer": "Это широкий вопрос с множеством потенциальных ответов.\n\nВо-первых, убедитесь, что ваш код минимизирован и сжат. Это уменьшает размер ваших файлов, что делает их быстрее загружаемыми.\n\nВо-вторых, используйте кэширование везде, где это возможно. Это хранит часто используемые файлы локально, поэтому их не нужно загружать каждый раз, когда пользователь посещает ваш сайт. Но не переусердствуйте, иначе ваш сайт не будет столь динамичным, как вы хотите — он не будет обновляться так надежно.\n\nНаконец, используйте сеть доставки контента (CDN). Это распределяет ваши файлы по нескольким серверам, чтобы пользователи могли загружать их из соответствующих мест."
    },
    "18": {
        "question": "Какой ваш любимый инструмент для фронтенд-разработки?",
        "answer": "Инструменты для фронтенд-разработки - это любое программное обеспечение, которое помогает разрабатывать веб-сайты или веб-приложения. Некоторые из самых популярных инструментов для фронтенд-разработки - это редакторы кода и среды разработки, инструменты для автоматизации задач и предобработчики CSS. Будьте осторожны и укажите что-то вроде Sass или Git, либо углубитесь в детали с специализированным инструментом. Вы можете даже предложить, что ваш любимый инструмент - это выбор цвета или тестировщик пользовательского интерфейса."
    },
    "19": {
        "question": "Как бы вы приступили к отладке веб-сайта?",
        "answer": "Как и с ускорением веб-сайта, отладка веб-сайта широка. Но на самом деле они спрашивают об общих шагах, которые вы могли бы предпринять. Некоторые из наиболее распространенных методов включают использование инструментов разработчика браузера, использование автоматизированного набора средств для обеспечения качества, отладку кода построчно или использование метода 'резиновой утки' для отладки."
    },
    "20": {
        "question": "Какие общие проблемы с совместимостью между браузерами вы сталкивались?",
        "answer": "Некоторые из наиболее распространенных проблем с совместимостью между браузерами - это отличия в отображении CSS в разных браузерах, поддержка различных функций HTML и CSS разными браузерами, а также различный уровень поддержки стандартов разными браузерами. Это особенно сложно, поскольку многие браузеры различаются в зависимости от платформы, и платформа настолько различна; кто-то может открыть Chrome OS на умном холодильнике сегодня."
    },
    "21": {
        "question": "Какие типичные вызовы в работе фронтенд-разработчика вы сталкивались?",
        "answer": "Некоторые из наиболее типичных вызовов в работе фронтенд-разработчика включают проблемы с совместимостью между браузерами, работу с устаревшим кодом и оптимизацию производительности веб-сайта. Еще одной проблемой, с которой разработчики часто сталкиваются (но к сожалению, реже решают), является способность к созданию кода, соответствующего ADA."
    },
    "22": {
        "question": "Обсудите самое значительное достижение в вашей карьере.",
        "answer": "Будьте готовы обсудить случай, когда вы оказали значительное влияние на проект. Это ваш шанс действительно продать себя, так что убедитесь, что у вас есть отличная история. Если возможно, попробуйте связать свое достижение с ценностями или миссией компании. Не стесняйтесь выделить, как вас помогли коллеги или руководитель. Это показывает, что вы командный игрок."
    },
    "23": {
        "question": "Обсудите самый большой вызов в вашей карьере.",
        "answer": "Сейчас не время обсуждать личные вызовы, например, преодоление страха публичных выступлений. Сосредоточьтесь на профессиональном вызове, с которым вы столкнулись и преодолели, таком как разработка для устаревшей системы или встреча с определенной проблемой пользовательского интерфейса. Расскажите о том, в чем заключалась проблема, как вы с ней справились и каков был результат. Как и в предыдущем вопросе, попробуйте связать свою историю с ценностями или миссией компании."
    },
    "24": {
        "question": "Каков был ваш последний проект? Как он прошел?",
        "answer": "Это отличная возможность поговорить о чем-то, что вас увлекает. Если ваш последний проект был особенно сложным или успешным, упомяните об этом. Будьте конкретны по поводу используемых технологий и любых уникальных способов их использования."
    },
    "25": {
        "question": "Как вы эффективно управляете своим временем?",
        "answer": "Это важный вопрос для любого разработчика, поскольку работа может быть разнообразной и непредсказуемой. Расскажите о инструментах, которые вы используете для управления временем (например, таймере Помодоро) и о том, как вы их используете. Вы также можете обсудить, как вы приоритизируете свои задачи и как справляетесь с неожиданными прерываниями."
    },
    "26": {
        "question": "Что вы делаете, когда застреваете?",
        "answer": "Никому не нравится застревать, но это факт жизни для любого программиста. Расскажите о методах, которые вы используете, чтобы выбраться из тупика, таких как запрос помощи, поиск информации или перерыв. Также укажите, как вы предотвращаете попадание в тупик с самого начала, например, проведение исследований заранее и убеждение в том, что вы не расширяете объем проекта."
    },
    "27": {
        "question": "Что вы делаете, когда вы ошибаетесь?",
        "answer": "Каждый совершает ошибки. Важно, как вы реагируете, когда совершаете ошибку. Расскажите о шагах, которые вы предпринимаете для исправления ошибок, таких как отмена ваших изменений или написание тестов. Также укажите, как вы предотвращаете совершение тех же ошибок дважды, например, поддерживая более качественную документацию."
    },
    "28": {
        "question": "Каковы различия между HTML5 и HTML4?",
        "answer": "HTML5, последняя версия HTML, включает несколько новых элементов и атрибутов. Он также поддерживает воспроизведение аудио и видео и вводит поддержку локального хранилища."
    },
    "29": {
        "question": "Как создать пользовательскую страницу ошибки?",
        "answer": "Пользовательская страница ошибки - это страница, которая отображается при возникновении ошибки. Чтобы создать пользовательскую страницу ошибки, вам сначала нужно создать файл с названием 'error.php' или 'error.html'. Затем вам нужно отредактировать файл .htaccess, чтобы указать пользовательскую страницу ошибки."
    },
    "30": {
        "question": "Как вы используете медиа-запросы для оптимизации под разные размеры экранов?",
        "answer": "Медиа-запросы - это функция CSS3, которая позволяет применять разные стили в зависимости от ширины экрана. Чтобы использовать медиа-запросы, сначала вам нужно будет включить метатег viewport в вашем HTML. Затем вам нужно будет написать свой CSS с использованием медиа-запросов - но важно также интегрировать их в HTML."
    },
    "31": {
        "question": "В чем разница между == и ===?",
        "answer": "== проверяет равенство значений, тогда как === проверяет и значение, и тип данных на равенство."
    },
    "32": {
        "question": "В чем разница между анонимной функцией и именованной функцией?",
        "answer": "Именованная функция может быть обращена в будущем из любого места в коде, тогда как анонимная функция не может — хотя она будет выполняться, когда она встречается в строке кода."
    },
    "33": {
        "question": "В чем разница между встроенными, встроенными и внешними таблицами стилей?",
        "answer": "Встроенные стили записываются в коде (<div style=”background-color: blue”>), встроенные стили — это таблицы стилей, встроенные в заголовок страницы, а внешние таблицы стилей связываются с заголовком страницы."
    },
    "34": {
        "question": "Как создать адаптивный макет?",
        "answer": "Вы можете создать адаптивный макет, используя фреймворк, такой как Bootstrap. В противном случае вам придется вручную определять размер экрана и вносить изменения. Лучшие практики адаптивного макета включают создание «надежной» системы, которая скрывает элементы, если они слишком малы для просмотра."
    },
    "35": {
        "question": "Как использовать анимацию и переходы?",
        "answer": "Большинство анимаций и переходов реализуются в CSS через JavaScript; еще один способ, с которым CSS, JavaScript и HTML настолько сплетены. Вы можете назвать элемент в CSS и установить его параметры только с помощью CSS, чтобы затем обрабатывать анимацию с помощью JavaScript. Есть некоторые встроенные анимации и переходы в CSS, но они обычно довольно простые."
    }
}