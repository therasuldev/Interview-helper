{
    "1": {
        "question": "Каков обычный рабочий процесс для внедрения новой функции на back-end?",
        "answer": "Рабочие процессы, используемые для внедрения функций на back-end, могут варьироваться в зависимости от используемого технологического стека компании. Типичный рабочий процесс включает обсуждение функции с заинтересованными сторонами, прототипирование и проектирование функции, написание кода и контроль качества (QA).\n\nBack-end разработчик обычно работает с front-end разработчиком, чтобы обеспечить правильную передачу данных между клиентом и сервером. Также важно убедиться, что новые функции совместимы со старыми версиями приложения."
    },
    "2": {
        "question": "Что такое веб-сервер?",
        "answer": "Веб-сервер можно описать как компьютер, который хранит веб-страницы и распространяет их. Когда вы вводите URL в браузер, браузер обращается к веб-серверу с запросом на страницу. Затем страница отправляется обратно в браузер веб-сервером и отображается на экране.\n\nNGINX и Apache - два наиболее широко используемых веб-сервера для back-end приложений. Веб-серверы также способны хостить другие ресурсы, такие как видео и изображения."
    },
    "3": {
        "question": "Что такое принципы DRY и DIE?",
        "answer": "Согласно принципу DRY (Don't Repeat Yourself - Не повторяй себя), разработчики программного обеспечения не должны дублировать код. Дублирование кода может вызвать проблемы с обслуживанием, так как необходимо вносить множественные изменения. Аналогично принципу DRY, DIE (Duplication Is Evil - Дублирование - это зло) идет на шаг дальше и утверждает, что даже небольшое количество дублирования следует избегать."
    },
    "4": {
        "question": "В чем разница между GET и POST?",
        "answer": "GET запрос извлекает данные с веб-сервера. POST запрос отправляет данные на веб-сервер. GET запрос передает параметры в URL. В POST запросе параметры включены в тело запроса."
    },
    "5": {
        "question": "Различие между архитектурой программного обеспечения и дизайном программного обеспечения.",
        "answer": "Архитектура программного обеспечения относится к структуре программы. Таким образом, ее можно понимать как голый скелет программы. Дизайн программного обеспечения относится к фактической реализации кода для требований программного обеспечения. Таким образом, архитектуру программного обеспечения можно рассматривать как чертеж программы, а дизайн программного обеспечения - как процесс построения программы.\n\nЧто касается разработки, дизайн программного обеспечения углубляется в детали. И архитектура программного обеспечения, и дизайн программного обеспечения - это два отдельных процесса, которые взаимодействуют, чтобы сформировать интегрированный процесс разработки."
    },
    "6": {
        "question": "Расскажите о непрерывной интеграции и непрерывной доставке.",
        "answer": "Непрерывная интеграция и непрерывная доставка - два взаимосвязанных процесса инженерии программного обеспечения. Непрерывная интеграция - это процесс, который происходит непрерывно, чтобы обеспечить регулярное создание и тестирование программы. Непрерывная доставка, с другой стороны, - это непрерывный процесс разработки, который происходит в последней части жизненного цикла программы, непосредственно перед производством.\n\nЭти два процесса формируют сплоченный автоматизированный процесс, который поддерживает работу на правильном пути и увеличивает скорость производства, избавляясь от несоответствий между командами разработки и операций."
    },
    "7": {
        "question": "Как можно внедрить масштабируемость в программу?",
        "answer": "Масштабируемость - важный аспект, который следует учитывать для повышения производительности, особенно в связи с повышенными требованиями пользователей и адаптацией функций и элементов к большему объему пользовательских данных. Для определения срока службы программы необходимо проверить ее масштабируемость.\n\nОтсутствие масштабируемости требует переписывания приложения с новым стеком технологий, который адаптируется к росту аудитории. Масштабируемость программы может увеличиться с помощью функций, таких как кэш, состояния, API, сортировка и асинхронное программирование. Кроме того, инструменты, такие как базы данных и фреймворки, обладают большей масштабируемостью, чем некоторые другие."
    },
    "8": {
        "question": "Что такое базы данных NoSQL? Упомяните различные типы баз данных NoSQL.",
        "answer": "С увеличением объема больших данных интернет стал сложным местом. Базы данных NoSQL помогают решить эту проблему. Базы данных NoSQL не являются традиционными или реляционными системами управления базами данных.\n\nNoSQL означает «Не только SQL». С увеличением объемов данных большая часть, близкая к 85%, является неструктурированной, запутанной и сложной. База данных NoSQL обрабатывает и сортирует такие данные. Таким образом, NoSQL предлагает механизм хранения и извлечения данных, которые моделируются с использованием других средств, а не табличных отношений, используемых в системе управления базами данных реляционной модели (RDBMS).\n\nТипы баз данных NoSQL включают\n\n* Графовые\n* Ключ-значение\n* Ориентированные на документы\n* Столбцовые"
    },
    "9": {
        "question": "Почему используется микросервисная архитектура?",
        "answer": "Микросервисная архитектура характеризуется интеграцией нескольких небольших, но независимо развертываемых сервисов в одно приложение. Это делает работу более гибкой, поскольку для написания отдельных сервисов можно использовать разные языки программирования. Таким образом, для разных сервисов можно использовать разные языки.\n\nТехническое обслуживание также становится проще, поскольку, несмотря на интеграцию сервисов, они слабо связаны. Модель архитектуры микросервисов хорошо работает и предпочитается большими командами, однако она может быть не совсем лишена таких проблем, как отладка."
    },
    "10": {
        "question": "Объясните внедрение SQL-кода.",
        "answer": "Внедрение SQL-кода может уничтожить базу данных путем внедрения вредоносного кода или взломать вашу базу данных путем внедрения хакерского кода. Это происходит потому, что существует небольшое разделение между программным кодом и пользовательским вводом. Внедрение SQL-кода является распространенным видом атаки внедрения на базы данных.\n\nАтаки внедрения можно предотвратить следующими способами:\n\n* Подготовка запросов с запросами, имеющими определенные параметры\n* Использование предварительно определенных и хранимых процедур\n* Наличие процесса проверки ввода, с помощью которого можно составить черный или белый список ввода\n* Придерживайтесь принципа минимальных привилегий, то есть не предоставляйте общедоступному серверу базы данных премиальный доступ типа администратора. Таким образом, даже если злоумышленнику удастся взломать приложение, это не поставит под угрозу целостность базы данных, поскольку он не сможет получить к ней доступ."
    },
    "11": {
        "question": "Различия между приемочным и функциональным тестированием.",
        "answer": "Различия заключаются в следующем:\n\nФункциональное тестирование: Функциональное тестирование проводится для проверки того, работает ли продукт, особенно приложение, должным образом. Оно позволяет определить, соответствует ли созданное программное обеспечение бизнес-потребностям.\n\nПриемочное тестирование: Приемочное тестирование проводится для проверки того, создали ли вы правильный продукт. Оно подтверждает, что продукт соответствует потребностям клиента. Приемочные тесты гарантируют, что пользователь (клиент) действительно получает выгоду от продукта и использует его по назначению."
    },
    "12": {
        "question": "Назовите некоторые этапы тестирования производительности.",
        "answer": "* Определение среды для тестирования\n* Окончательный выбор показателей производительности\n* Создание плана и проекта теста производительности\n* Настройка среды для теста\n* Реализация проекта теста\n* Выполнение тестов производительности\n* Анализ результатов теста, создание отчета о тесте и рекомендации по повторному тестированию для низкопроизводительных приложений"
    },
    "13": {
        "question": "Назовите некоторые преимущества веб-служб.",
        "answer": "* Взаимодействие: Доступ к веб-службам можно получить по сети и запустить с помощью протоколов HTTP/SOAP. Для передачи данных веб-службы используют XML/JSON, поэтому их можно визуализировать с помощью различных языков программирования. Например, к веб-службе, написанной на Java, можно получить доступ по сети, она работает по протоколу HTTP/SOAP и использует XML/JSON для передачи данных, следовательно, ее можно разработать на любом языке программирования. Веб-служба может быть написана на Java, а клиент на PHP и наоборот.\n* Повторное использование: Многие клиентские приложения могут одновременно использовать одну и ту же веб-службу.\n* Слабое связывание: Клиентский код веб-службы не зависит от серверного кода, таким образом, в приложении возможна слабая связь.\n* Развертывание и интеграция выполняются так же просто, как и веб-приложения.\n* Одновременно может работать несколько версий службы."
    },
    "14": {
        "question": "В чем разница между кластерными и некластерными индексами?",
        "answer": "Кластерный индекс физически хранит строки на диске в том порядке, в котором они появляются в индексе. Таким образом, возможен только один кластерный индекс. Кластерный индекс указывает базе данных хранить значения, которые находятся рядом друг с другом на диске.\n\nНекустеризованный индекс имеет второй список с указателями на физические строки. Может быть несколько некластерных индексов, каждый новый индекс увеличивает время записи новых записей.\n\nЕсли все столбцы нужны такими, какие они есть, то чтение из кластерного индекса происходит быстрее. Вам не нужно обращаться к индексу и таблице в таком порядке. Однако, если данные необходимо переупорядочить, запись в таблицу с кластерным индексом может замедлить процесс."
    },
    "15": {
        "question": "Каковы частые проблемы с ORM?",
        "answer": "ORM часто сталкиваются с проблемами производительности, неправильным сопоставлением данных и сложностями с выполнением сложных запросов."
    },
    "16": {
        "question": "Что такое теорема CAP?",
        "answer": "Теорема CAP, также известная как теорема Брюера, гласит, что система распределенных баз данных может гарантировать только две из трех характеристик: согласованность, доступность и отказоустойчивость.\n\nЭта теорема является основой для современных методов распределенных вычислений. Крупнейшие компании, занимающиеся трафиком (например, Amazon, Google, Facebook), используют эту основу для своей архитектуры приложений."
    },
    "17": {
        "question": "Что означает REST?",
        "answer": "REST (Representational State Transfer) - это программная архитектура, определяющая, как должен работать API. REST был впервые создан для обеспечения структуры управления связью в сложных сетях, таких как Интернет."
    },
    "18": {
        "question": "Что такое объектно-ориентированное программирование?",
        "answer": "Объектно-ориентированное программирование (ООП) - это тип компьютерного программирования, который организует проектирование программного обеспечения вокруг объектов или данных, а не функций и логики."
    },
    "19": {
        "answer": "1. Конструктор по умолчанию: конструктор без аргументов. Они инициализируют элементы данных реальными значениями.\n2. Параметризованный конструктор: содержит аргументы в конструкторе. Здесь можно передать несколько аргументов.\n3. Конструктор копирования: инициализирует объект с использованием другого объекта того же класса."
    },
    "20": {
        "question": "Что такое сериализация?",
        "answer": "Сериализация - это процесс или механизм, который преобразует состояние объекта в поток байтов. Десериализация делает ровно наоборот. Сериализация объекта позволяет легко преобразовать поток байтов в копию объекта."
    },
    "21": {
        "question": "В чем разница между finally, final и finalize?",
        "answer": "Final - это модификатор доступа, finally - это блок, а finalize - это метод класса объекта. Финальный метод выполняется при вызове. Finally выполняется один раз после выполнения блока try-catch. Его выполнение не зависит от исключения. Метод finalize выполняется перед тем, как объект может быть уничтожен."
    },
    "22": {
        "question": "В чем разница между примитивными типами данных и классами-обертками?",
        "answer": "Классы-обертки позволяют использовать различные примитивные типы данных, такие как int или boolean, как объекты. Класс-обертка преобразует примитивный тип в объект. Примитивный тип - это предопределенный тип данных, предоставляемый языком программирования Java."
    },
    "23": {
        "question": "Как работает HashMap?",
        "answer": "HashMap в Java работает с различными принципами хеширования. Он хранит записи в карте, используя свои внутренние статические классы. HashMap использует несколько корзин. Каждая корзина HashMap указывает на односвязный список.\n\nОднако в Java 8 HashMap заменяет связанный список двоичным деревом, когда количество элементов корзины достигает порогового значения. HashMap поддерживает несколько нулевых значений, но только один нулевой ключ."
    },
    "24": {
        "question": "Что такое поток?",
        "answer": "Поток - это поток выполнения внутри программы. Потоки позволяют приложениям Java быть более отзывчивыми и быстрыми, выполняя несколько задач одновременно."
    },
    "25": {
        "question": "В чем разница между потоком и процессом?",
        "answer": "Процесс - это выполнение программы, которое позволяет пользователям выполнять действия, указанные в программе.\n\nС другой стороны, поток - это единица выполнения. Это единица выполнения и может управляться планировщиком отдельно. Процесс может иметь несколько потоков, которые выполняются одновременно."
    },
    "26": {
        "question": "Что такое шаблон проектирования?",
        "answer": "Шаблон проектирования - это повторяющееся или многоразовое решение для распространенных проблем в проектировании программного обеспечения. Эти шаблоны похожи на планы и часто показывают взаимодействие между классами или объектами."
    },
    "27": {
        "question": "В чем разница между MySQL и SQL?",
        "answer": "SQL (язык структурированных запросов) - это язык программирования, используемый для связи с базами данных. MySQL - это система управления реляционными базами данных, которая использует SQL в качестве основного языка. SQL используется для создания, изменения и удаления баз данных, а MySQL - для хранения и доступа к данным в базах данных."
    },
    "28": {
        "question": "Какие подмножества существуют в SQL?",
        "answer": "1. Язык определения данных (DDL): Позволяет выполнять различные операции в базе данных, такие как CREATE, ALTER и DELETE.\n\n2. Язык манипуляции данными (DML): Позволяет получать доступ к данным и изменять их. Он позволяет вставлять, обновлять и удалять данные из базы данных.\n\n3. Язык управления данными (DCL): Позволяет управлять операциями определения данных и манипуляции данными, такими как предоставление и отзыв прав доступа пользователей, а также создание, изменение и удаление объектов базы данных, таких как таблицы и представления."
    },
    "29": {
        "question": "Что такое СУБД?",
        "answer": "СУБД (Система управления реляционными базами данных) - это программа, используемая для управления реляционной базой данных. Она служит основой для современных систем управления базами данных, таких как MySQL, Microsoft Access, Microsoft SQL Server и Oracle. СУБД использует SQL для получения данных из базы данных."
    },
    "30": {
        "question": "Что такое оператор SELECT?",
        "answer": "Оператор SELECT позволяет выбирать данные из баз данных SQL. Результат запроса сохраняет возвращенные данные в результирующую таблицу."
    },
    "31": {
        "question": "Что такое OLTP?",
        "answer": "OLTP (Online Transaction Processing - онлайн-обработка транзакций) позволяет большим группам людей выполнять массовые транзакции с базой данных в режиме реального времени через Интернет. Транзакции с базой данных - это когда данные изменяются, вставляются, удаляются или запрашиваются."
    },
    "32": {
        "question": "В чем разница между OLAP и OLTP?",
        "answer": "OLTP означает online transaction processing (online-обработка транзакций), а OLAP означает online analytical processing (online-аналитическая обработка). OLTP можно описать как онлайн-изменение базы данных, а OLAP - как систему обработки запросов к базе данных online."
    },
    "33": {
        "question": "В чем разница между статическими и динамическими веб-сайтами?",
        "answer": "В чем разница между статическими и динамическими веб-сайтами?"
    },
    "34": {
        "question": "Что означает высокая доступность (HA)?",
        "answer": "Доступность относится к возможности пользователя получить доступ к системе. Если пользователь не может получить доступ к приложению, считается, что приложение недоступно. Высокая доступность означает, что приложение всегда будет доступно без перебоев.\n\nОдним из распространенных способов повышения доступности веб-приложений является кластеризация с резервными серверными узлами. Доступность обычно выражается в процентах от времени безотказной работы за определенный период времени."
    },
    "35": {
        "question": "Почему вы выбираете архитектуру микросервисов?",
        "answer": "Архитектура микросервисов предлагает множество преимуществ. Вот некоторые из них:\n\n* Микросервисы легко адаптируются к другим фреймворкам и технологиям.\n\n* Отказ одного процесса не обязательно влияет на всю систему.\n\n* Подходит как для небольших, так и для крупных компаний.\n\n* Может использоваться независимо и занимает относительно немного времени."
    },
    "36": {
        "question": "Что такое контейнеризация?",
        "answer": "Контейнеризация - это форма виртуализации, которая была разработана как альтернатива виртуализации на базе гипервизора.\n\nКонтейнеризация означает, что операционная система используется совместно контейнерами, а не клонируется для каждой машины. Например, Docker - это платформа виртуализации контейнеров, которую можно использовать как альтернативу решениям на базе гипервизора."
    },
    "37": {
        "question": "В чем разница между приемочным тестированием и функциональным тестированием?",
        "answer": "Функциональное тестирование - это проверочный тест, позволяющий определить, создали ли мы подходящий продукт. Соответствует ли программное обеспечение требованиям бизнеса? Функциональные тесты подтверждают, что программа работает так, как, по мнению разработчика, она должна работать.\n\nПриемочное тестирование - это деятельность по проверке того, что мы создали правильный продукт. Действительно ли это нужно клиенту? Тесты приемки подтверждают, что продукт может решить проблему, для которой он был разработан. Лучше всего это делать с помощью пользователя, например, выполняя задачи, в которых помогает программное обеспечение."
    },
    "38": {
        "question": "Что подразумевается под денормализацией?",
        "answer": "Денормализация - это техника, используемая для доступа к данным из более высоких к более низким формам базы данных. Она помогает администраторам баз данных повысить эффективность всей инфраструктуры за счет внедрения избыточных данных в таблицы. Она включает избыточные данные в таблицу путем интеграции запросов к базе данных, которые объединяют данные из нескольких таблиц в одну."
    },
    "39": {
        "question": "Что такое индекс?",
        "answer": "Индекс - это подход к настройке производительности и упрощению поиска записей в базе данных. Индекс создает запись для каждого значения. Следовательно, доступ к информации осуществляется быстрее."
    },
    "40": {
        "question": "Что такое оператор DISTINCT? Каково его применение?",
        "answer": "Этот запрос DISTINCT используется вместе с запросом SELECT, чтобы избавиться от дубликатов и вернуть только уникальные записи. Иногда вся таблица заполнена дубликатами записей. Предложение DISTINCT в SQL используется для удаления дублей в результатах выполнения оператора SELECT."
    },
    "41": {
        "question": "Что такое 'Trigger' в SQL?",
        "answer": "В SQL триггер - это особый тип хранимой процедуры, которая определяется для автоматического выполнения после модификации данных. Он позволяет выполнять ряд кодов всякий раз, когда выполняется обновление, вставка или другой запрос к определенной таблице."
    },
    "42": {
        "question": "В чем разница между естественным соединением и декартовым произведением?",
        "answer": "Декартово произведение создает декартово произведение двух таблиц. Естественное соединение основано на всех столбцах, которые имеют одинаковые имена и типы данных в обеих таблицах."
    },
    "43": {
        "question": "Что такое NULL?",
        "answer": "NULL - это специальный однозначный тип данных. Переменная с типом данных NULL является не имеющей значения переменной. Его можно назначить следующим образом: $var = NULL; или $var = null;"
    },
    "44": {
        "question": "Что такое уникальное ограничение?",
        "answer": "Уникальное ограничение (UNIQUE constraint)  не допускает появления одинаковых значений столбцов в нескольких записях. Уникальное ограничение гарантирует, что каждое значение в столбце является уникальным."
    },
    "45": {
        "question": "Что такое распаковка и упаковка?",
        "answer": "Упаковка (pickling) и распаковка (unpickling) - это процессы, связанные с сериализацией и десериализацией объектов в Python. Упаковка - это процесс преобразования объекта в поток байтов, а распаковка - это обратная операция, то есть преобразование потока байтов обратно в иерархию объектов. Упаковка позволяет хранить и передавать сложные объекты как единое целое, а распаковка позволяет преобразовать поток байтов обратно в исходную иерархию объектов."
    },
    "46": {
        "question": "Что такое black box тестирование базы данных?",
        "answer": "Черное тестирование (Black Box Testing) - это метод тестирования функций программного обеспечения, который не требует знания их внутренней структуры кода, деталей реализации или внутренних маршрутов. Оно фокусируется исключительно на вводе и выводе программных приложений. Оно полностью основано на спецификациях и требованиях к программному обеспечению. Другое его название - поведенческое тестирование."
    }
}