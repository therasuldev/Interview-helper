{
    "1": {
        "question": "Опишите процесс, который вы используете для выполнения задачи по программированию, от требований до поставки.",
        "answer": "Процесс разработки программного обеспечения или жизненного цикла является структурой, применяемой к разработке программного продукта. Существует несколько моделей для таких процессов (например, гибкий метод), каждая из которых описывает подходы к различным задачам или деятельностям, которые происходят во время процесса.\n\n1. Анализ требований. Извлечение требований к желаемому программному продукту является первой задачей при его создании. Хотя заказчики, вероятно, считают, что знают, что должно делать программное обеспечение, для распознавания неполных, неоднозначных или противоречивых требований может потребоваться опыт и навыки в области инженерии программного обеспечения.\n2. Спецификация. Спецификация - это задача точного описания программного обеспечения, которое будет написано, строго. На практике большинство успешных спецификаций написаны для понимания и настройки приложений, которые уже были хорошо разработаны, хотя критически важные для безопасности программные системы часто тщательно специфицируются перед разработкой приложения. Спецификации наиболее важны для внешних интерфейсов, которые должны оставаться стабильными.\n3. Архитектура программного обеспечения. Архитектура программной системы относится к абстрактному представлению этой системы. Архитектура связана с тем, чтобы убедиться, что программная система будет соответствовать требованиям продукта, а также гарантировать, что будущие требования могут быть учтены."
    },
    "2": {
        "question": "Какие языки программирования вы используете? Какие три вы предпочитаете или наиболее знакомы?",
        "answer": "Интервьюеры ожидают, что инженеры будут знакомы с несколькими языками. Они могут искать инженера, который имеет опыт работы с C++ и с Java, чтобы продемонстрировать, что кандидат обладает программными навыками для быстрого освоения нового языка. Python - это очень востребованный язык. Если вы претендуете на роль full-stack, то вам следует быть знакомым с JavaScript-фреймворками, такими как React и Node. (Вот руководство с 84 наиболее часто задаваемыми вопросами на собеседованиях на full-stack и лучшими способами ответить на них.)\n\nИметь некоторый опыт написания сценариев на Perl или Python также является большим плюсом."
    },
    "3": {
        "question": "Как вы реализуете обработку ошибок?",
        "answer": "Расскажите о написании тестов, обертывании кода для перехвата исключений, использовании инструкций try/catch и просмотре процесса разработки WOMM. Обязательно имейте продуманный ответ на этот вопрос."
    },
    "4": {
        "question": "Что такое жизненный цикл разработки программного обеспечения? В чем их различия?",
        "answer": "ЖЦРП или Жизненный Цикл Разработки Программного Обеспечения - это процесс, который создает программное обеспечение с наивысшим качеством и наименьшими затратами за кратчайшее время. ЖЦРП включает подробный план того, как разрабатывать, изменять, поддерживать и заменять программную систему.\n\nЖЦРП включает несколько различных этапов, включая планирование, проектирование, создание, тестирование и развертывание. Популярные модели ЖЦРП включают модель «водопада», модель «спираль» и модель Agile."
    },
    "5": {
        "question": "Каков ваш опыт работы в рамках процесса разработки программного обеспечения Agile, если таковой имеется?",
        "answer": "Гибкая методология разработки программного обеспечения относится к методологиям разработки программного обеспечения, сфокусированным на идее итеративной разработки, где требования и решения развиваются через сотрудничество между самоорганизующимися кросс-функциональными командами. Основная ценность в гибкой разработке заключается в том, что она позволяет командам доставлять"
    },
    "6": {
        "question": "Что такое адаптивный дизайн? В чем разница между фиксированными и жидкими макетами?",
        "answer": "1. Дизайн сайта с адаптивной версткой. Сайты, созданные с адаптивным дизайном, используют медиа-запросы для определения точек разрыва, которые масштабируют изображения, переносят текст и корректируют макет так, чтобы сайт мог 'уменьшиться', чтобы соответствовать любому размеру экрана, такому как разница между настольными компьютерами и мобильными устройствами.\n2. Дизайн сайта с жидкой версткой. Сайты, созданные с жидким дизайном, используют проценты как относительные показатели для ширины.\n3. Фиксированный дизайн. Сайты, созданные с использованием фиксированного дизайна, полагаются на фиксированные значения в пикселях. Хотя дизайн с фиксированными размерами иногда является самым быстрым способом начать работу, он обеспечит менее удобный опыт для пользователя на различных устройствах."
    },
    "7": {
        "question": "Каков ваш процесс тестирования и поиска ошибок в приложении?",
        "answer": "Тестирование программного обеспечения является всеобщим ожидаемым элементом разработки программного обеспечения. Вам необходимо создать наборы тестов и оценок, которые будут проводиться на различных этапах разработки. Фактически, тестирование должно проводиться на всех этапах разработки, включая после основного запуска. Ситуации меняются, платформы обновляются, и ошибки в мобильных приложениях, которые не были видны до обновления ОС, могут нанести ущерб.\n\nОбычно это означает рассмотрение приложения в целом и его компонентов, а затем установку приоритетов в любых областях, которые, по вашему мнению, более подвержены риску, чем другие. Затем проводятся тесты для подтверждения функциональности, и обнаруженные дефекты последовательно записываются. Эти дефекты затем могут быть распределены по приоритетам в зависимости от их влияния и серьезности."
    },
    "8": {
        "question": "Вопросы о алгоритмах и структурах данных",
        "answer": "Многие технические вопросы на собеседованиях по программной инженерии задают вам фундаментальные вопросы об алгоритмах и структурах данных, чтобы оценить ваш базовый уровень знаний по этим важным темам. Это кажется формальным процессом и чем-то, что призвано наказать тех, кто не получил формального образования в области компьютерных наук, так как большинство программных инженеров будут использовать библиотеки для абстрагирования эффективных реализаций этих структур данных и алгоритмов. Однако это важная часть процесса.\n\nВажно, чтобы вы понимали, как эти структуры данных и алгоритмы на самом деле работают, особенно учитывая, что это станет вопросом на собеседованиях, где вам придется на белой доске объяснять свое решение. Это означает решение проблемы на бумаге и ручкой вместо компьютера. Вот несколько примерных вопросов для практики."
    },
    "9": {
        "question": "Что такое стек? Какие две основные операции у стека?",
        "answer": "Стек - это линейная структура данных с тремя основными операциями: push (вставка элемента в стек сверху), pop (удаление последнего добавленного элемента из стека). Некоторые реализации стека также позволяют использовать peek, функцию, которая позволяет просматривать элемент в стеке без его изменения. Стеки используют структуру последнего вошедшего, первого вышедшего - поэтому последний добавленный элемент в стеке является первым элементом, который может быть удален. Очереди являются похожей структурой данных, которая работает с структурой первым вошел, первым вышел. Стеки обычно реализуются с использованием массива или связанного списка. Вас могут попросить реализовать стек на собеседовании и выполнить различные операции."
    },
    "10": {
        "question": "Используйте нотацию Big O для описания быстрой сортировки.",
        "answer": "Быстрая сортировка обычно лучше всего работает в средних случаях, но существуют и худшие сценарии. В среднем это O(N log N), но в худшем случае - O(N2). Вы захотите использовать быструю сортировку в ситуациях, где производительность в среднем случае имеет большое значение, а не зацикливаться на худшем. Вам нужно иметь глубокое и тонкое понимание алгоритмов и их производительности/реализации, чтобы дать ответ."
    },
    "11": {
        "question": "Как массив отличается от стека?",
        "answer": "У массива нет фиксированной структуры для добавления или извлечения данных, в то время как у стека есть строгий подход LIFO (последний вошел - первый вышел). Вопросы такого рода проверяют ваше понимание тонкостей структур данных и способность их запоминать."
    },
    "12": {
        "question": "Реализуйте кратчайший путь Дейкстры на языке программирования по вашему выбору.",
        "answer": "Алгоритм Дейкстры используется для нахождения кратчайшего пути между узлами с положительными весами ребер в графе. Это классический вопрос по алгоритмам, где собеседники проверяют ваше понимание того, как реализовать алгоритм, и вы часто видите их для более старших ролей разработчиков программного обеспечения. Дейкстра - это пример: есть и другие, такие как Беллмана-Форда, Флойда-Уоршелла. Вы захотите изучить различные алгоритмы и их реализации, и практиковать эти реализации различными способами."
    },
    "13": {
        "question": "В чем разница между блокирующими и неблокирующими вызовами и их связь с Node.js? Можете ли вы привести примеры каждого?",
        "answer": "Блокирующие вызовы - это те, при которых выполнение дополнительного JavaScript должно ждать, пока завершится или завершится операция не на JavaScript (например, ввод или вывод). Вы можете рассматривать это как синхронное действие. Неблокирующие вызовы могут выполняться асинхронно и, следовательно, имеют преимущество в производительности.\n\nЭто важно, потому что JavaScript является однопоточным, что означает, что он выполняет код в определенном порядке и каждая операция должна завершиться до перехода к следующей операции. В JavaScript есть только один стек вызовов и один куча памяти. Движок JavaScript может помочь обрабатывать асинхронный код в браузере.\n\nБольшинство методов ввода-вывода в Node.js предлагают синхронный и асинхронный методы. Примером принудительного синхронного чтения файла будет метод fs.readFileSync, а метод fs.readFile будет асинхронным."
    },
    "14": {
        "question": "Что такое веб-воркеры в HTML5, и почему они важны?",
        "answer": "Поскольку JavaScript работает в однопоточном режиме, выполнение параллельных операций затруднено и должно быть имитировано с помощью функций, таких как setTimeout и setInterval. Веб-воркеры в HTML5 помогают запускать фоновые скрипты в веб-приложении без блокировки изменений в пользовательском интерфейсе. По сути, веб-воркеры помогают имитировать многопоточность в JavaScript, позволяя одновременно выполняться нескольким скриптам."
    },
    "15": {
        "question": "Как вы организуете файлы CSS? Каковы их плюсы и минусы?",
        "answer": "Этот вопрос проверяет вашу организационную способность и знакомство с принципами фронтенд-разработки веб-приложений, особенно если речь идет о более фокусированных на фронтенде ролях.\n\nВот пример схемы файлов для CSS, которая имеет смысл:\n\n* reset.css: сброс и нормализация стилей; минимальные цветовые, граничные или шрифтовые декларации\n* typography.css: шрифты, насыщенность, высота строк, размеры и стили для заголовков и основного текста\n* layouts.css: стили, управляющие макетами страниц и сегментами, включая сетки\n* forms.css: стили для элементов управления формами и меток\n* lists.css: стили, специфические для списков\n* tables.css: стили, специфические для таблиц\n* carousel.css: стили, необходимые для компонентов карусели\n* accordion.css: стили для компонентов аккордеона."
    },
    "16": {
        "question": "Постройте одностраничное веб-приложение с несколькими разделами, используя любой фреймворк, с которым вы чувствуете себя наиболее комфортно.",
        "answer": "Собеседователи могут предпочесть React.js и React Router в 2020 году, но вы можете использовать что угодно. Цель этого тестирования - увидеть, как вы строите приложения, даже простые, и сможете ли вы их вообще создавать. Зачастую собеседователь будет наблюдать за вами в режиме парной разработки и будет следить за каждым шагом вашего рабочего процесса."
    },
    "17": {
        "question": "Что такое тестирование черного ящика? Что такое тестирование белого ящика?",
        "answer": "Тестирование программного обеспечения можно существенно классифицировать на две категории:\n\n* Тестирование черного ящика - это метод тестирования программного обеспечения, при котором внутренняя структура/дизайн/реализация тестируемого объекта неизвестна тестировщику.\n\n* Тестирование белого ящика - это метод тестирования программного обеспечения, при котором внутренняя структура/дизайн/реализация тестируемого объекта известна тестировщику."
    },
    "18": {
        "question": "Какие есть способы ускорения веб-сайтов? Назовите как можно больше различных техник.",
        "answer": "1. Реализуйте собственную сеть доставки контента (CDN).\n2. Используйте адаптивные изображения.\n3. Кэшируйте, кэшируйте, кэшируйте.\n4. Оцените ваши плагины.\n5. Объедините изображения в CSS-спрайты.\n6. Включите HTTP-заголовки keep-alive.\n7. Сжимайте ваш контент.\n8. Настройте заголовки expires.\n9. Минимизируйте JavaScript и CSS.\n10. Проверьте ваш пакет хостинга."
    },
    "19": {
        "question": "В чем разница между функциональными требованиями и нефункциональными требованиями?",
        "answer": "Функциональные требования - это функции, которые ожидается, что разработанное программное обеспечение будет выполнять. Например, добавление опции оплаты на веб-сайт электронной коммерции будет функциональным требованием. Нефункциональные требования оценивают удобство использования приложения, такие как внешний вид и ощущение пользовательского интерфейса, безопасность, производительность, взаимодействие, надежность и т. д."
    },
    "20": {
        "question": "Чем отличаются функциональные требования от нефункциональных требований?",
        "answer": "Функциональные требования - это особенности, которые ожидается, что разработанное программное обеспечение будет выполнять. Например, добавление опции оплаты на веб-сайт электронной коммерции будет функциональным требованием. Нефункциональные требования оценивают удобство использования приложения, такие как внешний вид и ощущение пользовательского интерфейса, безопасность, производительность, взаимодействие, надежность и т. д."
    },
    "21": {
        "question": "Почему бы вам выбрать подход на основе микросервисов вместо монолитного приложения?",
        "answer": "Если вы построили свое приложение как микросервис, это будет комбинацией различных служб, которые работают независимо и надежно, не завися друг от друга. Вы можете захотеть сделать это, если вы хотите приложение с несколькими точками отказа или более быстрым выполнением или эффективностью для каждого приложения. Вы должны быть готовы защищать ваше решение здесь и иметь точку зрения, основанную на проблемах масштабирования."
    },
    "22": {
        "question": "Расскажите о сложной проблеме в разработке программного обеспечения и о том, как вы ее решили.",
        "answer": "Дайте краткое описание. Предположите, что другой человек не знает никакой специализированной терминологии или отраслевых вызовов. Вы также можете спросить интервьюера о его знакомстве с темой, о которой вы собираетесь рассказать, и сформулировать свой ответ в зависимости от уровня контекста другого человека (более или менее технический ответ)."
    },
    "23": {
        "question": "У вас есть какие-либо личные проекты? Расскажите о них.",
        "answer": "Иногда трудно определиться с идеей для проекта. Если у вас такая проблема, начните с создания реплики другого приложения с другим технологическим стеком или чего-то подобного. Это заставит ваш мозг работать, и в конечном итоге вы придумаете что-то, что вам захочется сделать. Ключ не в том, чтобы придумать великолепную идею. Ключ заключается в том, чтобы начать что-то делать.\n\nПосле того как вы поработали над своей репликой некоторое время, вы можете заметить недостатки в приложении, которые можно исправить. Или вы можете понять, что больше не хотите делать эту реплику, и начнете что-то другое. Цель воспроизведения существующего приложения заключается не в том, чтобы действительно сделать реплику. Цель заключается в том, чтобы начать что-то делать, чтобы вы нашли то, что вам действительно хочется делать."
    },
    "24": {
        "question": "Объясните концепцию облачных вычислений моей старшей (не очень технически подкованной) матери.",
        "answer": "Простыми словами облачные вычисления означают хранение и доступ к данным и программам через Интернет, а не через жесткий диск вашего компьютера. Вместо того чтобы хранить данные на своем собственном устройстве, вы храните их на устройствах облачных сервис-провайдеров, таких как Google и Amazon."
    },
    "25": {
        "question": "Вы когда-нибудь не соглашались с вашим боссом или менеджером? Что вы сделали?",
        "answer": "Ваша цель - рассказать историю, где вы не согласились с вашим руководителем, и вы были правы в этом несогласии. Причина, по которой вы хотите быть правым, заключается в том, что ваш рассказ, идеально, должен показать вашу компетентность в вашей работе, что убедит нанимающего менеджера в том, что нанимать вас - хорошее решение. Этот ответ также может продемонстрировать другие важные навыки, такие как умение вести переговоры, продавать идеи и вдохновлять других."
    },
    "26": {
        "question": "Почему вы хотите работать в [название компании]? Использовали ли вы наши продукты?",
        "answer": "Как вы можете помочь компании добиться успеха? Изучите, что происходит с компанией и ее отраслью. В каком этапе роста находится бизнес? Изменил ли он недавно свои продукты или услуги? С какими конкурентными давлениями он сталкивается? Проанализируйте этот ландшафт и подумайте: \"Какие знания и опыт у меня есть, которые будут особенно полезны этому работодателю в этот период роста и/или изменений?\""
    },
    "27": {
        "question": "Когда вы считаете продукт законченным?",
        "answer": "Процесс разработки программного обеспечения - это никогда не прекращающийся цикл. Первый релиз программного приложения редко бывает \"завершенным\". Почти всегда есть дополнительные функции и исправления ошибок, которые ожидают проектирования, разработки и развертывания.\n\nОтчеты от программного обеспечения мониторинга ошибок об удобстве использования и обратной связи по ошибкам возвращаются в процесс разработки программного обеспечения и становятся новыми запросами на функции и улучшениями существующих функций."
    },
    "28": {
        "question": "Научите меня чему-нибудь в течение следующих 10 минут.",
        "answer": "Выберите простую тему или концепцию, которую легко объяснить и которую легко будет понять интервьюер. Заставьте ответ интересным, чтобы привлечь внимание интервьюера. Держите ответ в легкой форме. Помните, что контент не так важен, как способность общаться и преподавать."
    },
    "29": {
        "question": "За какими веб-технологиями вы следите с интересом и почему вы думаете, что они будут побеждать/выживать в следующем десятилетии?",
        "answer": "Выберите веб-технологию и опишите ее, а также причины (например, техническую и поддержку сообщества), по которым она может одержать победу над другими веб-технологиями. Этот вопрос пытается оценить вашу страсть к веб-разработке и следованию за новыми технологиями, а также вашу стратегическую видение будущего веб-разработки."
    },
    "30": {
        "question": "Вы вносите вклад в проекты с открытым исходным кодом? Вы выделяли проблемы?",
        "answer": "На этот вопрос вы захотите выразить свою страсть к экосистеме открытого исходного кода, как прокси для вашей страсти к программной инженерии и вашей способности проявлять инициативу в вкладе."
    },
    "31": {
        "question": "Какие ресурсы вы считаете лучшими для отслеживания новостей в области программной инженерии?",
        "answer": "Вам нужно будет подготовить список ресурсов, но, что более важно, вы должны быть довольно настойчивым в отношении реального следования за ресурсами в этой сфере. Это демонстрирует вашу способность учиться новому и вашу страсть к этому, что является важным качеством в области, которая постоянно развивается. Вот один ресурс Hackernoon, из которого вы можете учиться."
    }
}