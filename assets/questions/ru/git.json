{
    "1": {
        "question": "Что такое Git и GitHub?",
        "answer": "Git - это бесплатная система управления версиями с открытым исходным кодом, разработанная для быстрой и эффективной работы с проектами любого размера.\n\nGitHub использует Git для предоставления интернет-хостинга для управления версиями и разработки программного обеспечения. Он предлагает функциональность распределенного управления версиями и управления исходным кодом, которые находятся в Git, помимо других уникальных особенностей."
    },
    "2": {
        "question": "В чем разница между Git и GitHub?",
        "answer": "Git - это система контроля версий, используемая для управления историей исходного кода. GitHub, с другой стороны, это облачный хостинг-сервис, используемый для управления репозиториями Git. GitHub предназначен для улучшения управления открытыми проектами."
    },
    "3": {
        "question": "Что такое репозиторий Git? Назовите несколько популярных сервисов хостинга Git.",
        "answer": "Репозитории содержат пакет файлов, являющихся разными версиями проекта. Эти файлы импортируются из репозиториев на локальные серверы пользователей для дальнейших модификаций и обновлений содержимого.\n\nНесколько популярных сервисов хостинга Git:\n* GitHub\n* GitLab\n* Bitbucket\n* SourceForge"
    },
    "4": {
        "question": "Что такое система контроля версий? Укажите ее типы.",
        "answer": "Система контроля версий (VCS) - это программный инструмент, используемый для создания различных версий проекта и их хранения в репозитории. Все модификации кода записываются и отслеживаются с помощью VCS.\n\nТипы систем контроля версий:\n\n* Локальные системы контроля версий имеют базу данных, которая поддерживает все изменения файлов на диске под контролем версий в специальном формате.\n* Централизованные системы контроля версий содержат один репозиторий, и каждый пользователь получает свою собственную рабочую копию.\n* Распределенные системы контроля версий содержат несколько репозиториев, каждый из которых доступен отдельным пользователям со своей собственной рабочей копией."
    },
    "5": {
        "question": "Каковы преимущества использования GIT?",
        "answer": "Вот некоторые из самых важных преимуществ Git:\n* Возможно избыточное хранение данных и репликация данных\n* Это высокодоступная услуга\n* Для одного репозитория мы можем иметь только один каталог Git\n* Сетевая производительность и использование диска отличные\n* Очень легко сотрудничать над любым проектом\n* Мы можем работать над любым проектом в рамках Git"
    },
    "6": {
        "question": "На каком языке написан GIT?",
        "answer": "GIT написан на языке программирования C, что обеспечивает снижение накладных расходов."
    },
    "7": {
        "question": "Каковы преимущества Git по сравнению с SVN?",
        "answer": "Поскольку Git является системой управления версиями с открытым исходным кодом, он позволяет нам запускать несколько версий нашего проекта, таким образом отображая изменения, вносимые в код со временем, и, при необходимости, мы можем отслеживать сделанные нами изменения. Это означает, что большое количество разработчиков может вносить свои изменения и загружать эти изменения, так что изменения могут быть приписаны конкретным разработчикам."
    },
    "8": {
        "question": "Что такое Git Bash?",
        "answer": "Git Bash - это приложение, которое устанавливает Bash, Git и несколько утилит Bash, обычно используемых в операционной системе Windows. В Git Bash возможно взаимодействие с элементами Git и репозиторием через различные команды."
    },
    "9": {
        "question": "Что означает «Index» или «Staging Area» в GIT?",
        "answer": "Когда мы делаем коммиты, мы можем вносить изменения, форматировать их и просматривать в промежуточной области, известной как «Staging Area» или «Index»."
    },
    "10": {
        "question": "Что такое тегирование в Git?",
        "answer": "Тегирование позволяет разработчикам отмечать все важные контрольные точки в ходе прогресса их проектов. Вместо идентификаторов коммитов можно использовать имена тегов при проверке коммитов и их отправке в удаленный репозиторий."
    },
    "11": {
        "question": "Что такое форк в Git?",
        "answer": "Копия репозитория называется форком. Таким образом, форкинг позволяет экспериментировать с изменениями, не беспокоясь о оригинальном проекте. Этот процесс идеален для предложения изменений в чужие проекты."
    },
    "12": {
        "question": "Для чего используется Git clone?",
        "answer": "Команда Git clone позволяет скопировать существующий Git репозиторий. Если мы хотим получить копию центрального репозитория, то лучший способ сделать это - использовать 'клонирование'."
    },
    "13": {
        "question": "Какова функция 'git config'?",
        "answer": "Команда 'git config' - отличный способ настроить наши параметры для установки Git. С помощью этой команды мы можем определить поведение репозитория, предпочтения и информацию о пользователе."
    },
    "14": {
        "question": "Каков процесс создания репозитория в Git?",
        "answer": "Если мы хотим создать репозиторий в Git, то нам нужно выполнить команду 'git init'. С помощью этой команды .git репозиторий, мы можем создать каталог в каталоге проекта."
    },
    "15": {
        "question": "Что такое cherry-pick в Git?",
        "answer": "Git cherry-pick - это команда, которая позволяет выбирать произвольные коммиты Git по ссылке и добавлять их к HEAD. Cherry-picking - это процесс выбора коммита из одной ветки и его применения к другой. Это помогает отменять изменения."
    },
    "16": {
        "question": "Что такое origin в Git?",
        "answer": "Origin относится к удаленному репозиторию, из которого изначально был клонирован проект, и используется вместо URL оригинального репозитория. Это позволяет упростить ссылку."
    },
    "17": {
        "question": "Что делает команда git push?",
        "answer": "Команда git push используется для загрузки содержимого в удаленный репозиторий из локального репозитория. Push может перезаписать изменения, поэтому ее следует использовать с осторожностью."
    },
    "18": {
        "question": "Что делает команда git pull?",
        "answer": "Команда git pull используется для получения и загрузки содержимого из удаленного репозитория и интеграции его с локальным репозиторием."
    },
    "19": {
        "question": "В чем разница между git fetch и git pull?",
        "answer": "Git fetch получает новые данные из удаленного репозитория, но не интегрирует их в наши рабочие файлы. Это помогает проверить, произошли ли какие-либо изменения в удаленном репозитории. Этот процесс ничего не изменяет и не уничтожает.\n\nGit pull, с другой стороны, обновляет HEAD последними изменениями с удаленного сервера и напрямую интегрирует их в рабочие файлы. Использование git pull может привести к конфликту слияния, поскольку оно пытается слить удаленные изменения с локальными."
    },
    "20": {
        "question": "Объясните git checkout в Git.",
        "answer": "Git checkout позволяет переключать HEAD. Эту команду также можно использовать для восстановления исторических версий файлов. Команда действует на файлы, коммиты и ветки."
    },
    "21": {
        "question": "Что делает git rebase?",
        "answer": "Rebase - это повторное применение коммитов поверх другого базового трипа. Последовательность коммитов применяется из различных веток к последнему коммиту. Это линейный процесс слияния и альтернатива команде git merge. Rebase создает впечатление, что вы создали ветку из другого коммита."
    },
    "22": {
        "question": "В чем разница между git rebase и git merge?",
        "answer": "В git rebase ветка функционала переносится в мастер. Git merge сохраняет историю, добавляя новый коммит."
    },
    "23": {
        "question": "Что такое revert в Git?",
        "answer": "Команда git revert - это операция отмены, движущаяся вперед. Это безопасный способ отменить изменения, так как она создает новый коммит, который обращает изменения, вместо удаления или оставления коммитов в истории коммитов."
    },
    "24": {
        "question": "В чем разница между сбросом (resetting) и возвратом (reverting)?",
        "answer": "Пока git reset изменяет состояние ветки на предыдущее, удаляя все состояния после желаемого коммита, git revert делает это через создание новых отменяющих коммитов и сохранение оригинала в неизменном виде."
    },
    "25": {
        "question": "В чем разница между 'git remote' и 'git clone'?",
        "answer": "Git remote добавляет ссылку на удаленный репозиторий для дальнейшего отслеживания. Git clone, как следует из названия, клонирует существующий удаленный репозиторий и создает новый."
    },
    "26": {
        "question": "Что такое GIT stash?",
        "answer": "Git stash сохраняет текущее состояние рабочего каталога и индекса, чтобы позже поместить его на стек, так что мы получаем чистый рабочий каталог. Это означает, что если мы находимся в середине какой-то задачи и хотим получить чистый рабочий каталог и одновременно хотим сохранить все наши текущие правки, то мы можем использовать Git stash."
    },
    "28": {
        "question": "В чем разница между git reflog и log?",
        "answer": "Git log является публичной записью истории коммитов для ветки. Reflog, с другой стороны, является частной записью локальных коммитов репозитория.\n\nВ отличие от reflog, git log является частью Git репозитория и реплицируется после выполнения push, fetch или pull. Разработчик не может получить доступ к reflog локального репозитория без доступа к компьютеру, на котором он находится."
    },
    "29": {
        "question": "Что такое GIT stash drop?",
        "answer": "Когда мы закончили работать с сохраненным элементом или хотим удалить список, мы можем использовать Git stash drop. Это гарантирует, что последний добавленный элемент по умолчанию или любой конкретный элемент может быть удален из аргумента."
    },
    "30": {
        "question": "Как определить, была ли определенная ветка слияна с master?",
        "answer": "Git branch –merged master – показывает все ветки, которые были слияны с master\n\nGit branch –merged – показывает все ветки, которые были слияны с текущей веткой\n\nGit branch –no-merged – показывает все ветки, которые не были слияны"
    },
    "31": {
        "question": "Зачем нам нужны ветвления в GIT?",
        "answer": "С помощью ветвления мы можем иметь свою собственную ветку и можем переключаться между различными ветками. Мы можем вернуться к нашей предыдущей работе, при этом сохраняя нашу последнюю работу в неизменном виде."
    },
    "32": {
        "question": "Что содержится в объекте коммита?",
        "answer": "* состояние проекта в данный момент времени содержится в наборе файлов\n* Ссылки на родительские объекты коммитов\n* 40-символьная строка, уникально идентифицирующая объект коммита, называемая SHA1-именем"
    },
    "33": {
        "question": "Что такое HEAD в Git и сколько HEAD может быть создано в репозитории?",
        "answer": "Ссылка на объект коммита называется HEAD. В каждом репозитории есть ‘Master’, который является по умолчанию HEAD. В репозитории может быть создано несколько HEAD."
    },
    "34": {
        "question": "Каков обычный способ создания веток в GIT?",
        "answer": "Лучший способ создать ветку в GIT - иметь одну основную ветку (‘main’) и затем создать другую ветку для внесения изменений, которые мы хотим сделать. Это чрезвычайно полезно, когда над одним проектом работает большое количество разработчиков."
    },
    "35": {
        "question": "Назовите способ создания новой ветки в Git.",
        "answer": "Если мы хотим внести новую функциональность в основную ветку, то мы можем использовать команду ‘git merge’ или ‘git pull’."
    },
    "36": {
        "question": "Как определяется ‘конфликт’ в git?",
        "answer": "Если мы хотим сделать слияние коммита и есть изменение в одном месте, а такое же изменение уже существует, то при слиянии Git не сможет предсказать, какое изменение должно быть принято в приоритет."
    },
    "37": {
        "question": "Как разрешить конфликт в Git?",
        "answer": "Если мы хотим разрешить конфликт в Git, то нам нужно отредактировать файлы для исправления конфликтующих изменений, а затем мы можем использовать команду “git add” для добавления разрешенных файлов, после чего можно выполнить ‘git commit’ для коммита исправленного слияния."
    }
}