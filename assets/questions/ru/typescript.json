{
    "1": {
        "question": "Что такое TypeScript?",
        "answer": "TypeScript - это надмножество JavaScript, которое явно типизировано и может быть передано компилятору, который произведет обычный JavaScript.\n\nTypeScript предоставляет способ работы с JavaScript в чисто объектно-ориентированной среде. Здесь вы можете использовать классы и интерфейсы. Кроме того, он статически типизирован, как C# или Java. Для использования вам понадобится компилятор TypeScript для компиляции и генерации вашего кода в файл JavaScript.\n\nФайл TypeScript имеет расширение .ts и затем компилируется в файл JavaScript компилятором TypeScript. Вы можете писать TypeScript с помощью различных редакторов, таких как VS Code, Sublime и т. д."
    },
    "2": {
        "question": "В чем разница между TypeScript и JavaScript?",
        "answer": "** TypeScript **\n\n1. Объектно-ориентированный\n2. Статически типизированный\n3. Поддерживает модули\n4. Поддерживает функцию с необязательными параметрами\n\n** JavaScript **\n\n1. Сценарный\n2. Не статически типизированный\n3. Не поддерживает модули\n4. Не поддерживает функцию с необязательными параметрами"
    },
    "3": {
        "question": "Зачем использовать TypeScript?",
        "answer": "Причины, по которым многие разработчики используют TypeScript вместо обычного JavaScript, обусловлены основными различиями, о которых мы упомянули.\n\nОдним из самых больших преимуществ использования TypeScript является возможность использовать средства IDE для проверки кода по мере его набора. Для больших JavaScript-проектов это может привести к более безопасному коду, особенно если имеются опасения относительно конфиденциальности и безопасности вашей платформы веб-хостинга."
    },
    "4": {
        "question": "Каковы компоненты TypeScript?",
        "answer": "TypeScript имеет три уровня. Как правило, установленный язык включает в себя:\n\n1. Сам язык, который обычно работает через среду IDE.\n2. Компилятор, который переводит TypeScript в обычный код JavaScript.\n3. Служба языка, которая обеспечивает операции редактора в существующем коде TypeScript."
    },
    "5": {
        "question": "Что такое типы в TypeScript?",
        "answer": "Теперь мы перейдем к более техническим вопросам. Типы в TypeScript - это типы значений, которые мы используем в наших программах. Он поддерживает множество различных типов значений, таких как числа, строки и логические значения, а также дополнительные типы, такие как enum, any, never.\n\nСуществует несколько хороших причин явно объявлять типы в TypeScript. Типы повышают качество и понимаемость кода и могут помочь вашему компилятору обнаруживать ошибки, происходящие из неправильного присвоения типов. Кроме того, типы действуют как дополнительный уровень документации, который может помочь в работе в совместной среде.\n\nЧтобы явно объявить тип, вы можете добавить «:» к имени переменной, а затем указать тип:\n\nlet decimal: number = 6;\n\nlet color: string = “blue”;"
    },
    "6": {
        "question": "Что такое утверждения типов в TypeScript?",
        "answer": "TypeScript также имеет функцию, известную как «Утверждение типа». Это работает так же, как типовое преобразование в других объектно-ориентированных языках: оно используется исключительно компилятором и не оказывает воздействия на выполнение программы. Однако использование утверждений типа не проверит ваш код.\n\nЭто синтаксис для утверждений типа:\n\nlet strlength: number = (someString).length;"
    },
    "7": {
        "question": "Какие специальные типы данных есть в TypeScript",
        "answer": "* Any\n\n* Void\n\n* Never"
    },
    "8": {
        "question": "Какие области видимости существуют в TypeScript?",
        "answer": "Существует три области видимости в отношении переменных:\n\n* Локальная\n\n* Функция\n\n* Глобальная\n\nМы создаем функции и глобальные переменные, используя var, в то время как const и let могут использоваться как в том, так и в другом случае."
    },
    "9": {
        "question": "Что такое интерфейсы в TypeScript?",
        "answer": "Интерфейс TypeScript - это специальная сущность, которая помогает нам создавать объекты с некоторыми свойствами? Давайте продолжим и создадим один. Например, мы можем начать, набрав слово Interface, которое является зарезервированным словом в TypeScript для создания интерфейса TypeScript."
    },
    "10": {
        "question": "Что такое перечисления в TypeScript?",
        "answer": "Это один из немногих типов TypeScript, который не является расширением типа JavaScript на уровне. Он позволяет нам определять набор именованных констант. TypeScript предоставляет как строковые, так и числовые перечисления."
    },
    "11": {
        "question": "Каковы различные особенности TypeScript?",
        "answer": "Особенности следующие:\n\n* Это просто JavaScript.\n* Он поддерживает другие библиотеки JS\n* Он портативен"
    },
    "12": {
        "question": "Поддерживает ли TypeScript перегрузку методов/функций?",
        "answer": "Да, TypeScript поддерживает перегрузку функций. У нескольких функций может быть одно и то же имя и количество параметров, но тип возвращаемого значения и типы параметров должны быть разными. TypeScript не поддерживает перегрузку, где функции имеют одно и то же имя, типы и разное количество параметров."
    },
    "13": {
        "question": "Что такое ключевое слово TypeScript declare?",
        "answer": "Ключевое слово TypeScript declare информирует компилятор о том, что данное свойство существует во внешнем коде, поэтому его не следует трансформировать в выходные данные JavaScript."
    },
    "14": {
        "question": "В чем разница между интерфейсом и оператором типа?",
        "answer": "Объявление типа псевдонима вводит имя для любого типа, такого как объединение, кортежи и примитивы. Однако именованные объектные типы всегда вводятся с помощью интерфейсов."
    },
    "15": {
        "question": "Что такое файл карты TypeScript?",
        "answer": "Файл карты TypeScript переводит скомпилированный JavaScript из человекочитаемого формата обратно в читаемый формат TypeScript. Это очень удобно, когда необходимо выполнять отладку во время производства, поскольку будет использоваться исходная карта."
    },
    "16": {
        "question": "Что такое синтаксис «as» в TypeScript?",
        "answer": "Синтаксис «as» в TypeScript также является формой утверждения типа, как описано выше. Он полезен, потому что обычный синтаксис TypeScript, использующий переменную <type>, конфликтует с JSX. Поэтому при работе с TypeScript и JSX следует использовать только этот синтаксис."
    },
    "17": {
        "question": "Что такое контекст компилятора в TypeScript?",
        "answer": "Когда код TypeScript компилируется, ваш компилятор просматривает группу файлов и анализирует их, чтобы выяснить, какой код действителен, а какой нет. TypeScript также предоставляет вам возможность настраивать параметры компилятора, и это делается с помощью файла tsconfig.json."
    },
    "18": {
        "question": "Какие модификаторы доступа существуют в TypeScript?",
        "answer": "TypeScript также использует несколько модификаторов доступа при работе с членами классов. Поддерживаемые модификаторы - это public, private и protected.\n\nОни работают следующим образом:\n\n* Public указывает, что все члены класса, его дочерние классы и экземпляр класса могут получить к нему доступ.\n\n* Private означает, что только члены класса могут получить доступ к другим членам.\n\n* Protected указывает, что все члены класса и его дочерние классы могут получить доступ, но что экземпляр класса не может получить доступ.\n\nЕсли вы не определяете модификаторы доступа для определенного члена класса, он считается public. Это может вызвать проблемы при процессах соответствия, поэтому следует явно определять доступ везде, где это возможно.\n\nТакже стоит отметить, что модификаторы класса совершенно не имеют эффекта после того, как ваш код TypeScript был скомпилирован. Результирующий JS, который создает компилятор, игнорирует эти модификаторы."
    },
    "19": {
        "question": "Что такое контекстная типизация в TypeScript?",
        "answer": "Контекстная типизация - это крайне полезная функция TypeScript, в которой язык может автоматически определить тип конкретной переменной из типов переменных, которые ее создали в уравнении.\n\nНапример, если вы определите функцию на переменной, явно определенной как число, и эта функция записывает свой результат в другую переменную, TypeScript назначит этот же тип этой второй переменной. Это экономит разработчикам много времени, потому что вам не нужно явно определять типы в результатах функций."
    },
    "20": {
        "question": "Объясните относительные и неполные импорты в TypeScript.",
        "answer": "TypeScript поддерживает два типа импорта: относительные и неполные.\n\nОтносительные импорты разрешаются относительно местоположения импортирующего файла и могут быть хорошим способом сокращения объема кода, который вам нужно набирать. С другой стороны, относительные импорты следует использовать только для модулей, о которых вы уверены, что они останутся на своем месте."
    },
    "21": {
        "question": "Что такое директивы тройных слешей в TypeScript?",
        "answer": "Директивы тройных слешей - это по сути комментарии в TypeScript, но они также содержат инструкции для вашего компилятора. Они состоят из одиночных XML-тегов.\n\nДирективы тройных слешей работают только в том случае, если они находятся в начале файла. Вы можете поместить комментарии перед ними, включая другие директивы тройных слешей, но если они следуют за каким-либо другим типом оператора или объявления, ваш компилятор рассматривает их как стандартные комментарии и игнорирует их.\n\nДирективы тройных слешей предоставляют несколько полезных функций:\n\n* Одной из самых важных является директива /// <reference path=”some/reference/path” />. Добавление этой директивы в начало вашего кода TypeScript служит индикатором вашему компилятору, что существуют зависимости между файлами. Ваш компилятор затем включит эти дополнительные файлы в процесс компиляции.\n\n* Вы также можете использовать директивы тройных слешей для объявления зависимости от пакета. Это делается с помощью /// <reference types=”…” />.\n\nВо время тестирования вы также можете указать вашему компилятору игнорировать директивы тройных слешей, используя флаг компилятора –noResolve. Если он указан, компилятор проигнорирует все ваши директивы тройных слешей и не будет импортировать другие файлы."
    },
    "22": {
        "question": "Можно ли использовать JSX в TypeScript?",
        "answer": "Ответ - да, но вам нужно сохранить ваш файл TypeScript с расширением .tsx.\n\nОднако есть несколько важных моментов, которые следует учитывать при работе с JSX и TypeScript. Как встраиваемый синтаксис, похожий на XML, JSX должен быть скомпилирован в допустимый JS. Это добавляет еще один этап компиляции к вашему коду, что может отразиться на производительности.\n\nС другой стороны, TypeScript предлагает некоторые мощные функции для работы с JSX: он поддерживает встраивание, проверку типов и может компилировать JSX прямо в JS."
    },
    "23": {
        "question": "Какие режимы JSX поддерживает TypeScript?",
        "answer": "По умолчанию TypeScript поставляется с тремя режимами JSX: сохраненный, react и react-native.\n\nЭти режимы используются для настройки вывода JSX вашего кода. Режим сохранения предназначен для сохранения вывода JSX в вашем скомпилированном коде, чтобы его можно было напрямую использовать другим компилятором.\n\nПри использовании этого режима компилятор генерирует файл с расширением .jsx, чтобы его можно было дополнительно преобразовать перед использованием. Режим react-native делает то же самое, но с расширением .js.\n\nРежим react работает немного иначе. Он исключает модификатор React.createElement и, следовательно, не содержит исходного JSX-кода в выводе. Файл вывода при использовании этого режима будет иметь расширение .js."
    },
    "24": {
        "question": "Что такое необязательная статическая типизация в TypeScript?",
        "answer": "По умолчанию TypeScript статически типизирован. Это одно из его преимуществ, потому что ваш компилятор автоматически проверяет ваши типы данных во время процесса компиляции. Однако также есть возможность отключить эту функцию и заставить ваш компилятор игнорировать тип определенной переменной.\n\nЭто делается с использованием типа данных any. Ваш компилятор не будет проверять переменные, явно объявленные как этот тип данных, и поэтому не будет генерировать никаких ошибок во время выполнения."
    },
    "25": {
        "question": "Что такое модули в TypeScript?",
        "answer": "Модуль - это способ группировки сущностей. Модули могут состоять из любой комбинации сущностей, таких как переменные, интерфейсы, классы и т. д.\n\nПолезной особенностью модулей является то, что сущности, содержащиеся в них, недоступны извне модуля. Вы можете выполнять каждый модуль только в его области видимости и не из глобальной области видимости. Это обеспечивает способ блокировки доступа к важным переменным и функциям.\n\nМодуль создается с использованием команды export и может использоваться в других модулях с помощью команды import."
    },
    "26": {
        "question": "Какие различия между внутренними модулями и внешними модулями в TypeScript?",
        "answer": "TypeScript определяет два типа модулей: внутренний модуль и внешний модуль. Здесь номенклатура немного запутана, потому что терминология модулей изменилась в последней версии TypeScript. В этой последней версии «внешние» модули просто называются «модулями», но в предыдущих версиях использовался тот же термин для внутренних модулей.\n\n** Внутренний модуль **\n1. Внутренние модули предназначены для логической группировки функций, классов, интерфейсов и переменных в единую единицу. Вы можете экспортировать внутренний модуль в другой модуль\n2. Для глобальных, а также внешних модулей, внутренние модули остаются их локальными или внешними членами.\n3. Для объявления внутренних модулей используются ModuleDeclarations, которые включают в себя их имя и тело.\n\n** Внешний модуль **\n\n1. Внешние модули скрывают внутренние операторы определений модулей. Они отображают методы и параметры, связанные с объявленной переменной.\n2. Внешние модули загружаются как отдельное тело кода. Они обращаются по имени.\n3. Внешний модуль определяется путем написания независимого исходного файла с минимум одним импортом или экспортом."
    },
    "27": {
        "question": "Что такое декораторы в TypeScript?",
        "answer": "В этих последних вопросах мы рассмотрим некоторые более необычные функции TypeScript. Вас часто будут спрашивать об этих функциях на собеседованиях, потому что знание их доказывает, что вы использовали их обширно.\n\nПервая из этих функций - «Декораторы». Декоратор - это особый тип объявления, используемый для добавления аннотаций и метаданных к существующему коду. Они функционируют в декларативном стиле. Для использования их вам нужно включить функцию компилятора experimentalDecorators."
    },
    "28": {
        "question": "Что такое миксины в TypeScript?",
        "answer": "Миксины - это способ построения сложных классов путем объединения нескольких более простых частичных классов. Хотя не многие курсы по основам TypeScript их охватывают, они являются важной частью.\n\nПример миксина таков: вместо того чтобы определенный класс A расширял класс B для получения дополнительной функциональности, функция B вызывает класс A, а затем создает новый класс с этой добавленной функциональностью. В этом примере функция B называется миксином."
    },
    "29": {
        "question": "Как отлаживать файл TypeScript?",
        "answer": "Для отладки вам нужно скомпилировать его вместе с .js файлом карты исходного кода. TypeScript предоставляет возможность сделать это одной командой, которая сгенерирует как ваш файл .js, так и файл .js.map.\n\n$ tsc -sourcemap file1.ts\n\nЕсли вы откроете файл .js, вы увидите, что последняя строка ссылается на файл карты исходного кода с относительной ссылкой. Эти два файла должны находиться в одном месте - относительно друг друга - или вы можете изменить эту ссылку, если хотите разделить их."
    },
    "30": {
        "question": "Что такое Менеджер Определений TypeScript?",
        "answer": "Менеджер Определений TypeScript (TSD) - это менеджер пакетов для TypeScript. Он используется для поиска и установки файлов определений TypeScript из репозитория с открытым исходным кодом DefinitelyTyped.\n\nTSD крайне полезен, потому что он позволяет использовать файлы определений типов непосредственно в вашем коде TypeScript. Например, если вы хотите включить некоторый код jQuery в ваш файл .ts, используя:\n\n$(document).ready(function() { //Your jQuery code });\n\nВаш компилятор скажет вам, что он не может найти имя “$”. Это потому, что это тип, принадлежащий jQuery. Вы можете использовать TSD для поиска и загрузки файла определения типа jQuery, а затем включить его в ваш файл .ts, и тогда ваш компилятор будет иметь все необходимое."
    },
    "31": {
        "question": "Что такое амбиенты в TypeScript?",
        "answer": "Амбиентные объявления в вашем коде TypeScript сообщают вашему компилятору о исходном коде, который хранится в другом месте. Они обычно используются для интеграции других библиотек js в TypeScript, таких как jQuery, AngularJS и nodejs.\n\nОбычно амбиентные объявления хранятся в файле объявления типа с расширением d.ts."
    },
    "32": {
        "question": "Что такое анонимные функции в TypeScript?",
        "answer": "Анонимные функции в TypeScript - это функции, которые объявлены, но не имеют идентификатора. Этот тип функции может получать входные данные и возвращать выходные данные, так же, как обычная функция, но обычно она не доступна пользователю после создания."
    },
    "33": {
        "question": "Что такое слияние объявлений в TypeScript?",
        "answer": "Иногда обычный JavaScript, который компилирует TypeScript, будет содержать несколько объявлений с одним и тем же именем. Ваш компилятор TypeScript объединит (или сольет) эти отдельные объявления в одно определение, чтобы улучшить производительность вашего кода. Это объединенное определение наследует функции исходных определений, из которых оно было скомпилировано."
    },
    "34": {
        "question": "Как выполнить переопределение метода в TypeScript?",
        "answer": "Дочерние классы могут наследовать методы своего родительского класса. Это известно как переопределение метода и может быть полезно для быстрого предоставления нескольким дочерним классам одних и тех же методов.\n\nОднако для выполнения переопределения метода есть несколько соображений:\n\n* Метод должен иметь идентичное имя, как у родительского класса\n\n* Метод должен иметь те же параметры, что и у родительского класса\n\n* Должно существовать отношение IS-A между дочерним и родительским классами"
    },
    "35": {
        "question": "Что такое лямбда-стрелочная функция в TypeScript?",
        "answer": "Версии TypeScript, скомпилированные в стандарты ES6, имеют упрощенный способ определения анонимной функции (см. выше). Они называются лямбда-функциями или стрелочными функциями по синтаксису, используемому в них. Это в основном функции без имени, которые игнорируют ключевое слово function."
    },
    "36": {
        "question": "Что такое параметр Rest в TypeScript?",
        "answer": "TypeScript также содержит параметр Rest, специальный параметр, который позволяет передавать значения в функцию. Этот параметр вызывается с использованием многоточия (...) перед параметром, с которым вы работаете. Это позволяет функциям работать с переменным количеством аргументов, что крайне полезно, если у вас есть неизвестное количество параметров, которые вы хотите передать в определенную функцию.\n\nЕсть несколько соображений при работе с параметром Rest:\n\n* Один параметр Rest может быть использован на функцию\n\n* Он должен быть явно объявлен как тип массива\n\n* Он должен быть последним параметром в списке параметров"
    }
}