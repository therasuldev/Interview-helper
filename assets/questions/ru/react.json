{
    "1": {
        "question": "Что такое React?",
        "answer": "React - это декларативная, эффективная, гибкая библиотека JavaScript с открытым исходным кодом, разработанная Facebook в 2011 году. Она следует компонентно-ориентированному подходу к созданию многоразовых компонентов пользовательского интерфейса, особенно для одностраничных приложений. Она используется для разработки интерактивного слоя представления веб- и мобильных приложений. Создатель - Джордан Уолк, инженер-программист в Facebook. Изначально она была развернута на разделе Новостная лента Facebook в 2011 году, а затем использовалась в таких продуктах, как WhatsApp и Instagram."
    },
    "2": {
        "question": "Каковы особенности React?",
        "answer": "Фреймворк React быстро набирает популярность среди веб-разработчиков. Основные особенности React следующие:\n\n * JSX\nКомпоненты\n\n * Одностороннее связывание данных\n\n * Виртуальный DOM\n\n * Простота\n\n * Производительность"
    },
    "3": {
        "question": "Каковы наиболее важные преимущества использования React?",
        "answer": "Вот список наиболее важных преимуществ использования React:\n\n * React легок в изучении и использовании *\n\nReact поставляется с хорошей доступностью документации, учебных материалов и ресурсов обучения. Любой разработчик может легко переключиться с фона JavaScript на React и легко понять и начать создавать веб-приложения с использованием React. Любой человек с небольшим знанием JavaScript может начать создавать веб-приложения с использованием React.\n\n * React следует архитектуре MVC. *\n\nReact является частью V (часть представления) в модели архитектуры MVC (Модель-Представление-Контроллер) и называется «одним из фреймворков JavaScript». Он не является полноценным, но имеет множество преимуществ открытой библиотеки пользовательского интерфейса (UI), которая помогает выполнить задачу более качественно.\n\n * React использует виртуальный DOM для повышения эффективности. * React использует виртуальный DOM для отрисовки представления. Виртуальный DOM - это виртуальное представление реального DOM. Каждый раз, когда данные изменяются в приложении React, создается новое виртуальное DOM. Создание виртуального DOM намного быстрее, чем отрисовка пользовательского интерфейса в браузере. Следовательно, с использованием виртуального DOM повышается эффективность приложения. Поэтому React обеспечивает отличную производительность.\n\n * Создание динамических веб-приложений легко. *\n\nВ React создание динамических веб-приложений намного проще. Это требует меньше кодирования и обеспечивает больше функциональности. Он использует JSX (JavaScript Extension), который представляет собой особый синтаксис, позволяющий использовать кавычки HTML и синтаксис тегов HTML для отображения определенных подкомпонентов.\n\n * React дружелюбен к SEO. *\n\nReact облегчает разработчику создание привлекательного пользовательского интерфейса, который легко находится в различных поисковых системах. Он также позволяет рендеринг на стороне сервера, что также полезно для улучшения SEO вашего приложения.\n\n * React позволяет создавать многоразовые компоненты. *\n\nВеб-приложения React состоят из нескольких компонентов, где каждый компонент имеет свою логику и управление. Эти компоненты предоставляют небольшой, многоразовый фрагмент HTML-кода в качестве выходных данных, который можно повторно использовать там, где он вам нужен. Повторное использование кода компонентов помогает разработчикам сделать свои приложения легче разрабатывать и поддерживать. Он также облегчает вложение компонентов и позволяет разработчикам создавать сложные приложения из простых строительных блоков. Повторное использование компонентов также увеличивает скорость разработки.\n\n * Поддержка удобных инструментов *\n\nReact предоставляет множество удобных инструментов, которые могут сделать задачу разработчиков понятной и проще. Используйте эти инструменты в расширениях для разработчиков Chrome и Firefox, позволяющих нам проверять иерархии компонентов React в виртуальном DOM. Он также позволяет выбирать конкретные компоненты и проверять и редактировать их текущие свойства и состояние.\n\n * React имеет богатый набор библиотек. * \n\nReact имеет огромную экосистему библиотек и предоставляет вам свободу выбора инструментов, библиотек и архитектуры для разработки лучшего приложения на основе ваших требований.\n\n * Возможность тестирования кода *\n\nВеб-приложения React легко тестировать. Эти приложения предоставляют область, где разработчик может тестировать и отлаживать свой код с помощью встроенных инструментов."
    },
    "4": {
        "question": "Каковы основные ограничения React?",
        "answer": "Вот список основных ограничений React:\n\n * React - всего лишь библиотека. Это не полноценный фреймворк.\n\n * У него есть огромная библиотека, которую требуется время, чтобы понять.\n\n * Новым программистам может быть сложно понять и писать код.\n\n * React использует встроенные шаблоны и JSX, что может быть сложным и выступать в качестве барьера. Это также делает кодирование сложным."
    },
    "5": {
        "question": "Что такое JSX?",
        "answer": "JSX расшифровывается как JavaScript XML. Это расширение React, которое позволяет писать код на JavaScript, выглядящий похожим на HTML. Он делает HTML-файлы легкими для понимания. Файл JSX делает приложение React надежным и повышает его производительность. JSX позволяет писать синтаксис, похожий на XML, в том же файле, где вы пишете код JavaScript, а затем предварительный обработчик (например, транспилеры, такие как Babel) преобразует эти выражения в фактический код JavaScript. Как XML/HTML, теги JSX имеют имя тега, атрибуты и детей."
    },
    "6": {
        "question": "Почему браузеры не могут читать JSX?",
        "answer": "Браузеры не могут читать JSX напрямую, потому что они могут понимать только объекты JavaScript, а JSX не является обычным объектом JavaScript. Поэтому нам нужно преобразовывать файл JSX в объект JavaScript с помощью транспилеров, таких как Babel, а затем передавать его в браузер."
    },
    "7": {
        "question": "Зачем мы используем JSX?",
        "answer": "* Он быстрее обычного JavaScript, потому что выполняет оптимизацию при переводе кода в JavaScript.\n\n * Вместо разделения технологий, помещая разметку и логику в отдельные файлы, React использует компоненты, содержащие оба.\n\n * Он обеспечивает типизацию и позволяет обнаруживать большинство ошибок на этапе компиляции.\n\n * Он упрощает создание шаблонов."
    },
    "8": {
        "question": "Что вы понимаете под виртуальным DOM?",
        "answer": "Виртуальный DOM - это легкий объект JavaScript, который представляет собой внутреннее представление реального DOM в памяти. Это промежуточный этап между вызовом функции отображения и отображением элементов на экране. Он похож на дерево узлов, которое перечисляет элементы, их атрибуты и содержимое в виде объектов и их свойств. Функция отображения создает дерево узлов компонентов React, а затем обновляет это дерево узлов в ответ на мутации в модели данных, вызванные различными действиями пользователя или системы."
    },
    "9": {
        "question": "Как работает виртуальный DOM?",
        "answer": "Виртуальный DOM работает в три этапа:\n\n1. Когда изменяются данные в приложении React, вся пользовательская среда перерисовывается в представлении виртуального DOM.\n\n2. Теперь вычисляется разница между предыдущим представлением DOM и новым DOM. 3. Как только вычисления завершены, реальный DOM обновляется только теми элементами, которые были изменены."
    },
    "10": {
        "question": "В чем разница между реальным DOM и виртуальным DOM?",
        "answer": "Реальный DOM создает новый DOM в случае обновления элемента.\n\n * Реальный DOM *\n\n 1. Реальный DOM обновляется медленнее.\n2. Реальный DOM может напрямую обновлять HTML.\n3. Виртуальный DOM обновляет JSX, если обновляется элемент.\n4. В реальном DOM манипулирование DOM-элементами очень дорого.\n5. В реальном DOM происходит много памяти.\n\n\n* Виртуальный DOM *\n\n1. Виртуальный DOM обновляется быстрее.\n2. Виртуальный DOM не может напрямую обновлять HTML.\n3. В виртуальном DOM манипулирование DOM очень легко.\n4. В виртуальном DOM нет потери памяти."
    },
    "11": {
        "question": "Что означает 'В React всё является компонентом'?",
        "answer": "В React компоненты являются строительными блоками приложений React. Эти компоненты разделяют весь пользовательский интерфейс приложения React на маленькие, независимые и многократно используемые фрагменты кода. React рендерит каждый из этих компонентов независимо, не затрагивая остальной пользовательский интерфейс приложения. Таким образом, можно сказать, что в React всё является компонентом."
    },
    "12": {
        "question": "Объясните назначение render() в React.",
        "answer": "У каждого компонента React обязательно должен быть метод render(). Метод render() используется для возврата HTML, который вы хотите отобразить в компоненте. Если вам нужно отобразить более одного HTML-элемента, их нужно сгруппировать внутри одного общего тега (родительского тега), такого как <div>, <form>, <group> и т. д. Этот метод каждый раз возвращает один и тот же результат при его вызове.\n\n1. Каждая функция render() содержит оператор return.\n2. Оператор return может иметь только один родительский тег HTML."
    },
    "13": {
        "question": "Что такое Props?",
        "answer": "Props означает 'свойства' в React. Они представляют собой только для чтения входные данные для компонентов. Props - это объект, который хранит значение атрибутов тега и работает аналогично атрибутам HTML. Это предоставляет способ передачи данных от родительских компонентов к дочерним компонентам во всем приложении.\n\nЭто аналогично аргументам функции и передается компоненту так же, как аргументы, передаваемые в функцию.\n\nProps являются неизменяемыми, поэтому мы не можем изменить props изнутри компонента. Внутри компонентов мы можем добавлять атрибуты, называемые props. Эти атрибуты доступны в компоненте как this.props и могут использоваться для отображения динамических данных в нашем методе render."
    },
    "14": {
        "question": "Что такое State в React?",
        "answer": "State - это изменяемая структура, которая хранит данные и информацию о компоненте. Она может изменяться в течение жизни компонента в ответ на действия пользователя или события системы. Это сердце компонента React, которое определяет его поведение и способ его отображения. Она должна быть максимально простой."
    },
    "15": {
        "question": "В чем разница между States и Props?",
        "answer": "* Props *\n\n1. Props доступны только для чтения.\n2. Props являются неизменяемыми.\n3. Props позволяют передавать данные из одного компонента в другие компоненты в качестве аргумента.\n4. Props могут быть доступны в дочерних компонентах.\n5. Props используются для связи между компонентами.\n6. Безсостоятельные компоненты могут иметь Props.\n7. Props делают компоненты многократно используемыми.\n8. Props являются внешними и управляются тем, что рендерит компонент.\n\n * State * \n\n1. Изменения State могут быть асинхронными.\n2. State является изменяемым.\n3. State содержит информацию о компонентах.\n4. State не может быть доступен в дочерних компонентах.\n5. State может использоваться для отображения динамических изменений в компоненте.\n6. Безсостоятельные компоненты не могут иметь State.\n7. State не делает компоненты многократно используемыми.\n8. State является внутренним и управляется самим компонентом."
    },
    "16": {
        "question": "Как можно обновить State компонента?",
        "answer": "Мы можем обновить State компонента, используя метод this.setState(). Этот метод не всегда заменяет State немедленно. Вместо этого он только добавляет изменения к исходному State. Это основной метод, который используется для обновления пользовательского интерфейса в ответ на обработчики событий и ответы сервера."
    },
    "17": {
        "question": "В чем разница между безсостоятельными и состоятельными компонентами?",
        "answer": "* Безсостоятельные компоненты *\n\n1. Безсостоятельные компоненты не сохраняют и не управляют состоянием.\n2. Они не содержат информации о прошлых, текущих и возможных будущих изменениях состояния.\n3. Их также называют функциональными компонентами.\n4. Они просты и легко понимаемы.\n5. Они не работают с любым методом жизненного цикла React.\n6. Безсостоятельные компоненты не могут быть повторно использованы.\n\n* Состоятельные компоненты * \n\n1. Состоятельные компоненты могут сохранять и управлять состоянием.\n2. Они могут содержать информацию о прошлых, текущих и возможных будущих изменениях состояния.\n3. Их также называют компонентами класса.\n4. Они сложнее по сравнению с безсостоятельными компонентами.\n5. Они могут работать со всеми методами жизненного цикла React.\n6. Состоятельные компоненты могут быть повторно использованы."
    },
    "18": {
        "question": "Что такое стрелочная функция в React? Как она используется?",
        "answer": "Стрелочная функция - это новая функциональность стандарта ES6. Если вам нужно использовать стрелочные функции, не обязательно привязывать любое событие к 'this.' Здесь область видимости 'this' является глобальной и не ограничена никакой вызывающей функцией. Таким образом, если вы используете Arrow Function, нет необходимости привязывать 'this' внутри конструктора. Ее также называют 'толстые стрелки '(=>) функции."
    },
    "19": {
        "question": "Что такое событие в React?",
        "answer": "Событие - это действие, которое срабатывает в результате пользовательского действия или системного события, такого как клик мыши, загрузка веб-страницы, нажатие клавиши, изменение размеров окна и т. д. В React система обработки событий очень похожа на обработку событий в элементах DOM. Система обработки событий React известна как Синтетическое событие, которое является оболочкой кросс-браузера над событием браузера. \n\nОбработка событий с React имеет некоторые синтаксические отличия, которые заключаются в том, что:\n\n  * События React названы camelCase вместо прописных.\n  * С JSX функция передается как обработчик событий, а не строка."
    },
    "20": {
        "question": "Что такое синтетические события в React?",
        "answer": "Синтетическое событие - это объект, который действует как кросс-браузерная оболочка вокруг нативного события браузера. Оно объединяет поведение различных нативных событий браузера в один API, включая stopPropagation() и preventDefault()."
    },
    "21": {
        "question": "Какова разница между контролируемыми и не контролируемыми компонентами?",
        "answer": "* Контролируемые *\n\n1. Он не поддерживает своё внутреннее состояние.\n2. Здесь данные контролируются родительским компонентом.\n3. Он принимает своё текущее значение в качестве свойства.\n4. Он позволяет управлять валидацией.\n5. Он имеет лучший контроль над элементами формы и данными.\n\n * Неконтролируемые * \n\n1. Он поддерживает своё внутреннее состояние.\n2. Здесь данные контролируются самим DOM.\n3. Он использует ссылку для своих текущих значений.\n4. Он не позволяет контролировать валидацию.\n5. Он имеет ограниченный контроль над элементами формы и данными."
    },
    "22": {
        "question": "Объясните списки в React.",
        "answer": "Списки используются для отображения данных в упорядоченном формате. В React списки можно создавать так же, как и в JavaScript. Мы можем перебирать элементы списка, используя функцию map()."
    },
    "23": {
        "question": "Какова значимость ключей в React?",
        "answer": "Ключ - это уникальный идентификатор. В React он используется для определения того, какие элементы изменились, обновились или удалены из списков. Это полезно, когда мы динамически создаем компоненты или когда пользователи изменяют списки. Он также помогает определить, какие компоненты в коллекции нужно повторно отрисовать, вместо повторной отрисовки всего набора компонентов каждый раз. Это повышает производительность приложения."
    },
    "24": {
        "question": "Как создаются формы в React?",
        "answer": "Формы позволяют пользователям взаимодействовать с приложением, а также собирать информацию от пользователей. Формы могут выполнять множество задач, таких как аутентификация пользователя, добавление пользователя, поиск, фильтрация и т. д. Форма может содержать текстовые поля, кнопки, флажки, переключатели и т. д.\n\nReact предлагает состояний, реактивный подход к созданию формы. Формы в React похожи на HTML-формы. Но в React свойство состояния компонента обновляется только через setState(), и JavaScript-функция обрабатывает их отправку. Эта функция имеет полный доступ к данным, введенным пользователем в форму."
    },
    "25": {
        "question": "Какие различные фазы жизненного цикла компонента React?",
        "answer": "Различные фазы жизненного цикла компонента React следующие:\n\nНачальная фаза: Это фаза рождения жизненного цикла React, когда компонент начинает свой путь к DOM. На этой фазе компонент содержит значения по умолчанию для Props и начальное состояние. Эти значения устанавливаются в конструкторе компонента.\n\nФаза монтирования: На этой фазе создается экземпляр компонента и добавляется в DOM.\n\nФаза обновления: Это следующая фаза жизненного цикла React. На этой фазе мы получаем новые Props и изменяем состояние. Эта фаза может потенциально обновлять и перерисовывать компонент только при изменении prop или состояния. Основная цель этой фазы - гарантировать, что компонент отображает последнюю версию самого себя. Эта фаза повторяется снова и снова.\n\nФаза размонтирования: Это последняя фаза жизненного цикла React, где экземпляр компонента уничтожается и открепляется (удаляется) из DOM."
    },
    "26": {
        "question": "Подробно объясните методы жизненного цикла компонентов React.",
        "answer": "Важные методы жизненного цикла React следующие:\n\n  * getInitialState(): Используется для указания значения по умолчанию для this.state. Выполняется перед созданием компонента.\n\n  * componentWillMount(): Выполняется перед тем, как компонент будет отрисован в DOM.\n\n  * componentDidMount(): Выполняется, когда компонент отрисован и размещен в DOM. Теперь можно выполнять любые операции с запросами DOM.\n\n  * componentWillReceiveProps(): Вызывается, когда компонент получает новые props из родительского класса и перед другим вызовом рендера. Если вы хотите обновить состояние в ответ на изменение props, вы должны сравнить this.props и nextProps, чтобы выполнить переход состояния, используя метод this.setState().\n\n  * shouldComponentUpdate(): Вызывается, когда компонент принимает решение об изменениях/обновлении DOM и возвращает значение true или false на основе определенных условий. Если этот метод возвращает true, компонент будет обновлен. В противном случае компонент пропустит обновление.\n\n  * componentWillUpdate(): Вызывается перед тем, как происходит рендеринг в DOM. Здесь нельзя изменять состояние компонента, вызывая метод this.setState(). Этот метод не будет вызван, если shouldComponentUpdate() вернет false.\n\n  * componentDidUpdate(): Вызывается сразу после выполнения рендеринга. В этом методе вы можете поместить любой код, который вы хотите выполнить после обновления.\n\n  * componentWillUnmount(): Вызывается непосредственно перед тем, как компонент будет уничтожен и размонтирован окончательно. Он используется для очистки памяти, такой как аннулирование таймеров, удаление слушателей событий, отмена сетевых запросов или очистка элементов DOM. Если экземпляр компонента размонтирован, вы не можете повторно монтировать его."
    },
    "27": {
        "question": "Что такое Pure Components?",
        "answer": "Чистые компоненты введены в React версии 15.3. Классы React.Component и React.PureComponent отличаются в методе жизненного цикла shouldComponentUpdate() React. Этот метод решает повторное рендеринг компонента, возвращая логическое значение (true или false). В React.Component метод shouldComponentUpdate() по умолчанию возвращает true. Но в React.PureComponent он сравнивает изменения в состоянии или props для повторного рендеринга компонента. Чистый компонент упрощает код и улучшает производительность приложения."
    },
    "28": {
        "question": "Что такое компоненты более высокого порядка (HOC)?",
        "answer": "В React компоненты более высокого порядка (HOC) - это продвинутая техника повторного использования логики компонентов. Это функция, которая принимает компонент и возвращает новый компонент. Другими словами, это функция, которая принимает другую функцию в качестве аргумента. Согласно официальному веб-сайту, это не часть API React, а паттерн, возникающий из композиционной природы React."
    },
    "29": {
        "question": "Что можно сделать с HOC?",
        "answer": "С помощью HOC можно выполнять множество задач, некоторые из них перечислены ниже:\n\n* Повторное использование кода\n* Манипуляции с props\n* Манипуляции со стейтом\n* Перехват рендеринга"
    },
    "30": {
        "question": "В чем разница между Элементом и Компонентом?",
        "answer": "* Элемент *\n\n 1. Элемент - это обычный объект JavaScript, который описывает состояние компонента и узел DOM, а также его желаемые свойства.\n 2. В нем содержится информация только о типе компонента, его свойствах и любых дочерних элементах внутри него.\n 3. Он неизменяемый.\n 4. На элементах нельзя применять какие-либо методы.\n\n * Компонент * \n\n 1. Компонент - это основной строительный блок приложения React. Это класс или функция, которая принимает ввод и возвращает элемент React.\n 2. Он может содержать состояние и свойства и имеет доступ к методам жизненного цикла React.\n 3. Он изменяемый.\n 4. На компонентах можно применять методы."
    },
    "31": {
        "question": "Почему необходимо начинать названия компонентов с заглавной буквы?",
        "answer": "В React необходимо начинать названия компонентов с заглавной буквы. Если мы начнем название компонента с маленькой буквы, это вызовет ошибку как нераспознанный тег. Это потому, что в JSX теги с маленькой буквы считаются тегами HTML."
    },
    "32": {
        "question": "Что такое фрагменты?",
        "answer": "В React версии 16.2 были введены фрагменты. В React фрагменты используются для того, чтобы компоненты могли возвращать несколько элементов. Это позволяет группировать список из нескольких дочерних элементов без добавления дополнительного узла в DOM."
    },
    "33": {
        "question": "Почему фрагменты лучше контейнерных div?",
        "answer": "* Фрагменты работают быстрее и потребляют меньше памяти, потому что они не создают дополнительный узел DOM.\n* Некоторые стили CSS, такие как CSS Grid и Flexbox, имеют особое отношение родитель-ребенок и добавляют теги <div> посередине, что затрудняет сохранение желаемого макета.\n* Инспектор DOM менее загроможден."
    },
    "34": {
        "question": "Как применить валидацию на props в React?",
        "answer": "Валидация props - это инструмент, который помогает разработчикам избежать будущих ошибок и проблем. Это делает ваш код более читаемым. Компоненты React используют специальное свойство PropTypes, которое помогает выявлять ошибки, проверяя типы данных значений, передаваемых через props, хотя не обязательно определять компоненты с propTypes.\n\nВалидацию на props можно применить, используя App.propTypes в компоненте React. Когда некоторые из props передаются с недопустимым типом, вы получите предупреждения в консоли JavaScript. После указания шаблонов валидации вам нужно установить App.defaultProps."
    },
    "35": {
        "question": "Что такое create-react-app?",
        "answer": "Create React App - это инструмент, представленный Facebook для создания приложений React. Он позволяет создавать одностраничные приложения React. Create-react-app предварительно настроен, что позволяет сэкономить время на установке и настройке, таких как Webpack или Babel. Для запуска проекта React вам нужно выполнить одну команду, приведенную ниже.\n\n$ npx create-react-app my-app \n\nЭта команда включает все необходимое для создания приложения React. Некоторые из них перечислены ниже:\n* Он включает поддержку синтаксиса React, JSX, ES6 и Flow.\n* Он включает автопрефиксный CSS, поэтому вам не нужно использовать -webkit- или другие префиксы.\n* Он включает быстрый интерактивный запуск модульных тестов с встроенной поддержкой отчетов о покрытии.\n* Он включает сервер разработки в реальном времени, который предупреждает о распространенных ошибках.\n* Он включает сценарий сборки для объединения JS, CSS и изображений для производства, с хэшами и картами исходного кода."
    },
    "36": {
        "question": "Как можно создать компонент в React?",
        "answer": "Существует два возможных способа создания компонента в React:\n\nФункциональные компоненты: Это самый простой способ создания компонента в React. Это чистые функции JavaScript, которые принимают объект props в качестве первого параметра и возвращают элементы React.\n\nКлассовые компоненты: Метод классовых компонентов позволяет вам использовать класс ES6 для определения компонента."
    },
    "37": {
        "question": "Когда мы предпочитаем использовать классовый компонент перед функциональным компонентом?",
        "answer": "Если компоненту требуется состояние или методы жизненного цикла, следует использовать классовый компонент; в противном случае используйте функциональный компонент. Однако после появления в React версии 16.8 хуков вы можете использовать состояние, методы жизненного цикла и другие функции, которые ранее были доступны только в классовом компоненте, прямо в своем функциональном компоненте."
    },
    "38": {
        "question": "Возможно ли веб-браузеру читать JSX напрямую?",
        "answer": "Веб-браузеры не могут читать JSX напрямую. Это потому, что веб-браузеры созданы для чтения только обычных объектов JS, а JSX не является обычным объектом JavaScript.\n\nЕсли вы хотите, чтобы веб-браузер мог прочитать файл JSX, вы должны преобразовать файлы в обычный объект JavaScript. Для этой цели используется Babel."
    },
    "39": {
        "question": "Что вы понимаете под состоянием в React?",
        "answer": "В React состояние компонента - это объект, который содержит некоторую информацию, которая может изменяться в течение жизни компонента. Старайтесь сделать свое состояние как можно проще и минимизировать количество состояний компонентов. Состояние очень похоже на свойства (props), но оно является закрытым и полностью контролируется компонентом. То есть оно не доступно ни одному другому компоненту, пока родительский компонент не решит передать его."
    },
    "40": {
        "question": "Что вы понимаете под свойствами (props) в React?",
        "answer": "В React свойства (props) - это входные данные для компонентов. Они представляют собой одиночные значения или объекты, содержащие набор значений, передаваемых компонентам при создании с использованием соглашения о именовании, аналогичного атрибутам HTML-тегов. Они являются данными, передаваемыми от родительского компонента к дочернему компоненту.\n\nОсновная цель свойств (props) в React - обеспечить следующую функциональность компонента:\n\n1. Передача пользовательских данных в ваш компонент.\n2. Изменение состояния.\n3. Использование через this.props.reactProp внутри метода render() компонента.\n\nНапример, давайте создадим элемент с свойством reactProp:\n<Element reactProp={'1'} /> \n\nЭто имя reactProp становится свойством, прикрепленным к собственному объекту свойств (props) React, который уже существует на всех компонентах библиотеки React.\nprops.reactProp "
    },
    "41": {
        "question": "Что вы понимаете под refs в React?",
        "answer": "Refs - это сокращение, используемое для ссылок в React. Это атрибут, который помогает сохранить ссылку на определенные узлы DOM или элементы React. Он предоставляет способ доступа к узлам React DOM или элементам React и способ взаимодействия с ними. Он используется, когда нам нужно изменить значение дочернего компонента, не прибегая к использованию свойств (props)."
    },
    "42": {
        "question": "Как создать refs?",
        "answer": "Refs можно создать с помощью React.createRef() и присоединить к элементам React с помощью атрибута ref. Обычно он присваивается свойству экземпляра при создании компонента, а затем может использоваться по всему компоненту."
    },
    "43": {
        "question": "Что такое Forward Refs?",
        "answer": "Передача ссылок - это функция, которая используется для передачи ссылки через компонент на один из его дочерних компонентов. Это можно сделать с помощью метода React.forwardRef(). Он особенно полезен с компонентами более высокого порядка и особенно используется в библиотеках компонентов, которые можно повторно использовать."
    },
    "44": {
        "question": "Для чего используются Refs?",
        "answer": "Ref в React используется в следующих случаях:\n\n* Используется для возврата ссылки на элемент.\n* Используется, когда нам нужны измерения DOM, такие как управление фокусом, выделение текста или воспроизведение медиафайлов.\n* Используется для запуска императивных анимаций.\n* Используется при интеграции с сторонними библиотеками DOM.\n* Может использоваться также в качестве обратных вызовов."
    },
    "45": {
        "question": "Что такое React Router?",
        "answer": "React Router - это стандартная система маршрутизации, построенная поверх React. Она используется для создания маршрутизации в приложении React с использованием пакета React Router. Он помогает определить несколько маршрутов в приложении. Он обеспечивает синхронный URL в браузере с данными, которые будут отображаться на веб-странице. Он поддерживает стандартную структуру и поведение приложения и в основном используется для разработки одностраничных веб-приложений."
    },
    "46": {
        "question": "Зачем нам нужен маршрутизатор в React?",
        "answer": "React Router играет важную роль в отображении нескольких представлений в одностраничном приложении. Он используется для определения нескольких маршрутов в приложении. Когда пользователь вводит определенный URL в браузер, и если этот путь URL совпадает с каким-либо 'маршрутом' внутри файла маршрутизатора, пользователь будет перенаправлен на этот конкретный маршрут. Поэтому нам нужно добавить библиотеку маршрутизатора в приложение React, которая позволяет создавать несколько маршрутов, каждый из которых ведет к уникальному представлению."
    },
    "47": {
        "question": "Перечислите преимущества React Router.",
        "answer": "Основные преимущества React Router перечислены ниже:\n\n* В этом нет необходимости устанавливать историю браузера вручную.\n* Link используется для навигации по внутренним ссылкам в приложении. Это похоже на тег якоря.\n* Он использует функцию Switch для рендеринга.\n* Маршрутизатору нужен только один дочерний элемент.\n* В этом каждый компонент указан в <Route>.\n* Пакеты разделены на три пакета: Web, Native и Core. Он поддерживает компактный размер приложения React."
    },
    "48": {
        "question": "В чем разница между React Router и традиционной маршрутизацией?",
        "answer": "Различия между маршрутизацией в React и традиционной маршрутизацией следующие:\n\n * Традиционная маршрутизация * \n\n1. В традиционной маршрутизации каждое представление содержит новый файл.\n2. HTTP-запрос отправляется на сервер для получения соответствующей HTML-страницы.\n3. В этом пользователь перемещается по разным страницам для каждого представления.\n\n * Маршрутизация в React * \n\n1. В маршрутизации в React участвует только одна HTML-страница.\n2. Изменяется только атрибут History <BrowserRouter>.\n3. В этом пользователь думает, что перемещается по разным страницам, но это только иллюзия."
    },
    "49": {
        "question": "Зачем используется ключевое слово switch в React Router v4?",
        "answer": "Ключевое слово 'switch' используется для отображения только одного маршрута из нескольких определенных маршрутов. Компонент <Switch> используется для рендеринга компонентов только при совпадении пути. В противном случае он переходит к компоненту not found."
    },
    "50": {
        "question": "Как использовать стили в React?",
        "answer": "Мы можем использовать атрибут style для стилизации в приложениях React, который добавляет динамически вычисленные стили во время рендеринга. Он принимает объект JavaScript с свойствами camelCased вместо строки CSS. Атрибут style согласуется с доступом к свойствам узлов DOM в JavaScript."
    },
    "51": {
        "question": "Сколько способов стилизации React-компонента?",
        "answer": "Мы можем стилизовать компонент React главным образом четырьмя способами, перечисленными ниже:\n\n* Встроенная стилизация\n* CSS-стиль\n* Модуль CSS\n* Стилизованные компоненты"
    },
    "52": {
        "question": "Объясните стилизацию CSS Module в React.",
        "answer": "Модуль CSS - это файл CSS, в котором все имена классов и имена анимаций по умолчанию ограничены локально. Он доступен только для компонента, который его импортирует, и без вашего разрешения не может быть применен к другим компонентам. Вы можете создать файл CSS Module с расширением .module.css."
    },
    "53": {
        "question": "Что такое Styled Components?",
        "answer": "Styled-Components - это библиотека для React. Он является преемником CSS Modules. Он использует расширенный CSS для стилизации систем компонентов React в вашем приложении, который написан смешением JavaScript и CSS. Он ограничен областью одного компонента и не может распространяться на другие элементы на странице.\n\nstyled-components обеспечивает:\n\n* Автоматический критический CSS\n* Отсутствие багов с именами классов\n* Упрощение удаления CSS\n* Простую динамическую стилизацию\n* Безболезненное обслуживание"
    },
    "54": {
        "question": "Что такое хуки в React?",
        "answer": "Хуки - это новая функция, введенная в версии React 16.8, которая позволяет использовать состояние и другие функции React без написания классов."
    },
    "55": {
        "question": "Какие правила следует соблюдать при использовании хуков в React?",
        "answer": "Мы должны следовать следующим двум правилам при использовании хуков в React:\n\n* Вы должны вызывать хуки только на верхнем уровне ваших функций React, а не внутри циклов, условий или вложенных функций. Это используется для обеспечения вызова хуков в одном и том же порядке при каждом рендеринге компонента, и также сохраняет состояние хуков между несколькими вызовами useState и useEffect.\n\n* Вы должны вызывать хуки только из функций React. Не вызывайте хуки из обычных функций JavaScript."
    },
    "56": {
        "question": "Что такое формы в React?",
        "answer": "В React формы используются для обеспечения взаимодействия пользователей с веб-приложениями. Вот список наиболее распространенных способов использования форм в React:\n\n* Формы облегчают взаимодействие пользователей с приложением. Путем использования форм пользователи могут взаимодействовать с приложением и вводить необходимую информацию при необходимости.\n* Формы содержат определенные элементы, такие как текстовые поля, кнопки, флажки, радиокнопки и т. д., которые могут сделать приложение более интерактивным и красивым.\n* Формы - это лучший способ получения ввода от пользователей.\n* Формы используются для множества различных задач, таких как аутентификация пользователя, поиск, фильтрация, индексирование и т. д."
    },
    "57": {
        "question": "Что такое границы ошибок или error boundaries?",
        "answer": "Граница ошибок - это концепция, введенная в версии 16 React. Границы ошибок предоставляют способ выявления ошибок, которые возникают на этапе рендеринга. Любой компонент, который использует один из следующих методов жизненного цикла, считается границей ошибок. Давайте посмотрим, где граница ошибок может обнаружить ошибку:\n\n* Этап рендеринга\n* Внутри метода жизненного цикла\n* Внутри конструктора\n\n Мы знаем, что любая ошибка внутри метода рендеринга приводит к размонтированию компонента, поэтому для отображения ошибки, которая возникает внутри метода рендеринга, мы используем границы ошибок. Если мы не используем границу ошибок, мы видим пустую страницу вместо того, чтобы увидеть ошибку.\n С границей ошибок:\n\nМы указали ранее, что граница ошибок - это компонент, использующий один или оба из следующих методов:\n\n * static getDerivedStateFromError\n* componentDidCatch"
    },
    "58": {
        "question": "В каких случаях границы ошибок не перехватывают ошибки?",
        "answer": "Вот некоторые случаи, когда границы ошибок не перехватывают ошибки:\n\n* Границы ошибок не перехватывают ошибки в обработчиках событий.\n* Во время серверного рендеринга.\n* В случае, когда ошибки возникают в самом коде границы ошибок.\n* Асинхронный код с использованием обратных вызовов setTimeout или requestAnimationFrame."
    },
    "59": {
        "question": "Какие были основные проблемы с фреймворком MVC?",
        "answer": "Основные проблемы с фреймворком MVC:\n\n* Манипуляция DOM была очень затратной.\n* Это делало приложение медленным и неэффективным.\n* Было много потери памяти.\n* Это делало отладку приложения сложной."
    },
    "60": {
        "question": "Что такое Redux?",
        "answer": "Redux - это библиотека с открытым исходным кодом на JavaScript, используемая для управления состоянием приложения. React использует Redux для построения пользовательского интерфейса. Приложение Redux легко тестировать и может работать в различных средах, обеспечивая последовательное поведение. Он был впервые представлен Дэном Абрамовым и Эндрю Кларком в 2015 году.\n\nReact Redux - это официальное привязывание React к Redux. Он позволяет React-компонентам читать данные из хранилища Redux и отправлять действия в хранилище для обновления данных. Redux помогает приложениям масштабироваться, предоставляя разумный способ управления состоянием через модель однонаправленного потока данных. React Redux концептуально прост. Он подписывается на хранилище Redux, проверяет, изменились ли данные, которые ваш компонент хочет, и повторно рендерит ваш компонент."
    },
    "61": {
        "question": "Какие три принципа следует Redux?",
        "answer": "Три принципа, которым следует Redux, следующие:\n\n1. Единственный источник правды: Состояние вашего всего приложения хранится в объекте/дереве состояния внутри одного хранилища. Единое дерево состояния облегчает сохранение изменений со временем. Это также облегчает отладку или проверку приложения.\n2. Состояние доступно только для чтения: Единственный способ изменить состояние - это отправить действие, объект, описывающий произошедшее. Этот принцип гарантирует, что ни представления, ни обратные вызовы сети не могут писать напрямую в состояние.\n3. Изменения выполняются с использованием чистых функций: Для указания того, как действия преобразуют дерево состояния, вам нужно написать редукторы (чистые функции). Чистые функции принимают предыдущее состояние и действие в качестве параметра и возвращают новое состояние."
    },
    "62": {
        "question": "Перечислите компоненты Redux.",
        "answer": "Компоненты Redux перечислены ниже.\n\n* ХРАНИЛИЩЕ: Хранилище - это место, где перечисляется весь состав вашего приложения. Это похоже на мозг, ответственный за все движущиеся части в Redux.\n* ДЕЙСТВИЕ: Это объект, который описывает произошедшее.\n* РЕДУКТОР: Он определяет, как изменится состояние."
    },
    "63": {
        "question": "Объясните роль редуктора.",
        "answer": "Редукторы считывают нагрузки из действий, а затем обновляют хранилище через состояние соответственно. Это чистая функция, которая возвращает новое состояние из исходного состояния. Если необходимости в работе нет, он возвращает предыдущее состояние как есть."
    },
    "64": {
        "question": "Какова значимость хранилища в Redux?",
        "answer": "Хранилище - это объект, который содержит состояние приложения и предоставляет методы для доступа к состоянию, отправки действий и регистрации слушателей через subscribe(listener). Вся древовидная структура состояния приложения хранится в одном хранилище, что делает Redux простым и предсказуемым. Мы можем передавать промежуточное ПО в хранилище, которое обрабатывает обработку данных, а также ведет журнал различных действий, изменяющих состояние хранилища. Все действия возвращают новое состояние через редукторы."
    },
    "65": {
        "question": "В чем разница между Redux и Flux?",
        "answer": "* Redux *\n\n1. Redux - это библиотека с открытым исходным кодом на JavaScript, используемая для управления состоянием приложения.\n2. Состояние хранилища неизменно.\n3. В нем логика хранилища и изменения отделены друг от друга.\n4. В нем есть только одно хранилище.\n5. У Redux нет концепции Диспетчера.\n\n * Flux *\n\n1. Flux не является ни библиотекой, ни фреймворком. Это своего рода архитектура, которая дополняет React в качестве представления и следует концепции модели однонаправленного потока данных.\n2. Состояние хранилища изменяемо.\n3. В нем хранилище содержит состояние и логику изменения.\n4. Оно может иметь несколько хранилищ.\n5. У него есть единственный Диспетчер, и все действия проходят через этот Диспетчер."
    },
    "66": {
        "question": "Каковы преимущества Redux?",
        "answer": "Основные преимущества React Redux следующие:\n\n* React Redux - это официальное привязывание интерфейса React к приложению React. Оно поддерживается в актуальном состоянии с любыми изменениями в API, чтобы гарантировать, что ваши компоненты React ведут себя как ожидается.\n* Оно поощряет хорошую 'React' архитектуру.\n* Внутренне реализовано много оптимизаций производительности, что позволяет компонентам повторно рендериться только тогда, когда это действительно необходимо.\n* Оно упрощает обслуживание кода.\n* Код Redux написан в виде функций, которые малы, чисты и изолированы, что делает код тестируемым и независимым."
    },
    "67": {
        "question": "Как получить доступ к хранилищу Redux вне компонента?",
        "answer": "Вам нужно экспортировать хранилище из модуля, где оно создано с помощью метода createStore(). Кроме того, нужно убедиться, что оно не будет загрязнять глобальное окно.\n\nstore = createStore(myReducer)\nexport default store  "
    }
}