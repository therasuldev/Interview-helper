{
    "1": {
        "question": "Что такое С#?",
        "answer": "C# — это объектно-ориентированный, типобезопасный и управляемый язык, который компилируется платформой .Net для создания Microsoft Промежуточный язык."
    },
    "2": {
        "question": "Объясните типы комментариев в C#.",
        "answer": "* Одна линия\n\nЭто критически важно для анализа и выбора наиболее эффективных ключевых слов для улучшения рейтинга вашего сайта.\n\n//This is a single line comment\n\n* Несколько строк (/* */)\n\nЭто критически важно для анализа и выбора наиболее эффективных ключевых слов для улучшения рейтинга вашего сайта.\n\n* XML-комментарии (///).\n\nЭто критически важно для анализа и выбора наиболее эффективных ключевых слов для улучшения рейтинга вашего сайта."
    },
    "3": {
        "question": "Можно ли выполнить несколько блоков catch?",
        "answer": "Нет, несколько блоков catch одного типа не могут быть выполнены. После выполнения соответствующего кода перехвата управление передается блоку «finally», а затем выполняется код, следующий за блоком «finally»."
    },
    "4": {
        "question": "В чем разница между public, static и void?",
        "answer": "Публично объявленные переменные или методы доступны в любом месте приложения. Статические объявленные переменные или методы доступны глобально без создания экземпляра класса. Статический член по умолчанию не доступен глобально, это зависит от используемого типа измененного доступа. Компилятор сохраняет адрес метода в качестве точки входа и использует эту информацию, чтобы начать выполнение до создания каких-либо объектов. А Void — это модификатор типа, который указывает, что метод или переменная не возвращает никакого значения."
    },
    "5": {
        "question": "Что такое предмет?",
        "answer": "Объект — это экземпляр класса, через который мы получаем доступ к методам этого класса. Ключевое слово «New» используется для создания объекта. Класс, создающий объект в памяти, будет содержать информацию о методах, переменных и поведении этого класса."
    },
    "6": {
        "question": "Определить конструкторы",
        "answer": "Конструктор — это функция-член класса, имя которого совпадает с именем его класса. Конструктор автоматически вызывается при каждом создании класса объекта. Он создает значения членов данных при инициализации класса."
    },
    "7": {
        "question": "Что такое зубчатые массивы?",
        "answer": "Массив, содержащий элементы типа массив, называется зубчатым массивом. Элементы могут быть разных размеров и размеров. Мы также можем назвать зубчатый массив массивом массивов."
    },
    "8": {
        "question": "В чем разница между параметрами ref и out?",
        "answer": "Аргумент, переданный как ref, должен быть инициализирован перед передачей методу, тогда как параметр out не нужно инициализировать перед передачей методу."
    },
    "9": {
        "question": "Для чего используется оператор using в C#?",
        "answer": "Блок «использование» используется для получения ресурса и его обработки, а затем автоматического удаления после завершения выполнения блока."
    },
    "10": {
        "question": "Что такое сериализация?",
        "answer": "Когда мы хотим передать объект через сеть, нам необходимо преобразовать объект в поток байтов. Процесс преобразования объекта в поток байтов называется сериализацией. Чтобы объект можно было сериализовать, он должен реализовывать интерфейс ISerialize. Десериализация — это обратный процесс создания объекта из потока байтов."
    },
    "11": {
        "question": "Можем ли мы использовать команду «this» в статическом методе?",
        "answer": "Мы не можем использовать «Это» в статическом методе, потому что мы можем использовать только статические переменные/методы в статическом методе."
    },
    "12": {
        "question": "В чем разница между константами и доступом только для чтения?",
        "answer": "Константные переменные объявляются и инициализируются во время компиляции. Значение не может быть изменено впоследствии. Только для чтения используется только тогда, когда мы хотим присвоить значение во время выполнения."
    },
    "13": {
        "question": "Что такое класс интерфейса? Приведите один пример этого",
        "answer": "Интерфейс — это абстрактный класс, который имеет только общедоступные абстрактные методы, причем методы имеют только объявление, а не определение. Эти абстрактные методы должны быть реализованы в унаследованных классах."
    },
    "14": {
        "question": "Что такое типы значений и ссылочные типы?",
        "answer": "Тип значения хранит значение данных в своем собственном пространстве памяти.\nПример\n\nint a = 30;\n\nСсылочный тип хранит адрес объекта, в котором хранится значение. Это указатель на другую ячейку памяти.\n\nstring b = 'Hello Guru99!!';"
    },
    "15": {
        "question": "Что такое пользовательский контроль и пользовательский контроль?",
        "answer": "Пользовательские элементы управления — это элементы управления, созданные в виде скомпилированного кода (Dll), их проще использовать, и их можно добавить в инструмент.box. Разработчики могут перетаскивать элементы управления в свои веб-формы. Атрибуты могут это делать во время разработки. Мы можем легко добавить пользовательские элементы управления к нескольким приложениям (если они являются общими Dll). Итак, если они являются частными, мы можем скопировать dll в каталог bin веб-приложения, а затем добавить ссылку и использовать их.\n\nПользовательские элементы управления очень похожи на включаемые файлы ASP, и их легко создавать. Пользовательские элементы управления не могут быть размещены в инструменте.box и потащил – сбросил с него. У них есть свой дизайн и код. Расширение файла для пользовательских элементов управления — ascx."
    },
    "16": {
        "question": "Что такое запечатанные классы в C#?",
        "answer": "Мы создаем запечатанные классы, когда хотим ограничить наследование класса. Модификатор Sealed, используемый для предотвращения наследования от класса. Если мы принудительно укажем запечатанный класс в качестве базового, произойдет ошибка времени компиляции."
    },
    "17": {
        "question": "Что такое перегрузка метода?",
        "answer": "Перегрузка метода — это создание нескольких методов с одинаковым именем и уникальными сигнатурами в одном классе. Когда мы компилируем, компилятор использует разрешение перегрузки, чтобы определить конкретный метод, который нужно вызвать."
    },
    "18": {
        "question": "В чем разница между массивом и массивом?",
        "answer": "В массиве могут быть только элементы одного типа. Размер массива фиксируется при сравнении. Arraylist похож на массив, но не имеет фиксированного размера."
    },
    "19": {
        "question": "Можно ли переопределить частный виртуальный метод?",
        "answer": "Нет, потому что они недоступны вне класса."
    },
    "20": {
        "question": "Опишите модификатор доступности «защищенный внутренний».",
        "answer": "Защищенные внутренние переменные/методы доступны внутри одного и того же assembly а также из классов, производных от этого родительского класса."
    },
    "21": {
        "question": "В чем разница между классами System.String и System.Text.StringBuilder?",
        "answer": "System.String является неизменяемым. Когда мы изменяем значение строковой переменной, для нового значения выделяется новая память, а предыдущее выделение памяти освобождается. System.StringBuilder был разработан с учетом концепции изменяемой строки, в которой множество operaОперации могут быть выполнены без выделения отдельной ячейки памяти для измененной строки."
    },
    "22": {
        "question": "В чем разница между System.Array.CopyTo() и System.Array.Clone()?",
        "answer": "`Clone()` мы создаем новый объект массива, содержащий все элементы исходного массива и используя `CopyTo()` метод. Все элементы существующего массива копируются в другой существующий массив. Оба метода выполняют поверхностное копирование."
    },
    "23": {
        "question": "Как отсортировать элементы массива по убыванию?",
        "answer": "`Sort()` методы, за которыми следуют `Reverse()` метод."
    },
    "24": {
        "question": "Запишите синтаксис C# для перехвата исключения.",
        "answer": "Чтобы перехватить исключение, мы используем блоки try-catch. Блок Catch может иметь параметр типа system.Exception.\n\nНапример\n\ntry {\n   GetAllData();\n}\ncatch (Exception ex) {\n}\n\nВ приведенном выше примере мы можем опустить параметр из оператора catch."
    },
    "25": {
        "question": "В чем разница между интерфейсом и абстрактным классом?",
        "answer": "В интерфейсах есть все методы, имеющие только объявление, но не определение. В абстрактном классе у нас могут быть некоторые конкретные методы. В классе интерфейса все методы являются общедоступными. Абстрактный класс может иметь частные методы."
    },
    "26": {
        "question": "В чем разница между методами Finalize() и Dispose()?",
        "answer": "`Dispose()` вызывается, когда мы хотим, чтобы объект освободил вместе с собой любые неуправляемые ресурсы. С другой стороны, `Finalize()` используется для той же цели, но не обеспечивает сбор мусора объекта."
    },
    "27": {
        "question": "Что такое циклические ссылки?",
        "answer": "Циклическая ссылка — это ситуация, в которой два или более ресурсов взаимозависимы друг от друга, что приводит к состоянию блокировки и делает ресурсы непригодными для использования."
    },
    "28": {
        "question": "Что такое дженерики в C#.NET?",
        "answer": "Обобщенные шаблоны используются для создания повторно используемых классов кода, чтобы уменьшить избыточность кода, повысить безопасность типов и производительность. Используя дженерики, мы можем создавать классы коллекций. Чтобы создать универсальную коллекцию, следует использовать пространство имен System.Collections.Generic вместо таких классов, как ArrayList, в пространстве имен System.Collections. Дженерики promoпроверяет использование параметризованных типов."
    },
    "29": {
        "question": "Что такое пул объектов в .NET?",
        "answer": "Пул объектов — это контейнер, содержащий объекты, готовые к использованию. Он отслеживает объект, который используется в данный момент, общее количество объектов в пуле. Это уменьшает накладные расходы на создание и повторное создание объектов."
    },
    "30": {
        "question": "Перечислите часто используемые типы исключений в .net.",
        "answer": "ArgumentException, ArgumentNullException, ArgumentOutOfRangeException, ArithmeticException, DivideByZeroException, OverflowException, IndexOutOfRangeException, InvalidCastException, InvalidOperationException, IOEndOfStreamException, NullReferenceException, OutOfMemoryException, StackOverflowException и т. д."
    },
    "31": {
        "question": "Что такое пользовательские исключения?",
        "answer": "Иногда возникают некоторые ошибки, которые необходимо обрабатывать в соответствии с требованиями пользователя. Для них используются пользовательские исключения и используются определенные исключения."
    },
    "32": {
        "question": "Что такое делегаты?",
        "answer": "Делегаты — это те же указатели на функции в C++, но с той лишь разницей, что они типобезопасны, в отличие от указателей на функции. Делегаты необходимы, потому что их можно использовать для написания гораздо более общих типобезопасных функций."
    },
    "33": {
        "question": "Как наследовать один класс другому классу в C#?",
        "answer": "Двоеточие используется в качестве наследования operaТор на C#. Просто поставьте двоеточие, а затем имя класса.\n\npublic class DerivedClass : BaseClass"
    },
    "34": {
        "question": "Каков базовый класс в .net, от которого произошли все классы?",
        "answer": "System.Object"
    },
    "35": {
        "question": "В чем разница между переопределением метода и перегрузкой метода?",
        "answer": "При переопределении метода мы изменяем определение метода в производном классе, что меняет поведение метода. Перегрузка метода — это создание метода с тем же именем в одном классе, но с разными сигнатурами."
    },
    "36": {
        "question": "Каковы различные способы перегрузки метода?",
        "answer": "Методы можно перегружать, используя разные типы данных для параметра, разный порядок параметров и разное количество параметров."
    },
    "37": {
        "question": "Почему нельзя указать модификатор доступности для методов внутри интерфейса?",
        "answer": "В интерфейсе у нас есть виртуальные методы, у которых нет определения метода. Все методы должны быть переопределены в производном классе. Именно поэтому они все публичные."
    },
    "38": {
        "question": "Как мы можем настроить наследование класса, но предотвратить переопределение метода?",
        "answer": "Объявите класс как общедоступный и запечатайте метод, чтобы предотвратить его переопределение."
    },
    "39": {
        "question": "Что произойдет, если унаследованные интерфейсы будут иметь конфликтующие имена методов?",
        "answer": "Реализация зависит от вас, поскольку метод находится внутри вашего собственного класса. Может возникнуть проблема, когда методы разных интерфейсов ожидают разные данные, но поскольку компилятор cares ты в порядке."
    },
    "40": {
        "question": "В чем разница между структурой и классом?",
        "answer": "Структуры — это переменные типа значения, а классы — ссылочные типы. Структуры, хранящиеся в стеке, вызывают дополнительные накладные расходы, но ускоряют извлечение. Структуры не могут наследоваться."
    },
    "41": {
        "question": "Как использовать типы, допускающие значение NULL, в .Net?",
        "answer": "Типы значений могут принимать либо свои обычные значения, либо нулевое значение. Такие типы называются типами, допускающими значение NULL.\n\nInt? someID = null;\nIf(someID.HasVAlue)\n{\n}"
    },
    "42": {
        "question": "Как создать массив со значениями, отличными от значений по умолчанию?",
        "answer": "Мы можем создать массив со значениями, отличными от значений по умолчанию, используя Enumerable.Repeat."
    },
    "43": {
        "question": "В чем разница между «есть» и «как» operaТорс в С#?",
        "answer": "'является' operator используется для проверки совместимости объекта с заданным типом и возвращает результат в виде логического значения.\n'в качестве' operator используется для приведения объекта к типу или классу."
    },
    "44": {
        "question": "Что такое делегат многоадресной рассылки?",
        "answer": "Делегат, которому назначено несколько обработчиков, называется делегатом многоадресной рассылки. Каждый обработчик присваивается методу."
    },
    "45": {
        "question": "Что такое индексаторы в C# .NET?",
        "answer": "Индексаторы известны как умные массивы в С#. Это позволяет индексировать экземпляры класса так же, как и массив.\n\nНапример:\n\npublic int this[int index]    // Indexer declaration"
    },
    "46": {
        "question": "В чем разница между «throw» и «throw ex» в .NET?",
        "answer": "Оператор «Throw» сохраняет исходный стек ошибок, тогда как «throw ex» имеет трассировку стека от точки выброса. Всегда рекомендуется использовать «throw», поскольку это обеспечивает более точную информацию об ошибках."
    },
    "47": {
        "question": "Что такое атрибуты C# и их значение?",
        "answer": "C# предоставляет разработчикам возможность определять декларативные теги для определенных объектов, например. Класс, метод и т. д. называются атрибутами. Информацию об атрибуте можно получить во время выполнения с помощью Reflection."
    },
    "48": {
        "question": "Как реализовать шаблон проектирования Singleton в C#?",
        "answer": "В шаблоне Singleton класс может иметь только один экземпляр и предоставляет глобальную точку доступа к нему.\n\nНапример:\n\nPublic sealed class Singleton\n{\nPrivate static readonly Singleton _instance = new Singleton();\n}"
    },
    "49": {
        "question": "В чем разница между Directcast и CType?",
        "answer": "DirectCast используется для преобразования типа объекта, который требует, чтобы тип времени выполнения был таким же, как указанный тип в DirectCast.\nCtype используется для преобразования, где преобразование определяется между выражением и типом."
    },
    "50": {
        "question": "Является ли код C# управляемым или неуправляемым кодом?",
        "answer": "C# — это управляемый код, поскольку среда выполнения Common Language может компилировать код C# в промежуточный язык."
    },
    "51": {
        "question": "Что такое консольное приложение?",
        "answer": "Консольное приложение — это приложение, которое можно запустить в командной строке в Windows. Для любого новичок в .NetВ идеале создание консольного приложения — это первый шаг."
    },
    "52": {
        "question": "",
        "answer": ""
    },
    "53": {
        "question": "",
        "answer": ""
    },
    "54": {
        "question": "",
        "answer": ""
    },
    "55": {
        "question": "",
        "answer": ""
    },
    "56": {
        "question": "",
        "answer": ""
    },
    "57": {
        "question": "",
        "answer": ""
    },
    "58": {
        "question": "",
        "answer": ""
    },
    "59": {
        "question": "",
        "answer": ""
    },
    "60": {
        "question": "",
        "answer": ""
    }
}