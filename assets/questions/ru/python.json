{
    "1": {
        "question": "Что такое Python? Перечислите некоторые популярные приложения Python в мире технологий.",
        "answer": "Python - это широко используемый язык программирования общего назначения высокого уровня. Он был создан Гвидо ван Россумом в 1991 году и дальше развивается Python Software Foundation. Он был разработан с акцентом на читаемость кода, и его синтаксис позволяет программистам выражать свои концепции в меньшем количестве строк кода. Он используется для:\n\n * Сценариев системного управления\n\n * Веб-разработки\n\n * Разработки игр\n\n * Разработки программного обеспечения\n\n * Сложной математики"
    },
    "2": {
        "question": "Каковы преимущества использования языка Python в качестве инструмента в настоящей ситуации?",
        "answer": "Преимущества использования языка Python включают в себя:\n\n * Объектно-ориентированный язык\n\n * Язык высокого уровня\n\n * Динамически типизированный язык\n\n * Обширные библиотеки поддержки\n\n * Наличие сторонних модулей\n\n * Открытый и совместный разработка\n\n * Переносимость и интерактивность\n\n * Переносимость между операционными системами"
    },
    "3": {
        "question": "Python - это компилируемый или интерпретируемый язык?",
        "answer": "На самом деле, Python является частично компилируемым и частично интерпретируемым языком. Часть компиляции выполняется первой при выполнении кода, и это генерирует байт-код внутренне, затем этот байт-код преобразуется виртуальной машиной Python (p.v.m) в соответствии с базовой платформой (машина + операционная система)."
    },
    "4": {
        "question": "Что делает символ ‘#’ в Python?",
        "answer": "‘#’ используется для комментирования всего, что следует за ним в строке."
    },
    "5": {
        "question": "В чем разница между изменяемым типом данных и неизменяемым типом данных?",
        "answer": "Изменяемые типы данных можно редактировать, т.е. они могут изменяться во время выполнения. Например, списки, словари и т. д.\nНеизменяемые типы данных нельзя редактировать, т.е. они не могут изменяться во время выполнения. Например, строки, кортежи и т. д."
    },
    "6": {
        "question": "Как аргументы передаются по значению или по ссылке в Python?",
        "answer": "Все в Python является объектом, и все переменные содержат ссылки на объекты. Значения ссылок соответствуют функциям; следовательно, вы не можете изменить значение ссылок. Однако вы можете изменить объекты, если они изменяемы."
    },
    "7": {
        "question": "В чем разница между множеством и словарем?",
        "answer": "Множество - это неупорядоченная коллекция типов данных, которая является итерируемой, изменяемой и не имеет дублирующихся элементов.\n\nСловарь в Python - это неупорядоченная коллекция значений данных, используемых для хранения данных, таких как карта."
    },
    "8": {
        "question": "Что такое генератор списков (List Comprehension)? Приведите пример.",
        "answer": "Генератор списка - это конструкция синтаксиса, упрощающая создание списка на основе существующего итерируемого объекта.\n\nНапример:\n\nmy_list = [i for i in range(1, 10)]"
    },
    "9": {
        "question": "Что такое лямбда-функция?",
        "answer": "Лямбда-функция - это анонимная функция. Эта функция может иметь любое количество параметров, но может содержать только один оператор. Например:\n\na = lambda x, y : x*y\nprint(a(7, 19))"
    },
    "10": {
        "question": "Что такое pass в Python?",
        "answer": "Pass означает отсутствие операции, или другими словами, это заполнитель в составном операторе, где должно оставаться пустое место и ничего не должно быть написано."
    },
    "11": {
        "question": "В чем разница между / и // в Python?",
        "answer": "/ представляет целочисленное деление, тогда как // представляет точное деление. Например:\n\n5//2 = 2\n5/2 = 2.5"
    },
    "12": {
        "question": "Как осуществляется обработка исключений в Python?",
        "answer": "В Python для обработки исключений используются 3 основных ключевых слова: try, except и finally. Ключевое слово try представляет собой блок кода, который контролируется на наличие ошибок. Блок except выполняется при возникновении ошибки.\nКлючевое слово finally выполняется независимо от того, произошла ошибка или нет. Блок finally используется для выполнения необходимых операций по очистке объектов/переменных."
    },
    "13": {
        "question": "Что такое функция swapcase в Python?",
        "answer": "Это метод строки, который преобразует все символы верхнего регистра в нижний регистр и наоборот. Он используется для изменения регистра существующей строки. Этот метод создает копию строки, которая содержит все символы в обратном регистре. Например:\n\nstring = 'GeeksforGeeks'\nstring.swapcase() ---> 'gEEKSFORgEEKS'"
    },
    "14": {
        "question": "В чем разница между циклом for и циклом while в Python",
        "answer": "Цикл \"for\" обычно используется для перебора элементов различных типов коллекций, таких как списки, кортежи, множества и словари. Разработчики используют цикл \"for\" там, где есть начальные и конечные условия.\nВ то время как цикл \"while\" - это фактическая особенность цикла, используемая в любом другом языке программирования. Программисты используют цикл while в Python, когда у них есть только конечные условия."
    },
    "15": {
        "question": "Можем ли мы передать функцию в качестве аргумента в Python?",
        "answer": "Да, в функцию Python можно передавать несколько аргументов, включая объекты, переменные (одного или различного типа данных) и функции. Функции могут быть переданы как параметры другим функциям, потому что они являются объектами. Высокоуровневые функции - это функции, которые могут принимать другие функции в качестве аргументов."
    },
    "16": {
        "question": "Что такое *args и **kwargs?",
        "answer": "Для передачи переменного числа аргументов в функцию в Python используется специальный синтаксис *args и **kwargs в спецификации функции. Он используется для передачи переменной длины списка аргументов без ключевых слов. Используя *, переменная, с которой связан *, становится итерируемой, что позволяет выполнять операции над ней, такие как итерирование по ней и использование операций более высокого уровня, таких как map и filter."
    },
    "17": {
        "question": "Требуется ли в Python отступ?",
        "answer": "Да, в Python требуется отступ. Интерпретатор Python может быть проинформирован о том, что группа операторов принадлежит определенному блоку кода, используя отступы в Python. Отступы делают код понятным для разработчиков во всех языках программирования, но в Python очень важно корректно отступать код в определенном порядке."
    },
    "18": {
        "question": "Что такое область видимости в Python?",
        "answer": "Область, где мы можем найти переменную и, если необходимо, получить к ней доступ, называется областью видимости переменной.\n\n * Локальная переменная Python: Локальные переменные - это те, которые инициализируются внутри функции и являются уникальными для этой функции. Они не могут быть доступны за пределами функции.\n\n * Глобальные переменные Python: Глобальные переменные - это те, которые определяются и объявляются вне любой функции и не указаны для какой-либо функции.\n\n * Область видимости уровня модуля: Она относится к глобальным объектам текущего модуля, доступным в программе.\n\n * Самая внешняя область видимости: Она относится к любым встроенным именам, которые программа может вызывать. Указанное имя находится последним среди объектов в этой области."
    },
    "19": {
        "question": "Что такое докстринг в Python?",
        "answer": "Строки документации Python (или докстринги) предоставляют удобный способ связывания документации с модулями Python, функциями, классами и методами.\n\n * Объявление докстрингов: Докстринги объявляются с использованием тройных одинарных кавычек или тройных двойных кавычек прямо под объявлением класса, метода или функции. Все функции должны иметь докстринг.\n\n * Доступ к докстрингам: Докстринги можно получить, используя метод __doc__ объекта или с помощью функции help."
    },
    "20": {
        "question": "Что такое язык с динамической типизацией?",
        "answer": "Языки типизации - это языки, в которых мы определяем тип данных, и машина узнает его на этапе компиляции или во время выполнения. Языки типизации можно классифицировать на два типа:\n\n * Языки со статической типизацией: В этом типе языка тип данных переменной известен на этапе компиляции, что означает, что программист должен указать тип данных переменной во время ее объявления.\n\n * Языки с динамической типизацией: Это языки, для которых не требуется заранее определенный тип данных для переменной, так как он интерпретирован во время выполнения машиной. В таких языках интерпретаторы назначают тип данных переменной во время выполнения в зависимости от ее значения."
    },
    "21": {
        "question": "Что такое break, continue и pass в Python?",
        "answer": "Оператор break используется для завершения цикла или оператора, в котором он присутствует. После этого управление передается к операторам, которые находятся после оператора break, если они доступны.\n\nContinue также является оператором управления циклом, как и оператор break. Оператор continue противоположен оператору break: вместо завершения цикла он заставляет выполнить следующую итерацию цикла.\n\nPass означает выполнение нулевой операции или, другими словами, это заполнитель в составном операторе, где должна быть пустота и ничего не должно быть написано."
    },
    "22": {
        "question": "Какие встроенные типы данных существуют в Python?",
        "answer": "Следующие стандартные или встроенные типы данных существуют в Python:\n\n * Числовые: Числовой тип данных в Python представляет данные, имеющие числовое значение. Числовое значение может быть целым числом, числом с плавающей запятой, логическим значением или даже комплексным числом.\n\n * Тип последовательности: Тип данных последовательности в Python представляет собой упорядоченную коллекцию аналогичных или различных типов данных. В Python есть несколько типов последовательностей:\n\n  * Строка Python\n\n  * Список Python\n\n  * Кортеж Python\n\n  * Диапазон Python\n\nТипы отображений: В Python хешируемые данные могут быть отображены на произвольные объекты с использованием объекта отображения. В настоящее время существует только один общий тип отображения - словарь, и объекты отображения являются изменяемыми.\n\n  * Словарь Python\n\n * Типы множеств: В Python множество является неупорядоченной коллекцией типов данных, которая может быть перечислена, изменяема и не имеет повторяющихся элементов. Порядок элементов в множестве неопределен, хотя оно может состоять из различных элементов."
    },
    "23": {
        "question": "Как округлить число в Python?",
        "answer": "Модуль Python math включает метод, который можно использовать для вычисления наименьшего целого числа.\n\n  * Метод floor() в Python возвращает наименьшее целое число x, то есть наибольшее целое число, не превышающее x.\n\n  * Также метод ceil(x) в Python возвращает наименьшее целое число x, то есть наименьшее целое число, большее или равное x."
    },
    "24": {
        "question": "В чем разница между функциями xrange и range?",
        "answer": "range() и xrange() - это две функции, которые можно использовать для итерации определенного количества раз в циклах for в Python. В Python 3 нет функции xrange, но функция range ведет себя как xrange в Python 2.\n\n  * range() - это возвращает список чисел, созданных с использованием функции range().\n\n  * xrange() - эта функция возвращает объект-генератор, который можно использовать для отображения чисел только при помощи цикла. Отображается только определенный диапазон по требованию и, следовательно, называется ленивой оценкой."
    },
    "25": {
        "question": "Что такое Словарное Включение? Приведите пример",
        "answer": "Словарное включение - это конструкция синтаксиса, облегчающая создание словаря на основе существующего итерируемого объекта.\n\n Например: my_dict = {i:1+7 for i in range(1, 10)}"
    },
    "26": {
        "question": "Можно ли использовать Tuple Comprehension? Если да, как, и если нет, то почему?",
        "answer": "(i for i in (1, 2, 3))\n\nTuple comprehension в Python невозможно, потому что она приведет к генератору, а не к tuple comprehension."
    },
    "27": {
        "question": "В чем разница между Списком и Кортежем?",
        "answer": "Давайте проанализируем различия между Списком и Кортежем:\n\n * Список *\n\nСписки являются изменяемым типом данных.\n\nСписки занимают больше памяти.\n\nСписок лучше для выполнения операций, таких как вставка и удаление.\n\nПоследствия итераций занимают много времени.\n\n * Кортеж *\n\nКортежи являются неизменяемым типом данных.\n * Кортеж занимает меньше памяти по сравнению со списком.\n * Тип данных Кортеж подходит для доступа к элементам.\n * Последствия итераций относительно быстрее."
    },
    "28": {
        "question": "В чем разница между поверхностным и глубоким копированием?",
        "answer": "Поверхностное копирование используется, когда создается новый тип экземпляра, и сохраняются значения, которые копированы, в то время как глубокое копирование сохраняет значения, которые уже скопированы.\n\nПоверхностное копирование выполняется быстрее, в то время как глубокое копирование замедляет его."
    },
    "29": {
        "question": "Какой метод сортировки используется функциями sort() и sorted() в Python?",
        "answer": "Python использует алгоритм сортировки Tim Sort для сортировки. Это стабильная сортировка с худшим случаем O(N log N). Это гибридный алгоритм сортировки, производный от сортировки слиянием и сортировки вставками, разработанный для хорошей производительности на множестве реальных данных."
    },
    "30": {
        "question": "Что такое Декораторы?",
        "answer": "Декораторы - это очень мощный и полезный инструмент в Python, поскольку они являются специфическим изменением, которое мы вносим в синтаксис Python, чтобы легко изменять функции."
    },
    "31": {
        "question": "Как отлаживать программу на Python?",
        "answer": "Используя эту команду, мы можем отлаживать программу на Python:\n\n $ python -m pdb python-script.py"
    },
    "32": {
        "question": "Что такое итераторы в Python?",
        "answer": "В Python итераторы используются для итерации группы элементов, контейнеров, таких как список. Итераторы - это коллекции элементов, и они могут быть списком, кортежем или словарем. Итератор Python реализует методы __itr__ и next() для итерации по сохраненным элементам. Мы обычно используем циклы для итерации по коллекциям (список, кортеж) в Python."
    },
    "33": {
        "question": "Что такое генераторы в Python?",
        "answer": "В Python генератор - это способ, который указывает, как реализовать итераторы. Это обычная функция, за исключением того, что она возвращает выражение внутри функции. Она не реализует методы __itr__ и next() и также уменьшает другие накладные расходы.\n\nЕсли функция содержит хотя бы один оператор yield, она становится генератором. Ключевое слово yield приостанавливает текущее выполнение, сохраняя его состояние, и затем возобновляет его из того же состояния при необходимости."
    },
    "34": {
        "question": "Поддерживает ли Python множественное наследование?",
        "answer": "Python поддерживает множественное наследование, в отличие от Java. Множественное наследование означает, что класс может быть производным от более чем одного родительского класса."
    },
    "35": {
        "question": "Что такое полиморфизм в Python?",
        "answer": "Полиморфизм означает способность принимать несколько форм. Так, например, если у родительского класса есть метод с именем ABC, то у дочернего класса также может быть метод с тем же именем ABC, имеющий собственные параметры и переменные. Python поддерживает полиморфизм."
    },
    "36": {
        "question": "Что такое инкапсуляция в Python?",
        "answer": "Инкапсуляция означает связывание кода и данных вместе. Класс Python является примером инкапсуляции."
    },
    "37": {
        "question": "Как выполняется абстракция данных в Python?",
        "answer": "Абстракция данных предоставляет только необходимые детали и скрывает реализацию от мира. Это можно достичь в Python с помощью интерфейсов и абстрактных классов."
    },
    "38": {
        "question": "Как управляется память в Python?",
        "answer": "Python использует свое частное пространство кучи для управления памятью. Практически все объекты и структуры данных хранятся в частном пространстве кучи. Даже программист не может получить доступ к этому частному пространству, поскольку интерпретатор заботится об этом пространстве. У Python также есть встроенный сборщик мусора, который перерабатывает все неиспользуемую память, освобождает память и делает ее доступной для частного пространства кучи."
    },
    "39": {
        "question": "Как удалить файл с помощью Python?",
        "answer": "Мы можем удалить файл с помощью Python, следуя этим подходам:\n\n * os.remove()\n\n * os.unlink()"
    },
    "40": {
        "question": "Что такое срезка в Python?",
        "answer": "Срезка в Python - это операция над строкой для извлечения части строки или некоторой части списка. С помощью этого оператора можно указать, с какого места начать срезку, где закончить, и указать шаг. Срезка списка возвращает новый список из существующего списка.\n\nСинтаксис: Lst[Начальный : Конечный : ШагИндекса]"
    },
    "41": {
        "question": "Что такое пространство имен в Python?",
        "answer": "Пространство имен - это система именования, используемая для обеспечения уникальности имен и избежания конфликтов имен."
    },
    "42": {
        "question": "Что такое PIP?",
        "answer": "PIP - это акроним для Python Installer Package, который обеспечивает удобный интерфейс для установки различных модулей Python. Это инструмент командной строки, который может искать пакеты в Интернете и устанавливать их без взаимодействия с пользователем."
    },
    "43": {
        "question": "Что такое функция zip?",
        "answer": "Функция zip() в Python возвращает объект zip, который отображает схожий индекс нескольких контейнеров. Она принимает итерируемый объект, преобразует его в итератор и агрегирует элементы на основе переданных итерируемых объектов. Она возвращает итератор кортежей."
    },
    "44": {
        "question": "Что такое Pickling и Unpickling?",
        "answer": "Модуль Pickle принимает любой объект Python и преобразует его в строковое представление, а затем сохраняет его в файл с помощью функции dump; этот процесс называется pickling. Процесс извлечения исходных объектов Python из сохраненного строкового представления называется unpickling."
    },
    "45": {
        "question": "Что такое monkey patching в Python?",
        "answer": "В Python термин monkey patch относится только к динамическим модификациям класса или модуля во время выполнения.\n\n# g.py\nclass GeeksClass:\n   def function(self):\n      print 'function()'\n\n import m\n  def monkey_function(self):\n    print 'monkey_function()' \n\n m.GeeksClass.function = monkey_function\nobj = m.GeeksClass()\nobj.function()"
    },
    "46": {
        "question": "Что такое __init__() в Python?",
        "answer": "Эквивалент конструкторам в терминологии ООП, __init__ - это зарезервированный метод в классах Python. Метод __init__ вызывается автоматически при создании нового объекта. Этот метод выделяет память для нового объекта сразу же после его создания. Этот метод также может использоваться для инициализации переменных."
    },
    "47": {
        "question": "Напишите код для отображения текущего времени?",
        "answer": "currenttime= time.localtime(time.time())\nprint (“Current time is”, currenttime)"
    },
    "48": {
        "question": "Что такое модификаторы доступа в Python?",
        "answer": "Python использует символ '_' для определения управления доступом к определенному члену данных или методу класса. Класс в Python имеет три типа модификаторов доступа:\n\n  * Публичный модификатор доступа: Члены класса, объявленные как public, легко доступны из любой части программы. Все члены данных и методы класса по умолчанию являются public. \n\n  * Защищенный модификатор доступа: Члены класса, объявленные как protected, доступны только классу, который от него наследуется. Все члены данных класса объявляются как protected, добавив перед ними один символ подчеркивания '_'.\n\n  * Приватный модификатор доступа: Члены класса, объявленные как private, доступны только внутри класса, приватный модификатор доступа является наиболее безопасным. Члены данных класса объявляются как private, добавив перед ними два символа подчеркивания '__'."
    },
    "49": {
        "question": "Что такое юнит-тесты в Python?",
        "answer": "Юнит-тестирование - это первый уровень тестирования программного обеспечения, где тестируются самые маленькие тестируемые части программного обеспечения. Это используется для проверки того, что каждая единица программного обеспечения работает так, как задумано. В Python для юнит-тестирования используется фреймворк в стиле xUnit. Метод тестирования White Box используется для юнит-тестирования."
    },
    "50": {
        "question": "Что такое глобальная блокировка интерпретатора Python (GIL)?",
        "answer": "Глобальная блокировка интерпретатора Python (GIL) - это тип блокировки процесса, который используется Python при работе с процессами. Обычно Python использует только один поток для выполнения набора инструкций. Производительность однопоточного процесса и многопоточного процесса будет одинаковой в Python, и это из-за GIL в Python. Мы не можем добиться многопоточности в Python из-за глобальной блокировки интерпретатора, которая ограничивает потоки и работает как однопоточный процесс."
    },
    "51": {
        "question": "Что такое аннотации функций в Python?",
        "answer": "Аннотация функции - это функция, позволяющая добавлять метаданные к параметрам функции и возвращаемым значениям. Таким образом, можно указать тип ввода параметров функции и тип возвращаемого значения функции.\n\nАннотации функций - это произвольные выражения Python, которые ассоциируются с различными частями функций. Эти выражения вычисляются во время компиляции и не имеют жизни во время выполнения Python. Python не придает никакого значения этим аннотациям. Они оживают при интерпретации сторонними библиотеками, например, mypy."
    },
    "52": {
        "question": "Что такое группы исключений в Python?",
        "answer": "Последняя особенность Python 3.11 - группы исключений. ExceptionGroup можно обработать с использованием нового синтаксиса except*. Символ * указывает, что каждое except* может обрабатывать несколько исключений.\n\nExceptionGroup - это коллекция/группа различных видов исключений. Не создавая несколько исключений, мы можем сгруппировать различные исключения, которые позже можно будет извлечь по одному при необходимости, порядок, в котором исключения хранятся в группе исключений, не имеет значения при их вызове.\n\n try:\nraise ExceptionGroup('Пример ExceptionGroup', (\nTypeError('Пример TypeError'),\nValueError('Пример ValueError'),\nKeyError('Пример KeyError'),\nAttributeError('Пример AttributeError')\n))\nexcept* TypeError:\n...\nexcept* ValueError as e:\n... \nexcept* (KeyError, AttributeError) as e:\n..."
    },
    "53": {
        "question": "Что такое оператор переключения Python (Python Switch Statement)?",
        "answer": "Начиная с версии 3.10, Python реализовал функцию выбора switch case, называемую \"структурным сопоставлением образца\". Вы можете реализовать эту функцию с помощью ключевых слов match и case. Обратите внимание, что символ подчеркивания используется для определения значения по умолчанию для оператора переключения в Python.\n\n Примечание: До версии Python 3.10 Python не поддерживал операторы сопоставления. \n\n match term:\ncase pattern-1:\naction-1\ncase pattern-2:\naction-2\ncase pattern-3:\naction-3\ncase _:\naction-default"
    },
    "54": {
        "question": "Объясните, как Memcached не должен использоваться в вашем проекте на Python?",
        "answer": "• Распространенная ошибка при использовании Memcached - это использование его в качестве хранилища данных, а не в качестве кэша\n• Никогда не используйте Memcached в качестве единственного источника информации, необходимой для запуска вашего приложения. Данные всегда должны быть доступны через другой источник\n• Memcached - это просто хранилище ключей или значений и не может выполнять запросы к данным или перебирать содержимое для извлечения информации\n• Memcached не предоставляет никакой формы защиты, ни шифрования, ни аутентификации"
    },
    "55": {
        "question": "Объясните, что такое эффект Dogpile? Как можно предотвратить этот эффект?",
        "answer": "Эффект Dogpile - это ситуация, когда кэш истекает, и веб-сайты подвергаются множественным запросам, отправленным клиентом одновременно. Этот эффект можно предотвратить с помощью семафорного замка. В этой системе, когда значение истекает, первый процесс получает блокировку и начинает генерацию нового значения."
    },
    "56": {
        "question": "Упомяните, что такое Flask-WTF и каковы их особенности?",
        "answer": "Flask-WTF предлагает простую интеграцию с WTForms. Функции Flask WTF включают\n\n • Интеграция с wtforms\n• Безопасные формы с маркером csrf\n• Глобальная защита csrf\n• Интеграция интернационализации\n• Поддержка reCAPTCHA\n• Загрузка файлов, которая работает с загрузками Flask"
    },
    "57": {
        "question": "Упомяните, в чем разница между Django, Pyramid и Flask?",
        "answer": "Flask - это \"микрофреймворк\", в первую очередь предназначенный для небольших приложений с более простыми требованиями. В Flask вам придется использовать внешние библиотеки. Flask готов к использованию.\n\nPyramid предназначен для крупных приложений. Он обеспечивает гибкость и позволяет разработчику использовать правильные инструменты для своего проекта. Разработчик может выбирать базу данных, структуру URL, стиль шаблонизации и многое другое. Pyramid - это настраиваемый фреймворк.\n\nКак и Pyramid, Django также может использоваться для крупных приложений. Он включает ORM."
    },
    "58": {
        "question": "Что такое pep 8?",
        "answer": "PEP в Python означает Python Enhancement Proposal. Он включает в себя набор рекомендаций, которые описывают оптимальный подход к созданию и структурированию кода Python, чтобы обеспечить максимальную ясность и читаемость."
    },
    "59": {
        "question": "Каковы основные особенности Python?",
        "answer": "Основные особенности Python следующие:\n\n  * Python - интерпретируемый язык, поэтому перед выполнением его не нужно компилировать, в отличие от языков, таких как C.\n\n  * Python является динамически типизированным, поэтому нет необходимости объявлять переменную с типом данных. Интерпретатор Python определит тип данных на основе значения переменной.\n\n  * Python следует объектно-ориентированной парадигме программирования за исключением наличия спецификаторов доступа. Кроме спецификаторов доступа (ключевых слов public и private), в Python есть классы, наследование и все остальные стандартные концепции ООП.\n\n  * Python - это кроссплатформенный язык, то есть программа на Python, написанная в системе Windows, также будет работать в системе Linux с небольшими или без изменений вообще.\n\n  * Python буквально является языком общего назначения, то есть Python находит свое применение в различных областях, таких как разработка веб-приложений, автоматизация, наука о данных, машинное обучение и многое другое."
    },
    "60": {
        "question": "Что такое PYTHONPATH?",
        "answer": "PYTHONPATH служит в качестве переменной среды в языке программирования Python, позволяя пользователям определять дополнительные каталоги для поиска Python при поиске модулей и пакетов. Эта переменная служит в качестве пути поиска и помогает Python находить необходимые файлы для импорта при выполнении кода. Установив переменную PYTHONPATH, пользователи могут расширить стандартный путь поиска и настроить поведение поиска модулей в соответствии с их потребностями. Эта функция позволяет разработчикам эффективно организовывать и структурировать свои проекты на Python, облегчая импорт модулей и повышая повторное использование кода."
    },
    "61": {
        "question": "Что такое поверхностное и глубокое копирование в Python?",
        "answer": "При поверхностном копировании скопированный объект создает точную копию значений в исходном объекте, а при глубоком копировании он дублирует объекты, на которые ссылается исходный объект."
    },
    "62": {
        "question": "Что такое переиндексация в Pandas?",
        "answer": "Переиндексация в Pandas - это процесс создания нового объекта с данными, приведенными к новому индексу."
    },
    "63": {
        "question": "Зачем используется finalize в Python?",
        "answer": "Он используется для освобождения ненужных ресурсов и очистки мусора перед вызовом сборщика мусора."
    }
}