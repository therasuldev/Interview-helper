{
    "1": {
        "question": "Что такое iOS Swift?",
        "answer": "Swift - это скомпилированный и новый язык программирования, разработанный компанией Apple Inc в июне 2014 года для создания приложений для мобильных и настольных устройств. Этот язык работает для watchOS, macOS, iOS и tvOS.\n\nApple создала язык Swift для работы как с Cocoa Touch, так и с Cocoa. Swift поддерживает несколько операционных систем, таких как Free BSD, Linux, Darwin и т. д. Этот язык был разработан для работы с библиотекой Objective-C и фреймворком Cocoa в продуктах Apple."
    },
    "2": {
        "question": "Каковы преимущества использования Swift?",
        "answer": "Язык программирования Swift стремительно стал одним из самых быстрорастущих языков в истории. Swift позволяет нам создавать программное обеспечение, которое работает невероятно быстро, надежно и безопасно.\n\nЭтот язык является наиболее полезным языком программирования для разработки приложений для macOS и iOS (iPad и iPhone).\n\nСуществуют некоторые важные преимущества, предлагаемые при разработке приложений для macOS и iOS с использованием Swift.\n\n* Язык с открытым исходным кодом: Язык программирования Swift был создан как язык с открытым исходным кодом и открыт для всех, что упрощает обновление всех исходных кодов, списков рассылки и отслеживание ошибок на регулярной основе.\n* Легко изучить и поддерживать: Язык программирования Swift более прост и точен по сравнению с C/C++. Apple разработала свой язык программирования, чтобы он был легким в использовании, и синтаксисы взяты из языков программирования, таких как C#, Python и Ruby. Эти простые синтаксисы делают его более понятным. В Swift весь контент файлов реализации (.m) и заголовочных файлов (.h) объединены в один файл (.swift).\n* Поддержка нескольких устройств: Язык программирования Swift не ограничивается только поддержкой устройств Apple, он также поддерживает множество устройств технологического мира, таких как устройства на Linux и Windows.\n* Поддержка динамических библиотек: Динамические библиотеки - это исполняемые блоки кода, которые могут быть подключены к приложению. Эта функция позволяет использовать последний язык программирования Swift. В Swift динамические библиотеки напрямую загружаются в память, что приводит к снижению начального размера приложения и, в конечном итоге, увеличивает производительность приложения.\n* Опциональные типы: Опционал в Swift - это тип, который может содержать значение или не содержать его. Чтобы объявить опционал, мы можем использовать знак вопроса «?».\n8 Замыкания: Замыкания - это самодостаточные блоки функциональности, которые могут передаваться и использоваться в нашем коде."
    },
    "3": {
        "question": "Объясните Swift против Objective-C.",
        "answer": "Приведены ниже различия между Swift и Objective-C.\n\n1. Swift является объектно-ориентированным и функциональным языком программирования, в то время как Objective-C является классовым объектно-ориентированным языком программирования.\n2. Swift поддерживает динамические библиотеки, в то время как Objective-C не поддерживает динамические библиотеки.\n3. Swift поддерживает кортежи, в то время как Objective-C не поддерживает кортежи.\n4. В Swift точки с запятой не требуются, в то время как в Objective-C точки с запятой требуются.\n5. Swift является языком с открытым исходным кодом, в то время как Objective-C ограничен Apple и не является языком с открытым исходным кодом.\n6. Для объявления констант и переменных в Swift используются ключевые слова «let» и «var», в то время как в Objective-C переменные объявляются как «NSString», а константы как «int».\n7. Swift позволяет определять методы в структурах, классах или перечислениях, в то время как Objective-C не позволяет этого.\n8. В Swift мы можем определять классы в одном файле (.swift), в то время как в Objective-C мы создаем отдельные файлы интерфейса (.h) для классов и файлы реализации (.m) для классов."
    },
    "4": {
        "question": "Где можно тестировать приложения для iPhone, если у нас нет устройства iOS?",
        "answer": "Если у нас нет устройства iOS, мы можем тестировать наше приложение на симуляторе, предоставляемом Apple на компьютере Mac."
    },
    "5": {
        "question": "Какие инструменты необходимы для разработки приложений для iOS?",
        "answer": "Вот несколько необходимых инструментов, которые нам понадобятся:\n\n* Mac/MacMini: Необходимо получить компьютер Mac с процессором на базе Intel и запущенной операционной системой Mac OS. Но не волнуйтесь, если у вас есть собственный ПК, вы все равно можете разрабатывать приложения для iOS через Mac Mini.\n* Xcode: Xcode - это среда разработки Apple (Integrated Development Environment), используемая для создания приложений как для iOS, так и для macOS. Он предоставляет нам визуальный редактор макета и редактор кода, который может работать с логикой, пользовательским интерфейсом и ответами на события.\n* Язык программирования Swift: В редакторе кода логика будет написана на языке программирования, изобретенном Apple, называемом Swift.\n* Программа разработчика Apple: Эта программа позволяет разработчику разместить наше приложение в App Store, чтобы клиенты и загрузчики со всего мира могли загружать и использовать наше приложение."
    },
    "6": {
        "question": "Каковы наиболее важные особенности Swift?",
        "answer": "Некоторые важные особенности Swift приведены ниже:\n* Более впечатляющие структуры и перечисления\n* Протоколо-ориентированный\n* Опциональные типы\n* Безопасность типов и язык вывода типов\n* Не требуется использование точек с запятой\n* Принудительная инициализация\n* По умолчанию безопасно\n* Меньше кода, меньше файлов\n* Принудительная распаковка\n* Кортежи\n* Замыкания\n* Намного быстрее по сравнению с другими языками."
    },
    "7": {
        "question": "Объясните общие состояния выполнения для приложения Swift iOS (Жизненный цикл приложения iOS).",
        "answer": "5 общих состояний выполнения следующие:\n* Not Running: Это простое состояние, в котором наше приложение не запущено или код не выполняется и завершено системой, приложение полностью выключено.\n* Inactive: Это состояние просто переходное. Неактивное состояние означает, что наше приложение запущено в фоновом режиме, но не может получать события.\n* Active: Активное состояние - это основное состояние выполнения, в котором наше приложение запущено в фоновом режиме и способно получать события.\n* Background: Это состояние, в котором наше приложение работает в фоновом режиме и все еще способно выполнять код в фоновом режиме.\n* Suspended: Это состояние означает, что наше приложение работает в фоновом режиме, и система приостанавливает его работу, и приложение не может выполнять никакой код."
    },
    "8": {
        "question": "Является ли Swift объектно-ориентированным языком программирования?",
        "answer": "Да, Swift - это объектно-ориентированный язык программирования."
    },
    "9": {
        "question": "Какие типы объектов являются базовыми типами данных в Swift?",
        "answer": "Swift использует стандартный набор базовых типов данных для различных целей, таких как логические значения, числа и строки.\n\n* Int: int используется для хранения целочисленного значения.\n* Double и Float: Double и Float в Swift считаются при работе с десятичными числами.\n* Bool: Тип bool используется для хранения логического значения. В Swift он использует условия true и false.\n* String: В литералах String пользователь определяет текст, заключенный в двойные кавычки.\n* Массивы: Массивы - это коллекция элементов списка.\n* Словари: Словарь - это неупорядоченная коллекция элементов определенного типа, связанных с уникальным ключом."
    },
    "10": {
        "question": "Что такое init() в Swift?",
        "answer": "Инициализация - это процесс подготовки экземпляра перечисления, структуры или класса к использованию.\n\nИнициализаторы также вызываются для создания нового экземпляра определенного типа. Инициализатор - это метод экземпляра без параметров. С помощью инициализатора мы можем написать ключевое слово init."
    },
    "11": {
        "question": "Какие операторы передачи управления используются в iOS Swift?",
        "answer": "Операторы передачи управления, используемые в iOS Swift, включают:\n\n1. Возврат (Return)\n2. Прерывание (Break)\n3. Продолжение (Continue)\n4. Падение в следующий (Fallthrough)"
    },
    "12": {
        "question": "В чем разница между Let и Var в Swift?",
        "answer": "В языке Swift мы можем объявлять константы и переменные с использованием ключевых слов Let и Var.\n\n(i) Let: Ключевое слово Let является неизменным, оно используется для объявления константной переменной, и значение константной переменной не может быть изменено после инициализации.\n\nНапример: let myAge = 25\n\nМы не можем изменить значение возраста, вы можете объявить константное значение только один раз, используя ключевое слово let.\n\n(ii) Var: Ключевое слово Var является изменчивым и используется для объявления переменной переменной. Эти переменные могут изменяться во время выполнения."
    },
    "13": {
        "question": "Как добавить элемент в массив?",
        "answer": "Массивы являются одним из наиболее используемых типов данных в приложении. Мы используем массивы для организации данных нашего приложения.\n\nSwift позволяет легко создавать массив в нашем коде с использованием литерала массива. Элементы массива просто окружены запятой, и список значений разделен квадратными скобками."
    },
    "14": {
        "question": "Какой JSON-фреймворк поддерживается iOS?",
        "answer": "Фреймворк SBJson поддерживается iOS. Фреймворк SBJson предоставляет дополнительное управление и гибкий API, что упрощает обработку JSON. Это хороший и очень гибкий фреймворк, который поддерживает гибкое функционирование API."
    },
    "15": {
        "question": "Что такое PLIST в iOS?",
        "answer": "PLIST означает Property List. PLIST - это в основном словарь значений и ключей, который может быть сохранен в нашей файловой системе с расширением файла .plist. Property List используется в качестве портативного и легкого средства для хранения небольшого объема данных. Они обычно записываются в XML.\n\nНиже перечислены различные типы свойств:\n\n* Бинарный список свойств (Binary Property List)\n* XML-список свойств (XML Property List)\n* Старый ASCII-список свойств (ASCII Legacy Property List)"
    },
    "16": {
        "question": "Что такое словарь?",
        "answer": "Словари представляют собой ассоциацию неупорядоченной коллекции пар ключ-значение. Каждому значению сопоставляется уникальный ключ, который является хэшируемым типом, таким как число или строка. Мы можем использовать концепцию словаря в языке программирования Swift, когда хотим получить значения на основе ключевого значения."
    },
    "17": {
        "question": "Что такое Протокол в Swift?",
        "answer": "Протокол - очень распространенная особенность языка программирования Swift, и протокол - это концепция, аналогичная интерфейсу из Java. Протокол определяет чертеж свойств, методов и других требований, подходящих для определенной задачи.\n\nВ своей простейшей форме протокол - это интерфейс, который описывает некоторые методы и свойства. Протокол просто описывается как скелет свойств или методов, а не как реализация. Реализация свойств и методов может быть выполнена путем определения перечислений, функций и классов.\n\nПротоколы объявляются после имени типов структуры, перечисления или класса. Возможно одиночное и множественное объявление протоколов. Несколько протоколов разделяются запятыми."
    },
    "18": {
        "question": "Что такое делегат в Swift?",
        "answer": "Делегат - это шаблон проектирования, который используется для передачи данных или связи между структурами или классами. Делегат позволяет отправлять сообщение от одного объекта к другому объекту, когда происходит определенное событие, и используется для обработки событий таблицы и коллекции.\n\nДелегаты имеют отношение один к одному и одному к одному общению."
    },
    "19": {
        "question": "Как использовать двойной вопросительный знак \"??\" в Swift?",
        "answer": "Двойной вопросительный знак \"??\" - это оператор слияния с nil, он в основном является сокращением для тернарного условного оператора, в котором мы проверяем на nil. Двойной вопросительный знак также используется для предоставления значения по умолчанию для переменной.\n\nstringVar ?? \"default string\"\n\nЭто ровно то же самое, если stringVar не является nil, то он возвращается, в противном случае возвращается \"default string\"."
    },
    "20": {
        "question": "Что такое оператор GUARD? Какова выгода от использования оператора GUARD в Swift?",
        "answer": "Оператор GUARD используется для выхода из области видимости программы, когда одно или несколько условий не выполняются. Использование этого оператора помогает избежать \"пирамиды ада\"."
    },
    "21": {
        "question": "Какие типы коллекций доступны в Swift?",
        "answer": "В Swift доступны три основных типа коллекций для хранения коллекции значений. Это словари, множества и массивы.\n\n1. Массивы: Массивы - это упорядоченная коллекция значений, которая хранится в одном типе значений в упорядоченном списке.\n\n2. Множества: Множества - это неупорядоченная коллекция уникальных значений, которые хранятся в отдельных значениях того же типа в коллекции без определенного порядка.\n\n3. Словари: Словари - это неупорядоченная коллекция пар ключ-значение в неупорядоченном порядке."
    },
    "22": {
        "question": "Что такое \"defer\"?",
        "answer": "\"Defer\" - это ключевое слово, которое предоставляет блок кода, который может быть выполнен при выходе из текущей области видимости."
    },
    "23": {
        "question": "Что такое Кортеж? Как создать Кортеж в Swift?",
        "answer": "Кортеж - это группа различных значений в одном составном значении. Это упорядоченный список элементов. Есть два способа доступа к данным объекта в кортеже: по имени или по позиции.\n\nВ Swift кортеж может состоять из нескольких различных типов. Он может содержать два значения: одно целочисленного типа, а другое строкового типа. Это легальная команда."
    },
    "24": {
        "question": "В чем разница между Array и NSArray?",
        "answer": "Разница между Array и NSArray заключается в следующем:\n\n* Массив может содержать только один тип данных, в то время как NSArray может содержать разные типы данных.\n* Массив - это тип значения, в то время как NSArray - это неизменяемый ссылочный тип."
    },
    "25": {
        "question": "В чем разница между классом и структурой?",
        "answer": "Разница между классом и структурой заключается в следующем:\n\n1. Классы - это типы ссылок, в то время как структуры - это типы значений.\n2. Классы могут быть построены на основе других классов, в то время как структуры не могут наследовать друг от друга.\n3. У классов есть наследование, в то время как у структур его нет.\n4. В классах мы можем создать экземпляр с использованием ключевого слова 'let' и попытаться изменить его свойство, в то время как у структур нет изменяемости.\n5. У классов есть приведение типов, в то время как у структур его нет."
    },
    "26": {
        "question": "Какие лучшие способы достижения параллелизма в iOS?",
        "answer": "Три лучших способа достижения параллелизма в iOS:\n\n* Очереди исполнения (Dispatch queues)\n* Потоки (Threads)\n* Очереди операций (Operation queues)"
    },
    "27": {
        "question": "Как создать константу в программировании на Swift?",
        "answer": "Чтобы создать константу в программировании на Swift, используйте ключевое слово 'let'."
    },
    "28": {
        "question": "Как передать данные между контроллерами представлений?",
        "answer": "Существует три способа передачи данных между контроллерами представлений:\n\n1. Использование сегвея в методе 'prepareForSegue' (вперед).\n2. Прямое установление переменной (назад).\n3. Использование делегирования (назад)."
    },
    "29": {
        "question": "Как можно определить базовый класс в Swift?",
        "answer": "В Swift классы не явно наследуются от базового класса. Если суперкласс не указан, класс считается базовым по умолчанию."
    },
    "30": {
        "question": "Как сделать свойство необязательным в Swift?",
        "answer": "Чтобы сделать свойство необязательным в Swift, объявите его с вопросительным знаком '?' после его типа. Это позволяет свойству содержать значение или быть 'nil'."
    },
    "31": {
        "question": "Кто вызывает главную функцию нашего приложения во время цикла запуска приложения?",
        "answer": "Главный поток вызывает главную функцию нашего приложения. Во время цикла запуска приложения система создает главный поток для приложения и вызывает главную функцию приложения на этом главном потоке."
    },
    "32": {
        "question": "Что такое элементы пользовательского интерфейса (UI elements)?",
        "answer": "Элементы пользовательского интерфейса - это визуальные компоненты, такие как изображения, кнопки, метки, текстовые поля и т. д., которые видны пользователю в приложении."
    },
    "33": {
        "question": "Какой является суперклассом всех объектов контроллера представлений?",
        "answer": "Класс UIViewController является суперклассом всех объектов контроллера представлений в iOS. Он предоставляет функциональность для отображения представлений, загрузки представлений и реагирования на повороты устройства."
    },
    "34": {
        "question": "Какие новые функции появились в Swift 4.0?",
        "answer": "Новые функции в Swift 4.0 включают в себя:\n\n* Более быстрые и простые в использовании строки с правильной поддержкой Unicode.\n* Кортежи и множественные возвращаемые значения.\n* Встроенная обработка ошибок с использованием ключевых слов throw/try/catch.\n* Поддержка сериализации в структуры."
    },
    "35": {
        "question": "Как написать многострочный комментарий на Swift?",
        "answer": "Многострочный комментарий на Swift записывается между '/*' в начале и '*/' в конце."
    },
    "36": {
        "question": "Какие элементы источника используются в Xcode?",
        "answer": "Xcode использует четыре различных типа элементов источника, как указано ниже:\n\n* Framework (Фреймворк)\n* Source Group (Группа исходных файлов)\n* Source File (Исходный файл)\n* Source Folder (Папка с исходным кодом)"
    },
    "37": {
        "question": "Какие различные способы передачи данных в Swift?",
        "answer": "Существует несколько способов передачи данных в Swift, такие как KVO, делегирование, уведомления NSNotification и обратные вызовы, целевые действия (Target-Action), и т. д."
    },
    "38": {
        "question": "Объясните использование класса и преимущества наследования.",
        "answer": "Это:\n\n* Повторное использование реализации\n* Подкласс обеспечивает динамическую диспетчеризацию.\n* Подкласс обеспечивает повторное использование интерфейса.\n* Модульность\n* Переопределение предоставляет механизм для настройки."
    },
    "39": {
        "question": "Объясните некоторые общие функции протоколов и суперклассов.",
        "answer": "Некоторые общие функции протоколов и суперклассов приведены ниже:\n\n* Повторное использование интерфейса.\n* Повторное использование реализации.\n* Поддержка модульного дизайна.\n* Предоставление точек для настройки."
    },
    "40": {
        "question": "Объясните некоторые основные изменения в UserNotifications.",
        "answer": "Некоторые крупные изменения в UserNotifications приведены ниже:\n\n* Позволяет добавлять изображения, звук и видео.\n* Позволяет создавать пользовательские интерфейсы для уведомлений.\n* Позволяет управлять уведомлениями с помощью интерфейса в центре уведомлений."
    },
    "41": {
        "question": "Что такое цепочка опционалов (Optional chaining)?",
        "answer": "Цепочка опционалов (Optional chaining) - это полезный процесс, который мы можем использовать в сочетании с опционалами для вызова методов, свойств и подсценариев на опционалах, и эти значения могут быть nil или не nil. В этом процессе мы можем попытаться извлечь значение из цепочки опциональных значений.\n\n* Если опционал содержит значение, то вызов индексатора, метода или свойства опционала вернет значение.\n* Если опционал равен nil, то вызов индексатора, метода и свойства вернет nil."
    },
    "42": {
        "question": "Что такое опциональное привязывание (Optional binding)?",
        "answer": "Концепция опционального привязывания (Optional Binding) используется для определения того, содержит ли опционал значение, и делает это значение доступным в качестве переменной или временной константы. Мы используем концепцию опционального привязывания для проверки, содержит ли опционал значение или нет.\n\nОпциональное привязывание может использоваться с условными операторами (if и while) для проверки значения внутри опционала."
    },
    "43": {
        "question": "Какие функции высшего порядка существуют в Swift?",
        "answer": "Функции высшего порядка в Swift включают в себя:\n\n* Map: Преобразование содержимого массива.\n* Reduce: Сведение значений в коллекции к одному значению.\n* Sort: Сортировка массивов.\n* Filter: Фильтрация содержимого массива."
    },
    "44": {
        "question": "Объясните некоторые шаблоны проектирования, которые обычно используются в процессе разработки приложений.",
        "answer": "Шаблоны проектирования, используемые в процессе разработки приложений, включают в себя:\n\n* Поведенческие: Memento и Observer.\n* Создающие: Builder, Factory и Singleton.\n* Структурные: Facade, Adapter и Decorator."
    },
    "45": {
        "question": "Какие существуют различные способы извлечения значения из опционала в Swift?",
        "answer": "Существует семь способов извлечения значения из опционала в Swift. Они включают в себя:\n\n* Оператор guard: безопасный.\n* Принудительное извлечение: с использованием оператора “!” - небезопасный.\n* Опциональное привязывание: безопасное.\n* Опциональный шаблон: безопасное.\n* Оператор объединения с nil: безопасное.\n* Неявное объявление переменной с принудительной развязкой: небезопасное во многих случаях.\n* Цепочка опционалов: безопасное."
    },
    "46": {
        "question": "Какие механизмы поддерживает iOS для многопоточности?",
        "answer": "Это:\n\n* NSThread: Он может создавать поток низкого уровня, который может быть запущен с использованием метода “start”.\n* NSOperationQueue: Он позволяет создавать пул потоков и используется для выполнения “NSOperations” параллельно."
    },
    "47": {
        "question": "Что такое модуль Swift?",
        "answer": "* Модуль - это единица распределения кода.\n* Фреймворк или приложение создаются и поставляются как одна единица, которую можно импортировать другим модулем с использованием ключевого слова import Swift.\n* Каждая цель сборки в инструменте Xcode рассматривается как отдельный модуль в Swift."
    },
    "48": {
        "question": "Объясните Core Data.",
        "answer": "Core Data - один из самых мощных фреймворков, предоставленных Apple для приложений macOS и iOS. Core Data используется для управления объектами слоя модели в наших приложениях. Мы можем рассматривать Core Data как фреймворк для фильтрации, изменения, сохранения и отслеживания данных в приложениях iOS. Core Data не является реляционной базой данных.\n\nИспользуя Core Data, мы можем легко сопоставить объекты в нашем приложении с записями таблицы в базе данных, не зная никакого SQL. Core Data - это M в структуре MVC.\n\nНекоторые особенности Core Data приведены ниже для вашего справочника:\n\n* Эффективная интеграция с инструментами iOS и macOS.\n* Организация, фильтрация и группировка данных в памяти и в пользовательском интерфейсе.\n* Автоматическая поддержка сохранения объектов.\n* Автоматическая проверка значений свойств.\n* Первый фреймворк для управления графом объектов.\n* Фреймворк Core Data для управления жизненным циклом объекта в графе объектов."
    }
}