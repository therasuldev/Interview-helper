{
    "1": {
        "question": "Что такое язык программирования Ruby?",
        "answer": "Ruby - это динамический, рефлективный, общего назначения, открытый исходный код, который ориентирован на простоту и продуктивность. Ruby имеет смешанные особенности Perl, Smalltalk, Eiffel, Ada и Lisp. Ruby был разработан для создания нового языка, который обеспечивает баланс функциональности императивных языков."
    },
    "2": {
        "question": "Кто разработчик Ruby?",
        "answer": "Ruby разработан и создан Юкихиро 'марц' Мацумото в середине 1990-х годов в Японии."
    },
    "3": {
        "question": "Почему Ruby известен как язык гибкости?",
        "answer": "Ruby известен как язык гибкости, потому что он облегчает своему автору изменение элементов программирования. Некоторые конкретные части языка могут быть удалены или переопределены. Ruby не ограничивает пользователя. Например, для сложения двух чисел Ruby позволяет использовать знак + или слово 'плюс'. Это изменение можно сделать с помощью встроенного класса Ruby Numeric."
    },
    "4": {
        "question": "Перечислите некоторые особенности Ruby?",
        "answer": "Ruby имеет много особенностей. Некоторые из них перечислены ниже.\n\n* Объектно-ориентированный\n* Гибкий\n* Динамическая типизация и утиная типизация\n* Сборщик мусора\n* Именованные аргументы"
    },
    "5": {
        "question": "Что такое классы библиотек в Ruby?",
        "answer": "Классы библиотек Ruby содержат различные области применения, такие как многопоточное программирование, типы данных, различные области. Вот список областей, которые имеют соответствующие классы библиотек:\n\n* Обработка текста\n* CGI-программирование\n* Сетевое программирование\n* GUI-программирование\n* Программирование XML"
    },
    "6": {
        "question": "Назовите некоторые операторы, используемые в Ruby.",
        "answer": "Операторы - это символы, которые используются для выполнения различных операций.\n\n* Унарный оператор\n* Арифметический оператор\n* Побитовый оператор\n* Логический оператор\n* Тернарный оператор"
    },
    "7": {
        "question": "Что такое RubyGems в языке программирования Ruby?",
        "answer": "RubyGems обеспечивает стандартный формат для распространения программ и библиотек на языке Ruby. Он работает как менеджер пакетов для языка программирования Ruby."
    },
    "8": {
        "question": "Что такое переменные Ruby.",
        "answer": "Переменные Ruby содержат данные, которые могут быть использованы позже в программе. Каждая переменная действует как память и имеет разное имя.\n\n* Локальная переменная\n* Переменная класса\n* Переменная экземпляра\n* Глобальная переменная"
    },
    "9": {
        "question": "Как использовать load и require в Ruby?",
        "answer": "В Ruby load и require используются для загрузки доступного кода в текущий код. В случаях, когда требуется загрузка кода каждый раз при его изменении или каждый раз, когда кто-то переходит по URL, рекомендуется использовать 'load'.\n\nВ случае автозагрузки рекомендуется использовать 'require'."
    },
    "10": {
        "question": "Объясните оператор case в Ruby.",
        "answer": "В Ruby мы используем 'case' вместо 'switch' и 'when' вместо 'case'. Оператор case сопоставляет одно выражение с несколькими условиями, подобно оператору switch в других языках."
    },
    "11": {
        "question": "Объясните цикл for в Ruby.",
        "answer": "Цикл for Ruby выполняется над определенным диапазоном чисел. Следовательно, цикл for используется, если в программе имеется фиксированное количество итераций.\n\nЦикл for Ruby будет выполняться один раз для каждого элемента в выражении."
    },
    "12": {
        "question": "Объясните цикл while в Ruby.",
        "answer": "Цикл while Ruby используется для итерации программы несколько раз. Если количество итераций не фиксировано"
    },
    "13": {
        "question": "Объясните цикл do while в Ruby.",
        "answer": "Цикл do while Ruby выполняет часть программы несколько раз. В этом случае цикл будет выполнен как минимум один раз, потому что условие do while написано в конце."
    },
    "14": {
        "question": "Объясните цикл until в Ruby.",
        "answer": "Цикл until Ruby работает до тех пор, пока заданное условие не станет истинным. Он выходит из цикла, когда условие становится истинным. Это противоположно циклу while."
    },
    "15": {
        "question": "Объясните оператор break в Ruby.",
        "answer": "Оператор break в Ruby используется для завершения цикла. Он чаще всего используется в цикле while, где значение печатается до тех пор, пока условие истинно."
    },
    "16": {
        "question": "Объясните оператор next в Ruby.",
        "answer": "Оператор next в Ruby используется для пропуска следующей итерации цикла. После выполнения оператора next дальнейшие итерации не выполняются."
    },
    "17": {
        "question": "Объясните оператор redo в Ruby.",
        "answer": "Оператор redo в Ruby используется для повторения текущей итерации цикла. Оператор redo выполняется без оценки условия цикла."
    },
    "18": {
        "question": "Объясните оператор retry в Ruby.",
        "answer": "Оператор retry в Ruby используется для повторения всей итерации цикла с самого начала."
    },
    "19": {
        "question": "Как вы будете комментировать в Ruby?",
        "answer": "Комментарии Ruby - это неисполняемые строки в программе. Они не участвуют в выполнении программы.\n\nСинтаксис однострочного комментария:\n# Это однострочный комментарий.\n\nСинтаксис многострочного комментария:\n=начало\nЭто\nмногострочный\nкомментарий\n=конец"
    },
    "20": {
        "question": "Объясните объект Ruby.",
        "answer": "Объект - это корневой объект всех объектов Ruby. Объекты Ruby наследуются от BasicObject, что позволяет создавать альтернативные иерархии объектов."
    },
    "21": {
        "question": "Как создать объект Ruby?",
        "answer": "Объекты в Ruby создаются вызовом метода new класса. Это уникальный тип метода и предопределен в библиотеке Ruby.\nСинтаксис:\nимяОбъекта=имяКласса.new"
    },
    "22": {
        "question": "Объясните класс Ruby.",
        "answer": "Каждый класс Ruby - это экземпляр класса Ruby. Классы в Ruby являются объектами первого класса. Они всегда начинаются с ключевого слова class, за которым следует имя класса.\n\nСинтаксис:\n\nclass ИмяКласса\nкод...\nend"
    },
    "23": {
        "question": "Определите методы Ruby.",
        "answer": "Методы Ruby предотвращают нас от написания одного и того же кода в программе снова и снова. Методы Ruby аналогичны функциям в других языках."
    },
    "24": {
        "question": "Что такое блоки Ruby?",
        "answer": "Блоки кода Ruby называются замыканиями в других языках программирования. Они состоят из группы кода, которая всегда заключена в фигурные скобки или написана между do...end."
    },
    "25": {
        "question": "На сколько способов можно написать блок в Ruby?",
        "answer": "Блок можно написать двумя способами:\n\n* Многострочный между do и end\n* Встроенный между фигурными скобками {}\nОба способа идентичны и обладают одинаковым функционалом."
    },
    "26": {
        "question": "Что такое оператор yield в Ruby?",
        "answer": "Оператор yield используется для вызова блока внутри метода с значением."
    },
    "27": {
        "question": "Объясните параметр амперсанд (&block) в Ruby.",
        "answer": "&block - это способ передачи ссылки (вместо локальной переменной) на блок в метод.\n\nЗдесь слово block после & является всего лишь именем для ссылки, вместо этого можно использовать любое другое имя."
    },
    "28": {
        "question": "Объясните модуль Ruby.",
        "answer": "Модуль Ruby - это набор методов и констант. Метод модуля может быть экземплярным методом или модульным методом. Они аналогичны классам, так как содержат набор методов, определения классов, константы и другие модули. Они определяются как классы. Объекты или подклассы не могут быть созданы с использованием модулей. В модулях нет иерархии наследования.\n\nМодули выполняют две основные функции:\n* Они действуют как пространства имен. Они предотвращают конфликты имен.\n* Они позволяют использовать смешивание для обмена функциональностью между классами.\n Имя модуля должно начинаться с заглавной буквы.\n Синтаксис:\n модуль ИмяМодуля\nуказание1\nуказание2\n...........\nend"
    },
    "29": {
        "question": "Объясните миксины модулей в Ruby.",
        "answer": "Ruby не поддерживает множественное наследование. Модули устраняют необходимость в множественном наследовании с использованием миксинов в Ruby.\n\nМодуль не имеет экземпляров, потому что он не является классом. Однако модуль можно включить внутри класса.\n\nКогда вы включаете модуль внутри класса, класс получает доступ к методам модуля."
    },
    "30": {
        "question": "Объясните строки Ruby.",
        "answer": "Объект строки Ruby хранит и обрабатывает произвольную последовательность байтов, обычно представляющих символы. Они создаются с помощью String::new или в виде литералов."
    },
    "31": {
        "question": "Как получить доступ к элементам строк Ruby в приложении.",
        "answer": "Вы можете получить доступ к элементам строк Ruby в разных частях с помощью квадратных скобок []. Внутри квадратных скобок напишите индекс или строку."
    },
    "32": {
        "question": "Как написать многострочную строку в Ruby.",
        "answer": "Написание многострочной строки очень просто на языке Ruby. Мы покажем три способа вывода многострочной строки.\n\n* Строку можно написать в двойных кавычках.\n* Используется символ %, а строка заключается в символ /.\n* В синтаксисе heredoc мы используем << и строка заключается в слове STRING."
    },
    "33": {
        "question": "Для чего используется глобальная переменная $ в Ruby?",
        "answer": "Глобальная переменная объявляется в Ruby, и вы можете получить к ней доступ в любом месте приложения, потому что она имеет полный объем в приложении. Глобальные переменные используются в Ruby с префиксом $."
    },
    "34": {
        "question": "Что такое конкатенация строк в Ruby. Сколько способов существует для создания конкатенации строк.",
        "answer": "Конкатенация строк в Ruby подразумевает создание одной строки из нескольких строк. Вы можете объединить более одной строки, чтобы сформировать единую строку, конкатенируя их.\n\nСуществует четыре способа конкатенации строк Ruby в одну строку:\n* Использование знака плюс (+) между строками.\n* Использование одного пробела между строками.\n* Использование знака << между строками.\n* Использование метода concat между строками."
    },
    "35": {
        "question": "Что такое замораживание строк в Ruby.",
        "answer": "В большинстве языков программирования строки являются неизменяемыми. Это означает, что существующую строку нельзя изменить, можно только создать новую строку на их основе.\n\nВ Ruby строки по умолчанию не являются неизменяемыми. Чтобы сделать их неизменяемыми, можно использовать метод freeze."
    },
    "36": {
        "question": "На сколько способов можно сравнивать строки Ruby?",
        "answer": "Строки Ruby можно сравнивать тремя операторами:\n\n* С оператором == : Возвращает true или false\n* С оператором eql? : Возвращает true или false\n* С методом casecmp : Возвращает 0 при совпадении или 1 при несовпадении"
    },
    "37": {
        "question": "Что такое классовые библиотеки в Ruby?",
        "answer": "Классовые библиотеки Ruby содержат различные области, такие как программирование потоков, типы данных, различные области. Вот список областей, для которых существуют соответствующие классовые библиотеки:\n\n* Обработка текста\n* Программирование CGI\n* Сетевое программирование\n* Программирование графического интерфейса\n* Программирование XML"
    },
    "38": {
        "question": "Что такое массивы Ruby и как они могут быть созданы?",
        "answer": "Массивы Ruby - это упорядоченные коллекции объектов. Они могут содержать объекты, такие как целые числа, числа, хэши, строки, символы или любой другой массив.\n\nИндексация начинается с 0. Отрицательный индекс начинается с -1 с конца массива. Например, -1 указывает на последний элемент массива, а 0 указывает на первый элемент массива.\n\nМассив Ruby можно создать несколькими способами.\n\n* Используя литеральный конструктор []\n* Используя метод класса new"
    },
    "39": {
        "question": "Как получить доступ к элементам массивов Ruby? Сколько методов используется для доступа к элементам Ruby?",
        "answer": "Элементы массивов Ruby можно получить с помощью метода #[]. Вы можете передать один или несколько аргументов или даже диапазон аргументов.\n\nМетоды, используемые для доступа к элементам Ruby:\n\n* Метод at\n* Метод slice\n* Метод fetch\n* Методы first и last\n* Метод take\n* Метод drop"
    },
    "40": {
        "question": "На сколько способов можно добавить элементы в массив в Ruby?",
        "answer": "Элементы массивов Ruby можно добавить различными способами.\n\n* push или <<\n* unshift\n* insert"
    },
    "41": {
        "question": "На сколько способов можно удалить элементы из массива в Ruby?",
        "answer": "Элементы массивов Ruby можно удалить различными способами.\n\n* pop\n* shift\n* delete\n* uniq"
    },
    "42": {
        "question": "Объясните хэши Ruby.",
        "answer": "Хэш Ruby - это коллекция уникальных ключей и их значений. Они аналогичны массивам, но массивы используют целые числа в качестве индекса, а хэши могут использовать любой тип объекта. Их также называют ассоциативными массивами, словарями или картами.\n\nЕсли к хэшу обращаются с ключом, который не существует, метод вернет nil."
    },
    "43": {
        "question": "Как создать новый экземпляр времени в Ruby?",
        "answer": "Новый экземпляр времени можно создать с помощью ::new. Это будет использовать текущее время вашей системы. Части времени, такие как год, месяц, день, час, минута и т. д., также могут быть переданы.\n\nПри создании нового экземпляра времени нужно передать как минимум год. Если передан только год, то время по умолчанию будет 1 января этого года в 00:00:00 с текущим часовым поясом системы."
    },
    "44": {
        "question": "Объясните диапазоны Ruby. Какие способы определения диапазонов существуют?",
        "answer": "Диапазон Ruby представляет собой набор значений с началом и концом. Их можно создать с использованием литералов s..e и s...e или с помощью ::new.\n\nДиапазоны, в которых содержится .., работают от начала до конца включительно. Диапазоны, в которых содержится ..., работают исключительно для конечного значения.\n\nВ Ruby существует несколько способов определения диапазонов.\n\n * Диапазоны как последовательности\n * Диапазоны как условия\n * Диапазоны как интервалы"
    },
    "45": {
        "question": "Что такое итераторы Ruby?",
        "answer": "Итератор - это концепция, используемая в объектно-ориентированных языках. Итерация означает выполнение одного действия много раз, как цикл.\n\nМетод loop является самым простым итератором. Он возвращает все элементы из коллекции один за другим. Массивы и хэши относятся к категории коллекций."
    },
    "46": {
        "question": "Сколько итераторов существует в Ruby?",
        "answer": "В Ruby существуют следующие итераторы:\n\n* Итератор each\n* Итератор times\n* Итератор upto и downto\n* Итератор step\n* Итератор each_line"
    },
    "47": {
        "question": "Назовите различные методы для ввода-вывода в консоль в Ruby?",
        "answer": "Консоль ввода-вывода предоставляет различные методы для взаимодействия с консолью. Класс IO предоставляет следующие основные методы:\n\n* IO::console\n* IO#raw#raw!\n* IO#cooked\n* IO#cooked!\n* IO#getch"
    },
    "48": {
        "question": "Как открыть файл в Ruby?",
        "answer": "Файл в Ruby можно создать с использованием различных методов для чтения, записи или и того и другого.\n\nСуществует два метода открытия файла в Ruby.\n\n* Метод File.new: с его помощью можно создать новый файл для чтения, записи или и того и другого.\n* Метод File.open: с его помощью создается новый объект файла. Этот объект файла присваивается файлу.\n\n Разница между обоими методами заключается в том, что метод File.open может быть ассоциирован с блоком, в то время как метод File.new - нет."
    },
    "49": {
        "question": "Объясните классовые библиотеки в Ruby.",
        "answer": "Классовые библиотеки Ruby содержат различные области, такие как программирование потоков, типы данных и различные области. Каждый день появляются дополнительные библиотеки. Вот некоторые области, для которых существуют соответствующие классовые библиотеки.\n\n* Обработка текста: File, String, Regexp для быстрой и чистой обработки текста.\n* Программирование CGI: Существуют поддерживающие библиотеки классов для программирования CGI, такие как, интерфейс базы данных, eRuby, mod_ruby для Apache, классы обработки текста.\n* Сетевое программирование: В Ruby доступны различные хорошо спроектированные сокеты для сетевого программирования.\n* Программирование графического интерфейса: Ruby/Tk и Ruby/Gtk - классы для программирования графического интерфейса\n* Программирование XML: Регулярный выражение для обработки текста в кодировке UTF-8 делает программирование XML очень удобным в Ruby."
    },
    "50": {
        "question": "Что такое метод sysread в Ruby?",
        "answer": "Метод sysread также используется для чтения содержимого файла. С его помощью можно открыть файл в любом режиме."
    },
    "51": {
        "question": "Как проверить существует ли директория или нет в Ruby?",
        "answer": "Для проверки существует ли директория или нет используется метод exists?.\n\nСинтаксис:\n\nputs Dir.exists? 'dirName'"
    },
    "52": {
        "question": "Объясните исключения в Ruby.",
        "answer": "Исключение Ruby - это объект, экземпляр класса Exception или его потомок. Когда что-то идет не так, программа на Ruby выбрасывает исключительное поведение. По умолчанию программа на Ruby завершается при выбрасывании исключения."
    },
    "53": {
        "question": "Какие встроенные классы исключений Ruby существуют?",
        "answer": "Встроенные подклассы исключений включают в себя:\n\n* NoMemoryError\n* ScriptError\n* SecurityError\n* SignalException"
    },
    "54": {
        "question": "Как обрабатывается исключение в Ruby?",
        "answer": "Для обработки исключения код, который вызывает исключение, заключается в блок begin-end. С помощью блоков rescue мы можем указать типы исключений, которые хотим обработать."
    },
    "55": {
        "question": "Объясните использование оператора retry в Ruby?",
        "answer": "Обычно в блоке rescue исключение перехватывается, и код возобновляется после начала блока. С помощью оператора retry код блока rescue может быть возобновлен с начала после перехвата исключения."
    },
    "56": {
        "question": "Объясните оператор raise в Ruby?",
        "answer": "Оператор raise используется для генерации исключения.\n\nСинтаксис:\n\nraise\n\nИли,\n\nraise 'Сообщение об ошибке'\n\nИли,\n\nraise ТипИсключения, 'Сообщение об ошибке'\n\nИли,\n\nraise ТипИсключения, 'Сообщение об ошибке' условие"
    },
    "57": {
        "question": "Объясните использование оператора ensure в Ruby?",
        "answer": "Существует блок ensure, который гарантирует выполнение некоторой обработки в конце кода. Блок ensure всегда выполняется независимо от того, возникло исключение или нет. Он размещается после последнего блока rescue и всегда выполняется при завершении блока.\n\nБлок ensure будет выполняться в любом случае, вне зависимости от того, возникло ли исключение, исключение было перехвачено или код был завершен необработанным исключением.\n\nСинтаксис:\n\nbegin\nкод..\n#.. генерация исключения\nrescue\n#.. исключение перехвачено\nensure\n#.. Этот код будет выполнен всегда.\nend"
    }
}