{
    "1": {
        "question": "Что такое JavaScript?",
        "answer": "JavaScript - это очень мощный язык сценариев на стороне клиента. JavaScript в основном используется для улучшения взаимодействия пользователя с веб-страницей. Другими словами, с помощью JavaScript вы можете сделать свою веб-страницу более живой и интерактивной. JavaScript также широко используется в разработке игр и мобильных приложений."
    },
    "2": {
        "question": "Перечислите различия между Java и JavaScript?",
        "answer": "Java - это полноценный язык программирования. В отличие от этого, JavaScript - это закодированная программа, которую можно внедрить на HTML-страницы. Эти два языка совсем не взаимозависимы и предназначены для разных целей. Java является объектно-ориентированным языком программирования (ООП) или структурированным языком программирования, таким как C++ или C, в то время как JavaScript - это язык сценариев на стороне клиента."
    },
    "3": {
        "question": "Какие существуют типы данных в JavaScript?",
        "answer": "Вот типы данных JavaScript:\n\n * Число\n * Строка\n * Булево значение\n * ОбъектUndefined"
    },
    "4": {
        "question": "Каково назначение функции isNaN?",
        "answer": "Функция isNan возвращает true, если аргумент не является числом; в противном случае она возвращает false."
    },
    "5": {
        "question": "Что быстрее - JavaScript или скрипт ASP?",
        "answer": "JavaScript быстрее. JavaScript - это язык на стороне клиента и, следовательно, для выполнения он не требует помощи веб-сервера. С другой стороны, ASP - это язык на стороне сервера и, следовательно, всегда медленнее, чем JavaScript. Сейчас JavaScript также является языком на стороне сервера (nodejs)."
    },
    "6": {
        "question": "Что такое отрицательная бесконечность?",
        "answer": "Отрицательная бесконечность - это число в JavaScript, которое можно получить, разделив отрицательное число на ноль."
    },
    "7": {
        "question": "Можно ли разбить код JavaScript на несколько строк?",
        "answer": "Разбивку внутри строки можно сделать, используя обратный слэш в конце первой строки."
    },
    "8": {
        "question": "Какая компания разработала JavaScript?",
        "answer": "Компания Netscape разработала JavaScript."
    },
    "9": {
        "question": "Что такое необъявленные и неопределенные переменные?",
        "answer": "Необъявленные переменные - это те, которые не существуют в программе и не объявлены. Если программа пытается прочитать значение необъявленной переменной, возникает ошибка времени выполнения.\n\nНеопределенные переменные - это те, которые объявлены в программе, но им не присвоено никакого значения. Если программа пытается прочитать значение неопределенной переменной, возвращается значение undefined."
    },
    "10": {
        "question": "Что такое глобальные переменные? Как объявляются эти переменные?",
        "answer": "Глобальные переменные доступны на протяжении всего кода, поэтому у них нет области видимости. Ключевое слово var используется для объявления локальной переменной или объекта. Если ключевое слово var опущено, объявляется глобальная переменная.\n\nПример:\n\n// Объявление глобальной переменной: globalVariable = “Test”;\n\nПроблемы, с которыми сталкиваются при использовании глобальных переменных, - это конфликт имен переменных локальной и глобальной области видимости. Кроме того, трудно отлаживать и тестировать код, который зависит от глобальных переменных."
    },
    "11": {
        "question": "Что такое окно prompt?",
        "answer": "Окно prompt - это окно, которое позволяет пользователю ввести данные, предоставляя текстовое поле. Будет предоставлена метка и поле для ввода текста или числа."
    },
    "12": {
        "question": "Что такое ключевое слово ‘this’ в JavaScript?",
        "answer": "Ключевое слово ‘this’ относится к объекту, из которого оно было вызвано."
    },
    "13": {
        "question": "Как работают таймеры в JavaScript?",
        "answer": "Таймеры используются для выполнения фрагмента кода в заданное время или повторения кода через определенный интервал. Это делается с использованием функций setTimeout, setInterval и clearInterval.\n\nФункция setTimeout(function, delay) используется для запуска таймера, который вызывает определенную функцию после указанной задержки. Функция setInterval(function, delay) повторяет выполнение указанной функции через указанный интервал и останавливается только при отмене. Функция clearInterval(id) инструктирует таймер остановиться.\n\nТаймеры работают в одном потоке, поэтому события могут накапливаться, ожидая выполнения."
    },
    "14": {
        "question": "Какова разница между ViewState и SessionState?",
        "answer": "‘ViewState’ специфичен для страницы в сеансе.\n‘SessionState’ специфичен для пользовательских данных, которые могут быть доступны на всех страницах веб-приложения."
    },
    "15": {
        "question": "Что такое оператор ===?",
        "answer": "=== называется строгим оператором равенства, который возвращает true, когда два операнда имеют одно и то же значение без преобразования."
    },
    "16": {
        "question": "Поддерживает ли JavaScript автоматическое преобразование типов?",
        "answer": "Да, JavaScript поддерживает автоматическое преобразование типов. Это общий способ преобразования типов, используемый разработчиками JavaScript."
    },
    "17": {
        "question": "Как читать и записывать файл с помощью JavaScript?",
        "answer": "Существует два способа читать и записывать файл с помощью JavaScript\n\n * Использование расширений JavaScript\n\n * Использование веб-страницы и объектов Active X"
    },
    "18": {
        "question": "Какие существуют структуры циклов в JavaScript?",
        "answer": "Следующие структуры циклов существуют в Javascript:\n\n * For\n * While\n * Do-while loops"
    },
    "19": {
        "question": "Что такое переменная типизации в JavaScript?",
        "answer": "Переменная типизации используется для присваивания числа переменной. Та же самая переменная может быть присвоена строке. Пример:\n\ni = 10;\ni = 'string'\n\nЭто называется переменной типизации."
    },
    "20": {
        "question": "Как можно преобразовать строку из любого основания в целое число в JavaScript?",
        "answer": "Функция parseInt() используется для преобразования чисел между разными основаниями. parseInt() принимает строку, которую нужно преобразовать, в качестве своего первого параметра. Второй параметр - это основание данной строки.\n\nЧтобы преобразовать 4F (или основание 16) в целое число, используется следующий код –\n\nparseInt ('4F', 16);"
    },
    "21": {
        "question": "В чем разница между «==» и «===»?",
        "answer": "«==» проверяет только равенство по значению, в то время как «===» является более строгим тестом равенства и возвращает false, если либо значение, либо тип двух переменных различны."
    },
    "22": {
        "question": "Как определить операционную систему на клиентской машине?",
        "answer": "Для определения операционной системы на клиентской машине должна использоваться строка (свойство) navigator.Platform."
    },
    "23": {
        "question": "Что означает NULL в JavaScript?",
        "answer": "Значение NULL используется для представления отсутствия значения или объекта. Это подразумевает отсутствие объекта или пустой строки, отсутствие допустимого булевого значения, отсутствие числа и отсутствие объекта массива."
    },
    "24": {
        "question": "Какова функция оператора delete?",
        "answer": "Ключевое слово delete используется для удаления свойства, а также его значения.\n\nПример\nvar student= {age:20, batch:'ABC'};\nDelete student. age;"
    },
    "25": {
        "question": "Что такое значение undefined в JavaScript?",
        "answer": "Значение undefined означает, что\n\nПеременная, используемая в коде, не существует\nПеременная не присвоена никакому значению\nСвойство не существует."
    },
    "26": {
        "question": "Какие существуют типы всплывающих окон в JavaScript?",
        "answer": "* Alert\n* Confirm и\n* Prompt"
    },
    "27": {
        "question": "Для чего используется Void (0)?",
        "answer": "Void(0) используется для предотвращения обновления страницы, и параметр \"ноль\" передается при вызове.\n\nVoid(0) используется для вызова другого метода без обновления страницы."
    },
    "28": {
        "question": "Какой тип данных у переменных в JavaScript?",
        "answer": "Все переменные в JavaScript имеют тип данных объекта."
    },
    "29": {
        "question": "В чем разница между окном предупреждения и окном подтверждения?",
        "answer": "Окно предупреждения отображает только одну кнопку, которая является кнопкой ОК.\nНо окно подтверждения отображает две кнопки, а именно ОК и отмену."
    },
    "30": {
        "question": "Что такое JavaScript Cookies?",
        "answer": "Cookies - это небольшие текстовые файлы, хранящиеся на компьютере, и они создаются при посещении пользователями веб-сайтов для хранения информации, которая им нужна. Примерами могут быть данные имени пользователя и информация о корзине покупок с предыдущих посещений."
    },
    "31": {
        "question": "Имеет ли JavaScript область видимости на уровне концепции?",
        "answer": "Нет. В JavaScript нет области видимости на уровне концепции. Переменная, объявленная внутри функции, имеет область видимости только внутри этой функции."
    },
    "32": {
        "question": "Каковы недостатки использования innerHTML в JavaScript?",
        "answer": "Если вы используете innerHTML в JavaScript, то недостатки следующие:\n\n * Содержимое заменяется повсюду\n * Нельзя использовать как «добавление к innerHTML»\n * Даже если вы используете +=, как «innerHTML = innerHTML + ‘html'», все равно старое содержимое заменяется на html\n * Весь контент innerHTML повторно анализируется и создается в элементы. Поэтому это намного медленнее\n * InnerHTML не предоставляет валидацию, и поэтому мы можем потенциально вставить допустимый и неправильный HTML в документ и сломать его."
    },
    "33": {
        "question": "Что такое операторы break и continue?",
        "answer": "Оператор break выходит из текущего цикла.\n\nОператор continue продолжает выполнение следующего оператора цикла."
    },
    "34": {
        "question": "Каковы две основные группы типов данных в JavaScript?",
        "answer": "* Они следующие — Примитивные\n\n* Ссылочные типы\n\nПримитивные типы — это числовые и логические типы данных. Ссылочные типы — это более сложные типы, такие как строки и даты."
    },
    "35": {
        "question": "Для чего используется оператор typeof?",
        "answer": "'Typeof' — это оператор, который возвращает строковое описание типа переменной."
    },
    "36": {
        "question": "Как определить операционную систему на клиентском компьютере с помощью JavaScript?",
        "answer": "'Navigator. appVersion' используется для определения названия операционной системы на клиентском компьютере."
    },
    "37": {
        "question": "Какие существуют различные типы ошибок в JavaScript?",
        "answer": "Существует три типа ошибок:\n\n * Ошибки времени загрузки: ошибки, которые возникают при загрузке веб-страницы, такие как ошибки синтаксиса, называются ошибками времени загрузки и генерируют ошибки динамически.\n\n * Ошибки времени выполнения: ошибки, которые возникают из-за неправильного использования команд внутри языка HTML.\n\n * Логические ошибки: это ошибки, которые возникают из-за неправильной логики выполнения функции с различными операциями."
    },
    "38": {
        "question": "В чем разница между JavaScript и Jscript?",
        "answer": "Оба почти одинаковы. JavaScript был разработан Netscape, а JScript — Microsoft."
    },
    "39": {
        "question": "Что такое 'Строгий режим' в JavaScript, и как его можно включить?",
        "answer": "Строгий режим добавляет определенные обязательства к JavaScript. В строгом режиме JavaScript показывает ошибки для участка кода, которые ранее не показывали ошибку, но могут быть проблематичными и потенциально небезопасными. Строгий режим также решает некоторые ошибки, которые мешают эффективной работе движков JavaScript.\n\nСтрогий режим можно включить, добавив строковый литерал \"use strict\" выше файла."
    },
    "40": {
        "question": "Как можно обнаружить операционную систему клиентского компьютера?",
        "answer": "Строку navigator. appVersion можно использовать для определения операционной системы на клиентском компьютере."
    },
    "41": {
        "question": "Что такое window.onload и onDocumentReady?",
        "answer": "Функция onload не выполняется, пока не загружена вся информация на странице. Это приводит к значительной задержке перед выполнением какого-либо кода.\n\nonDocumentReady загружает код сразу после загрузки DOM. Это позволяет раннему изменению кода."
    },
    "42": {
        "question": "Что такое всплытие событий (event bubbling)?",
        "answer": "JavaScript позволяет вложенным DOM-элементам находиться внутри друг друга. В таком случае, если обработчик дочернего элемента был нажат, обработчик родительского элемента также будет работать, как если бы его нажали тоже."
    },
    "43": {
        "question": "Является ли JavaScript регистро-чувствительным? Приведите пример.",
        "answer": "Да, JavaScript регистро-чувствителен. Например, функция parseInt не тождественна функции Parseint."
    },
    "44": {
        "question": "Напишите различие между веб-садом и веб-фермой?",
        "answer": "И веб-сад, и веб-ферма являются системами веб-хостинга. Единственное различие заключается в том, что веб-сад - это настройка, включающая множество процессоров в одном сервере. В то время как веб-ферма - это более крупная настройка, использующая более одного сервера."
    },
    "45": {
        "question": "Как используется DOM в JavaScript?",
        "answer": "DOM означает Document Object Model и отвечает за то, как различные объекты в документе взаимодействуют друг с другом. DOM необходим для разработки веб-страниц, которые включают объекты, такие как абзацы, ссылки и т. д. Этими объектами можно управлять, чтобы добавлять или удалять действия. DOM также необходим для добавления дополнительных возможностей на веб-страницу. Благодаря использованию API обеспечивается преимущество перед другими существующими моделями."
    },
    "46": {
        "question": "Как используются обработчики событий в JavaScript?",
        "answer": "События - это действия, происходящие в результате действий пользователя, таких как щелчок по ссылке или заполнение формы. Для правильного выполнения всех этих событий требуется обработчик событий. Обработчики событий являются дополнительным атрибутом объекта. Этот атрибут включает имя события и действие, выполняемое в случае возникновения события."
    },
    "47": {
        "question": "Какова роль отложенных скриптов в JavaScript?",
        "answer": "Разбор HTML-кода во время загрузки страницы по умолчанию приостанавливается, пока скрипт не прекратит выполнение. Если сервер медленный или скрипт особенно тяжелый, то веб-страница задерживается.\n\nПри использовании отложенных скриптов выполнение скрипта откладывается до тех пор, пока парсер HTML работает. Это сокращает время загрузки веб-страниц, и они отображаются быстрее."
    },
    "48": {
        "question": "Каковы различные функциональные компоненты в JavaScript?",
        "answer": "Различные функциональные компоненты в JavaScript -\n\n * Функции первого класса: Функции в JavaScript используются как объекты первого класса. Это обычно означает, что эти функции могут передаваться в качестве аргументов другим функциям, возвращаться в качестве значений из других функций, присваиваться переменным или также могут храниться в структурах данных.\n\n * Вложенные функции: Функции, которые определены внутри других функций, называются вложенными функциями. Они вызываются «каждый раз, когда вызывается главная функция»."
    },
    "49": {
        "question": "Как связаны JavaScript и ECMA Script?",
        "answer": "ECMA Script подобен правилам и руководствам, в то время как JavaScript - это язык сценариев, используемый для веб-разработки."
    },
    "50": {
        "question": "Что такое пространство имен в JavaScript, и как его использовать?",
        "answer": "Пространство имен используется для группировки желаемых функций, переменных и т. д. под уникальным именем. Это имя, которое было присоединено к желаемым функциям, объектам и свойствам. Это повышает модульность в кодировании и позволяет повторно использовать код."
    },
    "51": {
        "question": "Что такое функция высшего порядка?",
        "answer": "Функции, способные принимать другие функции в качестве аргументов и возвращать функции в качестве своего возвращаемого значения."
    },
    "52": {
        "question": "Какие символы экранирования используются в JavaScript?",
        "answer": "Мы используем обратный слеш перед специальными символами, когда хотим действительно отобразить или записать эти символы. Например, этот комбинатион выведет двойные кавычки."
    },
    "53": {
        "question": "Что такое сборка мусора в JavaScript?",
        "answer": "Этот тип автоматического управления памятью отслеживает выделение памяти, чтобы освободить и освободить выделенные блоки памяти, которые больше не нужны программе JavaScript."
    },
    "54": {
        "question": "Объясните использование отладчиков в JavaScript.",
        "answer": "Отладчики помогают разработчикам выявлять ошибки в коде, выполняя тестовые запуски, устанавливая точки останова и проверяя значения переменных на различных этапах. Популярные веб-браузеры, такие как Safari, Chrome, Firefox, Opera и т. д., имеют встроенный отладчик.\n\nJavaScript также имеет ключевое слово debugger для воссоздания точек останова, но оно работает только при включенной отладке в настройках веб-браузера."
    },
    "55": {
        "question": "Что такое прототипное наследование в JavaScript?",
        "answer": "Способ, с помощью которого объекты наследуют свойства и методы от других объектов в JavaScript. При создании объекта он имеет ссылку на другой объект, называемый его прототипом, и может получать доступ к свойствам и методам этого объекта-прототипа."
    },
    "56": {
        "question": "Какова разница между движком JavaScript и средой выполнения JavaScript?",
        "answer": "JavaScript-движок преобразует код JavaScript в машинный код, который может выполняться компьютером, в то время как среда выполнения JavaScript - это окружение, в котором выполняется код, такое как веб-браузер или Node.js"
    },
    "57": {
        "question": "Что такое цикл событий в JavaScript?",
        "answer": "Механизм, который позволяет выполнение кода быть неблокирующим путем непрерывной проверки очереди сообщений и выполнения любого кода, который ожидает в очереди."
    },
    "58": {
        "question": "Что такое JSON?",
        "answer": "JavaScript Object Notation, или JSON, использует синтаксис объектов JavaScript для отправки данных по сети с расширением файла .json и MIME-типом \"application/json\"."
    },
    "59": {
        "question": "Что такое функция задержки (debounce)?",
        "answer": "Функция задержки (debounce) откладывает выполнение функции до тех пор, пока не пройдет определенное количество времени без ее вызова.\n\nОграничивая частоту вызова функции, можно обеспечить лучшую производительность и предотвратить проблемы с зависанием браузера. Для реализации функции задержки (debounce) в JavaScript используйте метод setTimeOut()."
    },
    "60": {
        "question": "Что такое мемоизация в JavaScript?",
        "answer": "Мемоизация - это техника хранения результатов дорогостоящих вызовов функций, а затем возврат кэшированных результатов, когда снова встречаются те же входные данные. Это помогает оптимизировать производительность функции, избегая ненужных повторных вычислений и снижая временную сложность."
    }
}