{
    "1": {
        "question": "What is the difference between JDK and JRE?",
        "answer": "JDK stands for Java Development Kit, which is a software development environment for building Java applications. JRE stands for Java Runtime Environment, which is required to run Java programs."
    },
    "2": {
        "question": "Why is Java a platform independent language?",
        "answer": "By relying on a virtual machine, Java achieves platform independence. In practice, this means that both the Java programming language and its associated APIs are first compiled into bytecodes that can run on multiple platforms. Then, the virtual machine handles any variations in how these bytecodes are executed across different platforms."
    },
    "3": {
        "question": "What is the difference between an abstract class and an interface?",
        "answer": "An abstract class is a class that cannot be instantiated and can only be inherited. An interface is a blueprint of a class that contains only abstract methods and constants."
    },
    "4": {
        "question": "What is the difference between final, finally, and finalize?",
        "answer": "Final is used to make a variable or method constant and cannot be changed later. finally is used in try-catch blocks to execute a block of code regardless of whether an exception is thrown or not. finalise is a method that is called by the garbage collector when an object is no longer in use."
    },
    "5": {
        "question": "What is the difference between stack and heap memory?",
        "answer": "Stack memory is used for storing local variables and function call, while heap memory is used for storing objects and their instance variables."
    },
    "6": {
        "question": "What is the difference between method overloading and method overriding?",
        "answer": "Method overloading is creating multiple methods in a class with the same name but different parameters, while method overriding is creating a method in a subclass with the same name and parameters as a method in its superclass."
    },
    "7": {
        "question": "What is the difference between an abstract class and an interface?",
        "answer": "An abstract class can have both abstract and concrete methods, while an interface can only have abstract methods. A class can extend only one abstract class, but it can implement multiple interfaces."
    },
    "8": {
        "question": "What is the difference between a private and a protected modifier?",
        "answer": "A private modifier makes a member accessible only within the same class, while a protected modifier makes a member accessible within the same class and its subclasses."
    },
    "9": {
        "question": "What is constructor overloading in Java?",
        "answer": "Constructor overloading is a concept in object- oriented programming where a class can have multiple constructors with different parameter lists. Each constructor provides a different way to initialise objects of that class."
    },
    "10": {
        "question": "What is the use of super keyword in Java?",
        "answer": "The super keyword is used to access data members of the parent class when the data members names of the parent class and its child subclasses are the same, to call the default and parameterized constructor of the parent class inside the child subclass and to access parent class methods when the child subclasses have overridden them."
    },
    "11": {
        "question": "What is the difference between static methods, static variables, and static classes in Java?",
        "answer": "Static Methods and Static variables are those methods and variables that belong to the class of the java program, not to the object of the class. They are allocated memory when the class is loaded and can directly be called with the help of the class names. A class in the java program cannot be static except if it is the inner class. If it is an inner static class, then it exactly works like other static members of the class"
    },
    "12": {
        "question": "What exactly is System.out.println in Java?",
        "answer": "System.out.println() is a method to print a message on the console. System - It is a class present in java.lang package. Out is the static variable of type PrintStream class present in the System class. println() is the method present in the PrintStream class."
    },
    "13": {
        "question": "What part of memory - Stack or Heap - is cleaned in the garbage collection process?",
        "answer": "Garbage Collection is done on heap memory to free the memory used by objects that don't have any reference. Any object created in the heap space has global access and can be referenced from anywhere in the application."
    },
    "14": {
        "question": "What are the Object Oriented Features supported by Java?",
        "answer": "Java is an object-oriented programming language and supports the following object- oriented features:\n\n Encapsulation: Java allows encapsulation, which is the practice of hiding the implementation details of an object from other objects. This is achieved through the use of access modifiers*.\n\n Inheritance: Java supports inheritance, which allows a new class to be based on an existing class, inheriting its attributes and methods. This enables code reuse and makes it easier to create new classes that have common properties with existing classes.\n\n  Polymorphism: Java supports polymorphism, which allows objects of different classes to be treated as if they were objects of a common superclass. This can be achieved through method overriding and method overloading.\n\n Abstraction: Java allows abstraction, which is the process of hiding complex implementation details and providing a simplified interface for the user. This can be achieved through abstract classes and interfaces.\n\n Classes and Objects: Java is a class-based language, which means that it provides constructs for defining classes and creating objects from those classes."
    },
    "15": {
        "question": "What are the different access specifiers used in Java?",
        "answer": "Java has 4 access specifiers.\n\n Public Can be accessed by any class or method\n\nProtected Can be accessed by the class of the same package, or by the sub-class of this class, or within the same class\n\nDefault Are accessible only within the package, is the default option for all classes, methods and variables.\n\nPrivate Can be accessed only within the class"
    },
    "16": {
        "question": "What is the difference between composition and inheritance?",
        "answer": "Composition is a 'has-a' relationship, where a class contains an object of another class as a member variable. Inheritance is an 'is-a' relationship, where a subclass extends a superclass to inherit its attributes and methods."
    },
    "17": {
        "question": "What is the purpose of an abstract class?",
        "answer": "An abstract class is a class that cannot be instantiated and is used as a base class for other classes to inherit from. It can contain abstract methods, which are declared but not implemented in the abstract class and must be implemented in the subclasses."
    },
    "18": {
        "question": "What are the differences between constructor and method of a class in Java?",
        "answer": "Constructor is used for initialising the object state whereas method is used for exposing the object's behaviour. Constructors have no return type but Methods should have a return type. Even if it does not return anything, the return type is void. If the constructor is not defined, then a default constructor is provided by the java compiler. The constructor name should be equal to the class name. A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. A method can be defined as final but it cannot be overridden in its subclasses."
    },
    "19": {
        "question": "What is the diamond problem in Java and how is it solved?",
        "answer": "The diamond problem is an issue that can arise in programming languages that support multiple inheritance, where a class inherits from two or more classes that have a common ancestor. This can cause ambiguity in the method resolution order, leading to unpredictable behaviour. In Java, multiple inheritance is not supported directly, but it can be simulated using interfaces. A class can implement one or more interfaces, effectively inheriting their properties and methods."
    },
    "20": {
        "question": "What is the difference between local and instance variables in Java?",
        "answer": "Instance variables are accessible by all the methods in the class. They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it. Local variables are those variables present within a block, function, or constructor and can be accessed only inside them. The utilisation of the variable is restricted to the block scope."
    },
    "21": {
        "question": "What is a Marker interface in Java?",
        "answer": "Marker interfaces or tagging interfaces are those which have no methods and constants defined in them. They help the compiler and JVM get run time-related object information."
    },
    "22": {
        "question": "Why are strings immutable in Java?",
        "answer": "This storage area in the Java heap is specifically used to store String literals, with the aim of reducing the creation of temporary String objects through sharing. For sharing to be possible, an immutable class is required. Also no external synchronisation of threads is required if the String objects are immutable. In Hash Tables and HashMaps, keys are String objects and should thus be immutable to avoid modification."
    },
    "23": {
        "question": "What is the difference between creating a String using new() and as a literal?",
        "answer": "If we create a String using new(), then a new object is created in the heap memory even if that value is already present in the heap memory. If we create a String using String literal and its value already exists in the string pool, then that String variable also points to that same value in the String pool without the creation of a new String with that value."
    },
    "24": {
        "question": "What is the Collections framework?",
        "answer": "The Collections framework is a set of interfaces and classes that provide common data structures such as lists, sets, and maps."
    },
    "25": {
        "question": "What is the difference between ArrayList and LinkedList?",
        "answer": "ArrayList is a dynamic array that can grow or shrink as needed, while LinkedList is a doubly linked list that allows fast insertion and deletion of elements."
    },
    "26": {
        "question": "What is the difference between a HashMap and a TreeMap?",
        "answer": "HashMap is a hash table that stores key-value pairs, while TreeMap is a red-black tree that stores key-value pairs in sorted order."
    },
    "27": {
        "question": "What is the difference between a HashSet and a TreeSet?",
        "answer": "HashSet is a set that stores unique elements in an unordered manner, while TreeSet is a set that stores unique elements in a sorted manner."
    },
    "28": {
        "question": "What is the difference between an Iterator and a ListIterator?",
        "answer": "Iterator is used to traverse a collection in a forward direction, while ListIterator is used to traverse a list in both forward and backward directions."
    },
    "29": {
        "question": "What is the difference between an ArrayList and a LinkedList?",
        "answer": "An ArrayList is a dynamic array that can grow or shrink as needed, while a LinkedList is a doubly linked list that allows fast insertion and deletion of elements. Accessing an element in an ArrayList is O(1) on average, while accessing an element in a LinkedList is O(n) on average."
    },
    "30": {
        "question": "What is the purpose of the Comparable interface?",
        "answer": "The Comparable interface is used to provide a natural ordering for a class. It contains a single method compareTo() that compares the current object with another object of the same class and returns a negative integer, zero, or a positive integer depending on whether the current object is less than, equal to, or greater than the other object, respectively."
    },
    "31": {
        "question": "What is the difference between a HashSet and a TreeSet?",
        "answer": "A HashSet is an unordered collection of unique elements, while a TreeSet is a sorted collection of unique elements. HashSet uses a hash table to store its elements, while TreeSet uses a balanced binary tree."
    },
    "32": {
        "question": "What is the purpose of the java.util.concurrent package?",
        "answer": "The java.util.concurrent package provides classes for concurrent programming, including thread pools, locks, atomic variables, and concurrent collections. It is designed to improve performance and scalability in multi- threaded applications."
    },
    "33": {
        "question": "",
        "answer": ""
    },
    "34": {
        "question": "",
        "answer": ""
    },
    "35": {
        "question": "",
        "answer": ""
    },
    "36": {
        "question": "",
        "answer": ""
    },
    "37": {
        "question": "",
        "answer": ""
    },
    "38": {
        "question": "",
        "answer": ""
    },
    "39": {
        "question": "",
        "answer": ""
    },
    "40": {
        "question": "",
        "answer": ""
    },
    "41": {
        "question": "",
        "answer": ""
    },
    "42": {
        "question": "",
        "answer": ""
    },
    "43": {
        "question": "",
        "answer": ""
    },
    "44": {
        "question": "",
        "answer": ""
    },
    "45": {
        "question": "",
        "answer": ""
    },
    "46": {
        "question": "",
        "answer": ""
    },
    "47": {
        "question": "",
        "answer": ""
    },
    "48": {
        "question": "",
        "answer": ""
    },
    "49": {
        "question": "",
        "answer": ""
    },
    "50": {
        "question": "",
        "answer": ""
    },
    "51": {
        "question": "",
        "answer": ""
    },
    "52": {
        "question": "",
        "answer": ""
    },
    "53": {
        "question": "",
        "answer": ""
    },
    "54": {
        "question": "",
        "answer": ""
    },
    "55": {
        "question": "",
        "answer": ""
    },
    "56": {
        "question": "",
        "answer": ""
    },
    "57": {
        "question": "",
        "answer": ""
    },
    "58": {
        "question": "",
        "answer": ""
    },
    "59": {
        "question": "",
        "answer": ""
    },
    "60": {
        "question": "",
        "answer": ""
    },
    "61": {
        "question": "",
        "answer": ""
    },
    "62": {
        "question": "",
        "answer": ""
    },
    "63": {
        "question": "",
        "answer": ""
    },
    "64": {
        "question": "",
        "answer": ""
    },
    "65": {
        "question": "",
        "answer": ""
    },
    "66": {
        "question": "",
        "answer": ""
    },
    "67": {
        "question": "",
        "answer": ""
    },
    "68": {
        "question": "",
        "answer": ""
    },
    "69": {
        "question": "",
        "answer": ""
    },
    "70": {
        "question": "",
        "answer": ""
    },
    "71": {
        "question": "",
        "answer": ""
    },
    "72": {
        "question": "",
        "answer": ""
    },
    "73": {
        "question": "",
        "answer": ""
    },
    "74": {
        "question": "",
        "answer": ""
    },
    "75": {
        "question": "",
        "answer": ""
    },
    "76": {
        "question": "",
        "answer": ""
    },
    "77": {
        "question": "",
        "answer": ""
    },
    "78": {
        "question": "",
        "answer": ""
    },
    "79": {
        "question": "",
        "answer": ""
    },
    "80": {
        "question": "",
        "answer": ""
    }
}