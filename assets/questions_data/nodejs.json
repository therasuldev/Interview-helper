{
    "1": {
        "question": "What is a first class function in Javascript?",
        "answer": "When functions can be treated like any other variable then those functions are first-class functions. There are many other programming languages, for example, scala, Haskell, etc which follow this including JS. Now because of this function can be passed as a param to another function(callback) or a function can return another function(higher-order function). map() and filter() are higher-order functions that are popularly used."
    },
    "2": {
        "question": "What is Node.js and how it works?",
        "answer": "Node.js is a virtual machine that uses JavaScript as its scripting language and runs Chrome’s V8 JavaScript engine. Basically, Node.js is based on an event-driven architecture where I/O runs asynchronously making it lightweight and efficient. It is being used in developing desktop applications as well with a popular framework called electron as it provides API to access OS-level features such as file system, network, etc."
    },
    "3": {
        "question": "How do you manage packages in your node.js project?",
        "answer": "It can be managed by a number of package installers and their configuration file accordingly. Out of them mostly use npm or yarn. Both provide almost all libraries of javascript with extended features of controlling environment-specific configurations. To maintain versions of libs being installed in a project we use package.json and package-lock.json so that there is no issue in porting that app to a different environment."
    },
    "4": {
        "question": "How is Node.js better than other frameworks most popularly used?",
        "answer": "* Node.js provides simplicity in development because of its non-blocking I/O and even-based model results in short response time and concurrent processing, unlike other frameworks where developers have to use thread management. \n* It runs on a chrome v8 engine which is written in c++ and is highly performant with constant improvement. \n* Also since we will use Javascript in both the frontend and backend the development will be much faster. \n* And at last, there are ample libraries so that we don’t need to reinvent the wheel."
    },
    "5": {
        "question": "Explain the steps how “Control Flow” controls the functions calls?",
        "answer": "* Control the order of execution\n* Collect data\n* Limit concurrency\n* Call the following step in the program."
    },
    "6": {
        "question": "What are some commonly used timing features of Node.js?",
        "answer": "* setTimeout/clearTimeout – This is used to implement delays in code execution.\n* setInterval/clearInterval – This is used to run a code block multiple times.\n* setImmediate/clearImmediate – Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the event loop.\n* process.nextTick – Both setImmediate and process.nextTick appear to be doing the same thing; however, you may prefer one over the other depending on your callback’s urgency. "
    },
    "7": {
        "question": "What are the advantages of using promises instead of callbacks?",
        "answer": "The main advantage of using promise is you get an object to decide the action that needs to be taken after the async task completes. This gives more manageable code and avoids callback hell."
    },
    "8": {
        "question": "What is fork in node JS?",
        "answer": "A fork in general is used to spawn child processes. In node it is used to create a new instance of v8 engine to run multiple workers to execute the code."
    },
    "9": {
        "question": "Why is Node.js single-threaded?",
        "answer": "Node.js was created explicitly as an experiment in async processing. This was to try a new theory of doing async processing on a single thread over the existing thread-based implementation of scaling via different frameworks."
    },
    "10": {
        "question": "How do you create a simple server in Node.js that returns Hello World?",
        "answer": "var http = require('http');\nhttp.createServer(function (request, response) {\nresponse.writeHead(200, {'Content-Type': 'text/plain'});\nresponse.end('Hello World\n');\n}).listen(3000);\n"
    },
    "11": {
        "question": "How many types of API functions are there in Node.js?",
        "answer": "There are two types of API functions:\n\n* Asynchronous, non-blocking functions - mostly I/O operations which can be fork out of the main loop.\n* Synchronous, blocking functions - mostly operations that influence the process running in the main loop."
    },
    "12": {
        "question": "What is REPL?",
        "answer": "PL in Node.js stands for Read, Eval, Print, and Loop, which further means evaluating code on the go."
    },
    "13": {
        "question": "List down the two arguments that async.queue takes as input?",
        "answer": "* Task Function\n* Concurrency Value"
    },
    "14": {
        "question": "What is the purpose of module.exports?",
        "answer": "This is used to expose functions of a particular module or file to be used elsewhere in the project. This can be used to encapsulate all similar functions in a file which further improves the project structure."
    },
    "15": {
        "question": "What tools can be used to assure consistent code style?",
        "answer": "ESLint can be used with any IDE to ensure a consistent coding style which further helps in maintaining the codebase. "
    },
    "16": {
        "question": "What is an event-loop in Node JS?",
        "answer": "Whatever that is async is managed by event-loop using a queue and listener.\n\nwhen an async function needs to be executed(or I/O) the main thread sends it to a different thread allowing v8 to keep executing the main code. Event loop involves different phases with specific tasks such as timers, pending callbacks, idle or prepare, poll, check, close callbacks with different FIFO queues. Also in between iterations it checks for async I/O or timers and shuts down cleanly if there aren't any."
    },
    "17": {
        "question": "Differentiate between process.nextTick() and setImmediate()?",
        "answer": "Both can be used to switch to an asynchronous mode of operation by listener functions. \n\nprocess.nextTick() sets the callback to execute but setImmediate pushes the callback in the queue to be executed. So the event loop runs in the following manner\n\ntimers–>pending callbacks–>idle,prepare–>connections(poll,data,etc)–>check–>close callbacks\n\nIn this process.nextTick() method adds the callback function to the start of the next event queue and setImmediate() method to place the function in the check phase of the next event queue."
    },
    "18": {
        "question": "How does Node.js overcome the problem of blocking of I/O operations?",
        "answer": "Since the node has an event loop that can be used to handle all the I/O operations in an asynchronous manner without blocking the main function. \n\nSo for example, if some network call needs to happen it will be scheduled in the event loop instead of the main thread(single thread). And if there are multiple such I/O calls each one will be queued accordingly to be executed separately(other than the main thread). \n\nThus even though we have single-threaded JS, I/O ops are handled in a nonblocking way."
    },
    "19": {
        "question": "What is node.js streams?",
        "answer": "Streams are instances of EventEmitter which can be used to work with streaming data in Node.js. They can be used for handling and manipulating streaming large files(videos, mp3, etc) over the network. They use buffers as their temporary storage.\n\nThere are mainly four types of the stream:\n*Writable: streams to which data can be written (for example, fs.createWriteStream()).\n* Readable: streams from which data can be read (for example, fs.createReadStream()).\n* Duplex: streams that are both Readable and Writable (for example, net.Socket).\n* Transform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate())."
    },
    "20": {
        "question": "What are node.js buffers?",
        "answer": "In general, buffers is a temporary memory that is mainly used by stream to hold on to some data until consumed. Buffers are introduced with additional use cases than JavaScript’s Unit8Array and are mainly used to represent a fixed-length sequence of bytes. This also supports legacy encodings like ASCII, utf-8, etc. It is a fixed(non-resizable) allocated memory outside the v8."
    },
    "21": {
        "question": "What is middleware?",
        "answer": "Middleware comes in between your request and business logic. It is mainly used to capture logs and enable rate limit, routing, authentication, basically whatever that is not a part of business logic. There are third-party middleware also such as body-parser and you can write your own middleware for a specific use case."
    },
    "22": {
        "question": "Explain what a Reactor Pattern in Node.js?",
        "answer": "Reactor pattern again a pattern for nonblocking I/O operations. But in general, this is used in any event-driven architecture. \n\nThere are two components in this: 1. Reactor 2. Handler.\nReactor: Its job is to dispatch the I/O event to appropriate handlers\nHandler: Its job is to actually work on those events"
    },
    "23": {
        "question": "Why should you separate Express app and server?",
        "answer": "The server is responsible for initializing the routes, middleware, and other application logic whereas the app has all the business logic which will be served by the routes initiated by the server. This ensures that the business logic is encapsulated and decoupled from the application logic which makes the project more readable and maintainable."
    },
    "24": {
        "question": "For Node.js, why Google uses V8 engine?",
        "answer": "Well, are there any other options available? Yes, of course, we have Spidermonkey from Firefox, Chakra from Edge but Google’s v8 is the most evolved(since it’s open-source so there’s a huge community helping in developing features and fixing bugs) and fastest(since it’s written in c++) we got till now as a JavaScript and WebAssembly engine. And it is portable to almost every machine known."
    },
    "25": {
        "question": "Describe the exit codes of Node.js?",
        "answer": "Exit codes give us an idea of how a process got terminated/the reason behind termination. \n\nA few of them are:\n\n* Uncaught fatal exception - (code - 1) - There has been an exception that is not handled\n* Unused - (code - 2) - This is reserved by bash\n* Fatal Error - (code - 5) - There has been an error in V8 with stderr output of the description\n* Internal Exception handler Run-time failure - (code - 7) - There has been an exception when bootstrapping function was called\n* Internal JavaScript Evaluation Failure - (code - 4) - There has been an exception when the bootstrapping process failed to return function value when evaluated."
    },
    "26": {
        "question": "Explain the concept of stub in Node.js?",
        "answer": "Stubs are used in writing tests which are an important part of development. It replaces the whole function which is getting tested.  \n\nThis helps in scenarios where we need to test:\n* External calls which make tests slow and difficult to write (e.g HTTP calls/ DB calls)\n* Triggering different outcomes for a piece of code (e.g. what happens if an error is thrown/ if it passes)"
    },
    "27": {
        "question": "What is an Event Emitter in Node.js?",
        "answer": "EventEmitter is a Node.js class that includes all the objects that are basically capable of emitting events. This can be done by attaching named events that are emitted by the object using an eventEmitter.on() function. Thus whenever this object throws an even the attached functions are invoked synchronously."
    },
    "28": {
        "question": "Enhancing Node.js performance through clustering.",
        "answer": "Node.js applications run on a single processor, which means that by default they don’t take advantage of a multiple-core system. Cluster mode is used to start up multiple node.js processes thereby having multiple instances of the event loop. When we start using cluster in a nodejs app behind the scene multiple node.js processes are created but there is also a parent process called the cluster manager which is responsible for monitoring the health of the individual instances of our application."
    },
    "29": {
        "question": "What is WASI and why is it being introduced?",
        "answer": "Web assembly provides an implementation of WebAssembly System Interface specification through WASI API in node.js implemented using WASI class. The introduction of WASI was done by keeping in mind its possible to use the underlying operating system via a collection of POSIX-like functions thus further enabling the application to use resources more efficiently and features that require system-level access."
    },
    "30": {
        "question": "What is the difference between synchronous and asynchronous functions?",
        "answer": "Synchronous functions are mainly used for I/O operations. They are instantaneous in providing a response to the data movement on the server and keeping up with the data as per the requirements. If there are no responses, the API will throw an error.\n\nOn the other hand, asynchronous functions, as the name suggests, work on the basis of not being synchronous. Here, HTTP requests, when pushed, will not wait for a response to begin. Responses to any previous requests will be continuous, even if the server has already gotten the response."
    },
    "31": {
        "question": "What are the asynchronous tasks that should occur in an event loop?",
        "answer": "Following are some of the tasks that can be done using an event loop asynchronously:\n\n* Blocking send requests\n* High computational requirement\n* Real-time I/O operations"
    },
    "32": {
        "question": "What is the order of execution in control flow statements?",
        "answer": "The following is the order in which control flow statements are used to process function calls:\n\n* Handling execution and queue\n* Data collection and storage\n* Concurrency handling and limiting\n* Execution of the next piece of code"
    },
    "33": {
        "question": "What are the input arguments for an asynchronous queue?",
        "answer": "There are two main arguments that an asynchronous queue uses. They are as follows:\n\n* Concurrency value\n* Task function"
    },
    "34": {
        "question": "What is the primary reason to use the event-based model in Node.js?",
        "answer": "The event-based model in Node.js is used to overcome the problems that occur when using blocking operations in the I/O channel.\n\nNext in this blog comprising Node.js questions, you need to understand how you can import libraries into Node.js."
    },
    "35": {
        "question": "What is meant by event-driven programming in Node.js?",
        "answer": "Event-driven programming is a technique in which the workflow execution of a program is mainly controlled by the occurrence of events from external programs or other sources.\nThe event-driven architecture consists of two entities, namely:\n* Event handling\n* Event selection"
    },
    "36": {
        "question": "What are the security implementations that are present in Node.js?",
        "answer": "The following are the important implementations for security:\n\n* Error handling protocols\n* Authentication pipelines"
    },
    "37": {
        "question": "What is the meaning of a test pyramid?",
        "answer": "A test pyramid is a methodology that is used to denote the number of test cases executed in unit testing, integration testing, and combined testing (in that order). This is maintained to ensure that an ample number of test cases are executed for the end-to-end development of a project."
    },
    "38": {
        "question": "What is Libuv?",
        "answer": "Libuv is a widely used library present in Node.js. It is used to complement the asynchronous I/O functionality of Node.js. It was developed in-house and used alongside systems such as Luvit, Julia, and more.\n\nThe following are some of the features of Libuv:\n* File system event handling\n* Child forking and handling\n* Asynchronous UDP and TCP sockets\n* Asynchronous file handling and operations"
    },
    "39": {
        "question": "What are global objects in Node.js?",
        "answer": "Global objects are objects with a scope that is accessible across all of the modules of the Node.js application. There will not be any need to include the objects in every module. One of the objects is declared as global. So, this is done to provide any functions, strings, or objects access across the application."
    },
    "40": {
        "question": "What is the difference between readFile and createReadStream in Node.js?",
        "answer": "* readFile: This is used to read all of the contents of a given file in an asynchronous manner. All of the content will be read into the memory before users can access it.\n* create ReadStream: This is used to break up the field into smaller chunks and then read it. The default chunk size is 64 KB, and this can be changed as per requirement."
    },
    "41": {
        "question": "What is the purpose of the crypto module in Node.js?",
        "answer": "The crypto module in Node.js is used to provide users with cryptographic functionalities. This provides them with a large number of wrappers to perform various operations such as ciphering, deciphering, signing, and hashing."
    },
    "42": {
        "question": "What is a passport in Node.js?",
        "answer": "Passport is a widely used middleware present in Node.js. It is primarily used for authentication, and it can easily fit into any Express.js–based web application.\n\nWith every application created, it will require unique authentication mechanisms. This is provided as single modules by using a passport, and it becomes easy to assign strategies to applications based on requirements, thereby avoiding any sort of dependencies."
    }
}